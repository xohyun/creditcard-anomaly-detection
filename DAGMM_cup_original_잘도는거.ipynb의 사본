{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"name":"DAGMM_cup_original22222.ipynb","provenance":[],"collapsed_sections":[],"authorship_tag":"ABX9TyOnn4CUxK1OOankE37/jzLs"},"kernelspec":{"name":"python3","display_name":"Python 3"},"language_info":{"name":"python"},"accelerator":"GPU","gpuClass":"standard"},"cells":[{"cell_type":"code","execution_count":2,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"ik9sLgGJ7G59","executionInfo":{"status":"ok","timestamp":1659065173937,"user_tz":-540,"elapsed":19939,"user":{"displayName":"아이덴티파이ai","userId":"09195867153538576050"}},"outputId":"5df357aa-8b21-4248-f865-75be520a5ca4"},"outputs":[{"output_type":"stream","name":"stdout","text":["Mounted at /content/drive\n","/content/drive/MyDrive/IITP/sohyun/creditcard_prediction/data\n"]}],"source":["from google.colab import drive\n","drive.mount('/content/drive')\n","%cd drive/MyDrive/IITP/sohyun/creditcard_prediction/data"]},{"cell_type":"code","source":["import os\n","import torch\n","import torch.nn as nn\n","import torch.nn.functional as F\n","from torch.autograd import Variable\n","import numpy as np\n","\n","def to_var(x, volatile=False):\n","    if torch.cuda.is_available():\n","        x = x.cuda()\n","    return Variable(x, volatile=volatile)\n","\n","def mkdir(directory):\n","    if not os.path.exists(directory):\n","        os.makedirs(directory)"],"metadata":{"id":"8ixkP9ze8mE2","executionInfo":{"status":"ok","timestamp":1659065173938,"user_tz":-540,"elapsed":14,"user":{"displayName":"아이덴티파이ai","userId":"09195867153538576050"}}},"execution_count":3,"outputs":[]},{"cell_type":"code","source":["import torch\n","import os\n","import random\n","from torch.utils.data import Dataset\n","from torch.utils.data import DataLoader\n","from torchvision import transforms\n","from torchvision.datasets import ImageFolder\n","from PIL import Image\n","import h5py\n","import numpy as np\n","import collections\n","import numbers\n","import math\n","import pandas as pd\n","\n","class KDD99Loader(object):\n","    def __init__(self, data_path, mode=\"train\"):\n","        self.mode=mode\n","        data = np.load(data_path)\n","\n","        labels = data[\"kdd\"][:,-1]\n","        features = data[\"kdd\"][:,:-1]\n","        N, D = features.shape\n","        \n","        normal_data = features[labels==1]\n","        normal_labels = labels[labels==1]\n","\n","        N_normal = normal_data.shape[0]\n","\n","        attack_data = features[labels==0]\n","        attack_labels = labels[labels==0]\n","\n","        N_attack = attack_data.shape[0]\n","\n","        randIdx = np.arange(N_attack)\n","        np.random.shuffle(randIdx)\n","        N_train = N_attack // 2\n","\n","        self.train = attack_data[randIdx[:N_train]]\n","        self.train_labels = attack_labels[randIdx[:N_train]]\n","\n","        self.test = attack_data[randIdx[N_train:]]\n","        self.test_labels = attack_labels[randIdx[N_train:]]\n","\n","        self.test = np.concatenate((self.test, normal_data),axis=0)\n","        self.test_labels = np.concatenate((self.test_labels, normal_labels),axis=0)\n","\n","\n","    def __len__(self):\n","        \"\"\"\n","        Number of images in the object dataset.\n","        \"\"\"\n","        if self.mode == \"train\":\n","            return self.train.shape[0]\n","        else:\n","            return self.test.shape[0]\n","\n","\n","    def __getitem__(self, index):\n","        if self.mode == \"train\":\n","            return np.float32(self.train[index]), np.float32(self.train_labels[index])\n","        else:\n","           return np.float32(self.test[index]), np.float32(self.test_labels[index])\n","        \n","\n","def get_loader(data_path, batch_size, mode='train'):\n","    \"\"\"Build and return data loader.\"\"\"\n","\n","    dataset = KDD99Loader(data_path, mode)\n","\n","    shuffle = False\n","    if mode == 'train':\n","        shuffle = True\n","\n","    data_loader = DataLoader(dataset=dataset,\n","                             batch_size=batch_size,\n","                             shuffle=shuffle)\n","    return data_loader"],"metadata":{"id":"uSLkzBK08gZE","executionInfo":{"status":"ok","timestamp":1659065174853,"user_tz":-540,"elapsed":924,"user":{"displayName":"아이덴티파이ai","userId":"09195867153538576050"}}},"execution_count":4,"outputs":[]},{"cell_type":"code","source":["import torch\n","import torch.nn as nn\n","import torch.nn.functional as F\n","import numpy as np\n","import torchvision\n","from torch.autograd import Variable\n","import itertools\n","\n","\n","class Cholesky(torch.autograd.Function):\n","    def forward(ctx, a):\n","        l = torch.cholesky(a, False)\n","        ctx.save_for_backward(l)\n","        return l\n","    def backward(ctx, grad_output):\n","        l, = ctx.saved_variables\n","        linv = l.inverse()\n","        inner = torch.tril(torch.mm(l.t(), grad_output)) * torch.tril(\n","            1.0 - Variable(l.data.new(l.size(1)).fill_(0.5).diag()))\n","        s = torch.mm(linv.t(), torch.mm(inner, linv))\n","        return s\n","    \n","class DaGMM(nn.Module):\n","    \"\"\"Residual Block.\"\"\"\n","    def __init__(self, n_gmm = 2, latent_dim=3):\n","        super(DaGMM, self).__init__()\n","\n","        layers = []\n","        layers += [nn.Linear(118,60)]\n","        layers += [nn.Tanh()]        \n","        layers += [nn.Linear(60,30)]\n","        layers += [nn.Tanh()]        \n","        layers += [nn.Linear(30,10)]\n","        layers += [nn.Tanh()]        \n","        layers += [nn.Linear(10,1)]\n","\n","        self.encoder = nn.Sequential(*layers)\n","\n","\n","        layers = []\n","        layers += [nn.Linear(1,10)]\n","        layers += [nn.Tanh()]        \n","        layers += [nn.Linear(10,30)]\n","        layers += [nn.Tanh()]        \n","        layers += [nn.Linear(30,60)]\n","        layers += [nn.Tanh()]        \n","        layers += [nn.Linear(60,118)]\n","\n","        self.decoder = nn.Sequential(*layers)\n","\n","        layers = []\n","        layers += [nn.Linear(latent_dim,10)]\n","        layers += [nn.Tanh()]        \n","        layers += [nn.Dropout(p=0.5)]        \n","        layers += [nn.Linear(10,n_gmm)]\n","        layers += [nn.Softmax(dim=1)]\n","\n","\n","        self.estimation = nn.Sequential(*layers)\n","\n","        self.register_buffer(\"phi\", torch.zeros(n_gmm))\n","        self.register_buffer(\"mu\", torch.zeros(n_gmm,latent_dim))\n","        self.register_buffer(\"cov\", torch.zeros(n_gmm,latent_dim,latent_dim))\n","\n","    def relative_euclidean_distance(self, a, b):\n","        return (a-b).norm(2, dim=1) / a.norm(2, dim=1)\n","\n","    def forward(self, x):\n","\n","        enc = self.encoder(x)\n","\n","        dec = self.decoder(enc)\n","\n","        rec_cosine = F.cosine_similarity(x, dec, dim=1)\n","        rec_euclidean = self.relative_euclidean_distance(x, dec)\n","\n","        z = torch.cat([enc, rec_euclidean.unsqueeze(-1), rec_cosine.unsqueeze(-1)], dim=1)\n","\n","        gamma = self.estimation(z)\n","\n","        return enc, dec, z, gamma\n","\n","    def compute_gmm_params(self, z, gamma):\n","        N = gamma.size(0)\n","        # K\n","        sum_gamma = torch.sum(gamma, dim=0)\n","\n","        # K\n","        phi = (sum_gamma / N)\n","\n","        self.phi = phi.data\n","\n"," \n","        # K x D\n","        mu = torch.sum(gamma.unsqueeze(-1) * z.unsqueeze(1), dim=0) / sum_gamma.unsqueeze(-1)\n","        self.mu = mu.data\n","        # z = N x D\n","        # mu = K x D\n","        # gamma N x K\n","\n","        # z_mu = N x K x D\n","        z_mu = (z.unsqueeze(1)- mu.unsqueeze(0))\n","\n","        # z_mu_outer = N x K x D x D\n","        z_mu_outer = z_mu.unsqueeze(-1) * z_mu.unsqueeze(-2)\n","\n","        # K x D x D\n","        cov = torch.sum(gamma.unsqueeze(-1).unsqueeze(-1) * z_mu_outer, dim = 0) / sum_gamma.unsqueeze(-1).unsqueeze(-1)\n","        self.cov = cov.data\n","\n","        return phi, mu, cov\n","        \n","    def compute_energy(self, z, phi=None, mu=None, cov=None, size_average=True):\n","        if phi is None:\n","            phi = to_var(self.phi)\n","        if mu is None:\n","            mu = to_var(self.mu)\n","        if cov is None:\n","            cov = to_var(self.cov)\n","\n","        k, D, _ = cov.size()\n","\n","        z_mu = (z.unsqueeze(1)- mu.unsqueeze(0))\n","\n","        cov_inverse = []\n","        det_cov = []\n","        cov_diag = 0\n","        eps = 1e-12\n","        for i in range(k):\n","            # K x D x D\n","            cov_k = cov[i] + to_var(torch.eye(D)*eps)\n","            cov_inverse.append(torch.inverse(cov_k).unsqueeze(0))\n","\n","            #det_cov.append(np.linalg.det(cov_k.data.cpu().numpy()* (2*np.pi)))\n","            det_cov.append((Cholesky.apply(cov_k.cpu() * (2*np.pi)).diag().prod()).unsqueeze(0))\n","            cov_diag = cov_diag + torch.sum(1 / cov_k.diag())\n","\n","        # K x D x D\n","        cov_inverse = torch.cat(cov_inverse, dim=0)\n","        # K\n","        det_cov = torch.cat(det_cov).cuda()\n","        #det_cov = to_var(torch.from_numpy(np.float32(np.array(det_cov))))\n","\n","        # N x K\n","        exp_term_tmp = -0.5 * torch.sum(torch.sum(z_mu.unsqueeze(-1) * cov_inverse.unsqueeze(0), dim=-2) * z_mu, dim=-1)\n","        # for stability (logsumexp)\n","        max_val = torch.max((exp_term_tmp).clamp(min=0), dim=1, keepdim=True)[0]\n","\n","        exp_term = torch.exp(exp_term_tmp - max_val)\n","\n","        # sample_energy = -max_val.squeeze() - torch.log(torch.sum(phi.unsqueeze(0) * exp_term / (det_cov).unsqueeze(0), dim = 1) + eps)\n","        sample_energy = -max_val.squeeze() - torch.log(torch.sum(phi.unsqueeze(0) * exp_term / (torch.sqrt(det_cov)).unsqueeze(0), dim = 1) + eps)\n","        # sample_energy = -max_val.squeeze() - torch.log(torch.sum(phi.unsqueeze(0) * exp_term / (torch.sqrt((2*np.pi)**D * det_cov)).unsqueeze(0), dim = 1) + eps)\n","\n","\n","        if size_average:\n","            sample_energy = torch.mean(sample_energy)\n","\n","        return sample_energy, cov_diag\n","\n","\n","    def loss_function(self, x, x_hat, z, gamma, lambda_energy, lambda_cov_diag):\n","\n","        recon_error = torch.mean((x - x_hat) ** 2)\n","\n","        phi, mu, cov = self.compute_gmm_params(z, gamma)\n","\n","        sample_energy, cov_diag = self.compute_energy(z, phi, mu, cov)\n","\n","        loss = recon_error + lambda_energy * sample_energy + lambda_cov_diag * cov_diag\n","\n","        return loss, sample_energy, recon_error, cov_diag"],"metadata":{"id":"MplRhuqf8CBe","executionInfo":{"status":"ok","timestamp":1659065175474,"user_tz":-540,"elapsed":632,"user":{"displayName":"아이덴티파이ai","userId":"09195867153538576050"}}},"execution_count":5,"outputs":[]},{"cell_type":"code","source":["import torch\n","import torch.nn as nn\n","import torch.nn.functional as F\n","import numpy as np\n","import os\n","import time\n","import datetime\n","from torch.autograd import grad\n","from torch.autograd import Variable\n","import matplotlib.pyplot as plt\n","import IPython\n","from tqdm import tqdm\n","\n","class Solver(object):\n","    DEFAULTS = {}   \n","    def __init__(self, data_loader, config):\n","        # Data loader\n","        self.__dict__.update(Solver.DEFAULTS, **config)\n","        self.data_loader = data_loader\n","\n","        # Build tensorboard if use\n","        self.build_model()\n","        # if self.use_tensorboard:\n","        #     self.build_tensorboard()\n","\n","        # Start with trained model\n","        if self.pretrained_model:\n","            self.load_pretrained_model()\n","\n","    def build_model(self):\n","        # Define model\n","        self.dagmm = DaGMM(self.gmm_k)\n","\n","        # Optimizers\n","        self.optimizer = torch.optim.Adam(self.dagmm.parameters(), lr=self.lr)\n","\n","        # Print networks\n","        self.print_network(self.dagmm, 'DaGMM')\n","\n","        if torch.cuda.is_available():\n","            self.dagmm.cuda()\n","\n","    def print_network(self, model, name):\n","        num_params = 0\n","        for p in model.parameters():\n","            num_params += p.numel()\n","        print(name)\n","        print(model)\n","        print(\"The number of parameters: {}\".format(num_params))\n","\n","    def load_pretrained_model(self):\n","        self.dagmm.load_state_dict(torch.load(os.path.join(\n","            self.model_save_path, '{}_dagmm.pth'.format(self.pretrained_model))))\n","\n","        print(\"phi\", self.dagmm.phi,\"mu\",self.dagmm.mu, \"cov\",self.dagmm.cov)\n","\n","        print('loaded trained models (step: {})..!'.format(self.pretrained_model))\n","\n","    # def build_tensorboard(self):\n","    #     from logger import Logger\n","    #     self.logger = Logger(self.log_path)\n","\n","    def reset_grad(self):\n","        self.dagmm.zero_grad()\n","\n","    def to_var(self, x, volatile=False):\n","        if torch.cuda.is_available():\n","            x = x.cuda()\n","        return Variable(x, volatile=volatile)\n","\n","    def train(self):\n","        iters_per_epoch = len(self.data_loader)\n","\n","        # Start with trained model if exists\n","        if self.pretrained_model:\n","            start = int(self.pretrained_model.split('_')[0])\n","        else:\n","            start = 0\n","\n","        # Start training\n","        iter_ctr = 0\n","        start_time = time.time()\n","\n","\n","\n","        self.ap_global_train = np.array([0,0,0])\n","        for e in range(start, self.num_epochs):\n","            for i, (input_data, labels) in enumerate(tqdm(self.data_loader)):\n","                iter_ctr += 1\n","                start = time.time()\n","\n","                input_data = self.to_var(input_data)\n","\n","                total_loss,sample_energy, recon_error, cov_diag = self.dagmm_step(input_data)\n","                # Logging\n","                loss = {}\n","                loss['total_loss'] = total_loss.data.item()\n","                loss['sample_energy'] = sample_energy.item()\n","                loss['recon_error'] = recon_error.item()\n","                loss['cov_diag'] = cov_diag.item()\n","\n","\n","\n","                # Print out log info\n","                # if (i+1) % self.log_step == 0:\n","                #     elapsed = time.time() - start_time\n","                #     total_time = ((self.num_epochs*iters_per_epoch)-(e*iters_per_epoch+i)) * elapsed/(e*iters_per_epoch+i+1)\n","                #     epoch_time = (iters_per_epoch-i)* elapsed/(e*iters_per_epoch+i+1)\n","                    \n","                #     epoch_time = str(datetime.timedelta(seconds=epoch_time))\n","                #     total_time = str(datetime.timedelta(seconds=total_time))\n","                #     elapsed = str(datetime.timedelta(seconds=elapsed))\n","\n","                #     lr_tmp = []\n","                #     for param_group in self.optimizer.param_groups:\n","                #         lr_tmp.append(param_group['lr'])\n","                #     tmplr = np.squeeze(np.array(lr_tmp))\n","\n","                #     log = \"Elapsed {}/{} -- {} , Epoch [{}/{}], Iter [{}/{}], lr {}\".format(\n","                #         elapsed,epoch_time,total_time, e+1, self.num_epochs, i+1, iters_per_epoch, tmplr)\n","\n","                #     for tag, value in loss.items():\n","                #         log += \", {}: {:.4f}\".format(tag, value)\n","\n","                #     IPython.display.clear_output()\n","                #     print(log)\n","\n","                    # if self.use_tensorboard:\n","                    #     for tag, value in loss.items():\n","                    #         self.logger.scalar_summary(tag, value, e * iters_per_epoch + i + 1)\n","                    # else:\n","                    #     plt_ctr = 1\n","                    #     if not hasattr(self,\"loss_logs\"):\n","                    #         self.loss_logs = {}\n","                    #         for loss_key in loss:\n","                    #             self.loss_logs[loss_key] = [loss[loss_key]]\n","                    #             plt.subplot(2,2,plt_ctr)\n","                    #             plt.plot(np.array(self.loss_logs[loss_key]), label=loss_key)\n","                    #             plt.legend()\n","                    #             plt_ctr += 1\n","                    #     else:\n","                    #         for loss_key in loss:\n","                    #             self.loss_logs[loss_key].append(loss[loss_key])\n","                    #             plt.subplot(2,2,plt_ctr)\n","                    #             plt.plot(np.array(self.loss_logs[loss_key]), label=loss_key)\n","                    #             plt.legend()\n","                    #             plt_ctr += 1\n","\n","                    #     plt.show()\n","\n","                print(\"phi\", self.dagmm.phi,\"mu\",self.dagmm.mu, \"cov\",self.dagmm.cov)\n","                # Save model checkpoints\n","                if (i+1) % self.model_save_step == 0:\n","                    torch.save(self.dagmm.state_dict(),\n","                        os.path.join(self.model_save_path, '{}_{}_dagmm.pth'.format(e+1, i+1)))\n","\n","    def dagmm_step(self, input_data):\n","        self.dagmm.train()\n","        enc, dec, z, gamma = self.dagmm(input_data)\n","\n","        total_loss, sample_energy, recon_error, cov_diag = self.dagmm.loss_function(input_data, dec, z, gamma, self.lambda_energy, self.lambda_cov_diag)\n","\n","        self.reset_grad()\n","        total_loss.backward()\n","\n","        torch.nn.utils.clip_grad_norm_(self.dagmm.parameters(), 5)\n","        self.optimizer.step()\n","\n","        return total_loss,sample_energy, recon_error, cov_diag\n","\n","    def test(self):\n","        print(\"======================TEST MODE======================\")\n","        self.dagmm.eval()\n","        self.data_loader.dataset.mode=\"train\"\n","\n","        N = 0\n","        mu_sum = 0\n","        cov_sum = 0\n","        gamma_sum = 0\n","\n","        for it, (input_data, labels) in enumerate(self.data_loader):\n","            input_data = self.to_var(input_data)\n","            enc, dec, z, gamma = self.dagmm(input_data)\n","            phi, mu, cov = self.dagmm.compute_gmm_params(z, gamma)\n","            \n","            batch_gamma_sum = torch.sum(gamma, dim=0)\n","            \n","            gamma_sum += batch_gamma_sum\n","            mu_sum += mu * batch_gamma_sum.unsqueeze(-1) # keep sums of the numerator only\n","            cov_sum += cov * batch_gamma_sum.unsqueeze(-1).unsqueeze(-1) # keep sums of the numerator only\n","            \n","            N += input_data.size(0)\n","            \n","        train_phi = gamma_sum / N\n","        train_mu = mu_sum / gamma_sum.unsqueeze(-1)\n","        train_cov = cov_sum / gamma_sum.unsqueeze(-1).unsqueeze(-1)\n","\n","        print(\"N:\",N)\n","        print(\"phi :\\n\",train_phi)\n","        print(\"mu :\\n\",train_mu)\n","        print(\"cov :\\n\",train_cov)\n","\n","        train_energy = []\n","        train_labels = []\n","        train_z = []\n","        for it, (input_data, labels) in enumerate(self.data_loader):\n","            input_data = self.to_var(input_data)\n","            enc, dec, z, gamma = self.dagmm(input_data)\n","            sample_energy, cov_diag = self.dagmm.compute_energy(z, phi=train_phi, mu=train_mu, cov=train_cov, size_average=False)\n","            \n","            train_energy.append(sample_energy.data.cpu().numpy())\n","            train_z.append(z.data.cpu().numpy())\n","            train_labels.append(labels.numpy())\n","\n","\n","        train_energy = np.concatenate(train_energy,axis=0)\n","        train_z = np.concatenate(train_z,axis=0)\n","        train_labels = np.concatenate(train_labels,axis=0)\n","\n","\n","        self.data_loader.dataset.mode=\"test\"\n","        test_energy = []\n","        test_labels = []\n","        test_z = []\n","        for it, (input_data, labels) in enumerate(self.data_loader):\n","            input_data = self.to_var(input_data)\n","            enc, dec, z, gamma = self.dagmm(input_data)\n","            sample_energy, cov_diag = self.dagmm.compute_energy(z, size_average=False)\n","            test_energy.append(sample_energy.data.cpu().numpy())\n","            test_z.append(z.data.cpu().numpy())\n","            test_labels.append(labels.numpy())\n","\n","\n","        test_energy = np.concatenate(test_energy,axis=0)\n","        test_z = np.concatenate(test_z,axis=0)\n","        test_labels = np.concatenate(test_labels,axis=0)\n","\n","        combined_energy = np.concatenate([train_energy, test_energy], axis=0)\n","        combined_labels = np.concatenate([train_labels, test_labels], axis=0)\n","\n","        thresh = np.percentile(combined_energy, 100 - 20)\n","        print(\"Threshold :\", thresh)\n","\n","        pred = (test_energy > thresh).astype(int)\n","        gt = test_labels.astype(int)\n","\n","        from sklearn.metrics import precision_recall_fscore_support as prf, accuracy_score\n","\n","        accuracy = accuracy_score(gt,pred)\n","        precision, recall, f_score, support = prf(gt, pred, average='binary')\n","\n","        print(\"Accuracy : {:0.4f}, Precision : {:0.4f}, Recall : {:0.4f}, F-score : {:0.4f}\".format(accuracy, precision, recall, f_score))\n","        \n","        return accuracy, precision, recall, f_score"],"metadata":{"id":"0hkmHEtj8Pce","executionInfo":{"status":"ok","timestamp":1659065175854,"user_tz":-540,"elapsed":390,"user":{"displayName":"아이덴티파이ai","userId":"09195867153538576050"}}},"execution_count":6,"outputs":[]},{"cell_type":"code","source":["import os\n","import argparse\n","from torch.backends import cudnn\n","\n","def str2bool(v):\n","    return v.lower() in ('true')\n","\n","def main(config):\n","    # For fast training\n","    cudnn.benchmark = True\n","\n","    # Create directories if not exist\n","    mkdir(config.log_path)\n","    mkdir(config.model_save_path)\n","\n","    data_loader = get_loader(config.data_path, batch_size=config.batch_size, mode=config.mode)\n","    \n","    # Solver\n","    solver = Solver(data_loader, vars(config))\n","\n","    if config.mode == 'train':\n","        solver.train()\n","    elif config.mode == 'test':\n","        solver.test()\n","\n","    return solver\n","    \n","if __name__ == '__main__':\n","    # parser = argparse.ArgumentParser()\n","\n","    # # Model hyper-parameters\n","    # parser.add_argument('--lr', type=float, default=1e-4)\n","\n","\n","    # # Training settings\n","    # parser.add_argument('--num_epochs', type=int, default=200)\n","    # parser.add_argument('--batch_size', type=int, default=1024)\n","    # parser.add_argument('--gmm_k', type=int, default=4)\n","    # parser.add_argument('--lambda_energy', type=float, default=0.1)\n","    # parser.add_argument('--lambda_cov_diag', type=float, default=0.005)\n","    # parser.add_argument('--pretrained_model', type=str, default=None)\n","\n","    # # Misc\n","    # parser.add_argument('--mode', type=str, default='train', choices=['train', 'test'])\n","    # parser.add_argument('--use_tensorboard', type=str2bool, default=None)\n","\n","    # # Path\n","    # parser.add_argument('--data_path', type=str, default='kdd_cup.npz')\n","    # parser.add_argument('--log_path', type=str, default='./dagmm/logs')\n","    # parser.add_argument('--model_save_path', type=str, default='./dagmm/models')\n","\n","    # # Step size\n","    # parser.add_argument('--log_step', type=int, default=10)\n","    # parser.add_argument('--sample_step', type=int, default=194)\n","    # parser.add_argument('--model_save_step', type=int, default=194)\n","\n","    # config = parser.parse_args()\n","    # args = vars(config)\n","\n","    import easydict\n","    args = easydict.EasyDict({\n","        \"num_epochs\" : 1,\n","        \"batch_size\" : 1024,\n","        \"gmm_k\" : 4,\n","        \"lambda_energy\" : 0.1,\n","        \"lambda_cov_diag\" : 0.005,\n","        # \"pretrained_model\" : '',\n","        \"pretrained_model\" : None,\n","        \"mode\" : 'train',\n","        # \"mode\" : \"test\",\n","        \"data_path\" : \"./kdd_cup.npz\",   \n","        \"use_tensorboard\" : False,\n","        \"log_path\" : './logs',\n","        \"model_save_path\" : './models',\n","        \"log_step\" : 194//4,\n","        \"sample_step\" : 194,\n","        \"model_save_step\" : 194,\n","        \"lr\" : 1e-4,\n","        \"wd\" : None\n","    })\n","    config = args\n"," \n","    print('------------ Options -------------')\n","    for k, v in sorted(args.items()):\n","        print('%s: %s' % (str(k), str(v)))\n","    print('-------------- End ----------------')\n","\n","    solver = main(config)\n","    solver.test()"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"O0vLb9Gp7pjL","executionInfo":{"status":"ok","timestamp":1659065457905,"user_tz":-540,"elapsed":15083,"user":{"displayName":"아이덴티파이ai","userId":"09195867153538576050"}},"outputId":"0a87a2f6-1f70-41be-ed1d-0f1b4286ea7f"},"execution_count":11,"outputs":[{"output_type":"stream","name":"stdout","text":["------------ Options -------------\n","batch_size: 1024\n","data_path: ./kdd_cup.npz\n","gmm_k: 4\n","lambda_cov_diag: 0.005\n","lambda_energy: 0.1\n","log_path: ./logs\n","log_step: 48\n","lr: 0.0001\n","mode: train\n","model_save_path: ./models\n","model_save_step: 194\n","num_epochs: 1\n","pretrained_model: None\n","sample_step: 194\n","use_tensorboard: False\n","wd: None\n","-------------- End ----------------\n","DaGMM\n","DaGMM(\n","  (encoder): Sequential(\n","    (0): Linear(in_features=118, out_features=60, bias=True)\n","    (1): Tanh()\n","    (2): Linear(in_features=60, out_features=30, bias=True)\n","    (3): Tanh()\n","    (4): Linear(in_features=30, out_features=10, bias=True)\n","    (5): Tanh()\n","    (6): Linear(in_features=10, out_features=1, bias=True)\n","  )\n","  (decoder): Sequential(\n","    (0): Linear(in_features=1, out_features=10, bias=True)\n","    (1): Tanh()\n","    (2): Linear(in_features=10, out_features=30, bias=True)\n","    (3): Tanh()\n","    (4): Linear(in_features=30, out_features=60, bias=True)\n","    (5): Tanh()\n","    (6): Linear(in_features=60, out_features=118, bias=True)\n","  )\n","  (estimation): Sequential(\n","    (0): Linear(in_features=3, out_features=10, bias=True)\n","    (1): Tanh()\n","    (2): Dropout(p=0.5, inplace=False)\n","    (3): Linear(in_features=10, out_features=4, bias=True)\n","    (4): Softmax(dim=1)\n","  )\n",")\n","The number of parameters: 18783\n"]},{"output_type":"stream","name":"stderr","text":["  0%|          | 0/194 [00:00<?, ?it/s]/usr/local/lib/python3.7/dist-packages/ipykernel_launcher.py:16: DeprecationWarning: 'saved_variables' is deprecated; use 'saved_tensors'\n","  app.launch_new_instance()\n","  2%|▏         | 4/194 [00:00<00:05, 33.86it/s]"]},{"output_type":"stream","name":"stdout","text":["phi tensor([0.3116, 0.3179, 0.1716, 0.1989], device='cuda:0') mu tensor([[0.3185, 1.0420, 0.1009],\n","        [0.3187, 1.0418, 0.1012],\n","        [0.3186, 1.0420, 0.1008],\n","        [0.3186, 1.0419, 0.1008]], device='cuda:0') cov tensor([[[ 0.0009, -0.0006,  0.0011],\n","         [-0.0006,  0.0005, -0.0009],\n","         [ 0.0011, -0.0009,  0.0017]],\n","\n","        [[ 0.0009, -0.0006,  0.0010],\n","         [-0.0006,  0.0005, -0.0009],\n","         [ 0.0010, -0.0009,  0.0017]],\n","\n","        [[ 0.0009, -0.0006,  0.0011],\n","         [-0.0006,  0.0005, -0.0009],\n","         [ 0.0011, -0.0009,  0.0017]],\n","\n","        [[ 0.0009, -0.0006,  0.0011],\n","         [-0.0006,  0.0005, -0.0009],\n","         [ 0.0011, -0.0009,  0.0017]]], device='cuda:0')\n","phi tensor([0.3132, 0.3196, 0.1706, 0.1966], device='cuda:0') mu tensor([[0.3190, 1.0437, 0.0991],\n","        [0.3193, 1.0435, 0.0996],\n","        [0.3194, 1.0433, 0.0999],\n","        [0.3192, 1.0435, 0.0995]], device='cuda:0') cov tensor([[[ 0.0010, -0.0007,  0.0013],\n","         [-0.0007,  0.0006, -0.0011],\n","         [ 0.0013, -0.0011,  0.0021]],\n","\n","        [[ 0.0010, -0.0007,  0.0013],\n","         [-0.0007,  0.0006, -0.0011],\n","         [ 0.0013, -0.0011,  0.0021]],\n","\n","        [[ 0.0010, -0.0007,  0.0013],\n","         [-0.0007,  0.0006, -0.0011],\n","         [ 0.0013, -0.0011,  0.0021]],\n","\n","        [[ 0.0010, -0.0007,  0.0013],\n","         [-0.0007,  0.0006, -0.0011],\n","         [ 0.0013, -0.0011,  0.0021]]], device='cuda:0')\n","phi tensor([0.3137, 0.3216, 0.1712, 0.1936], device='cuda:0') mu tensor([[0.3224, 1.0432, 0.1014],\n","        [0.3227, 1.0430, 0.1018],\n","        [0.3225, 1.0430, 0.1018],\n","        [0.3226, 1.0430, 0.1019]], device='cuda:0') cov tensor([[[ 0.0011, -0.0008,  0.0014],\n","         [-0.0008,  0.0006, -0.0012],\n","         [ 0.0014, -0.0012,  0.0023]],\n","\n","        [[ 0.0011, -0.0007,  0.0014],\n","         [-0.0007,  0.0006, -0.0012],\n","         [ 0.0014, -0.0012,  0.0023]],\n","\n","        [[ 0.0011, -0.0007,  0.0014],\n","         [-0.0007,  0.0006, -0.0012],\n","         [ 0.0014, -0.0012,  0.0023]],\n","\n","        [[ 0.0011, -0.0008,  0.0014],\n","         [-0.0008,  0.0006, -0.0012],\n","         [ 0.0014, -0.0012,  0.0023]]], device='cuda:0')\n","phi tensor([0.3118, 0.3190, 0.1714, 0.1978], device='cuda:0') mu tensor([[0.3221, 1.0449, 0.1001],\n","        [0.3223, 1.0446, 0.1008],\n","        [0.3226, 1.0444, 0.1010],\n","        [0.3225, 1.0445, 0.1009]], device='cuda:0') cov tensor([[[ 0.0012, -0.0008,  0.0016],\n","         [-0.0008,  0.0008, -0.0014],\n","         [ 0.0016, -0.0014,  0.0028]],\n","\n","        [[ 0.0012, -0.0008,  0.0016],\n","         [-0.0008,  0.0007, -0.0014],\n","         [ 0.0016, -0.0014,  0.0028]],\n","\n","        [[ 0.0012, -0.0008,  0.0016],\n","         [-0.0008,  0.0007, -0.0014],\n","         [ 0.0016, -0.0014,  0.0027]],\n","\n","        [[ 0.0012, -0.0008,  0.0016],\n","         [-0.0008,  0.0007, -0.0014],\n","         [ 0.0016, -0.0014,  0.0028]]], device='cuda:0')\n","phi tensor([0.3141, 0.3228, 0.1696, 0.1934], device='cuda:0') mu tensor([[0.3222, 1.0457, 0.1002],\n","        [0.3226, 1.0454, 0.1009],\n","        [0.3224, 1.0454, 0.1008],\n","        [0.3219, 1.0459, 0.0999]], device='cuda:0') cov tensor([[[ 0.0014, -0.0010,  0.0019],\n","         [-0.0010,  0.0008, -0.0016],\n","         [ 0.0019, -0.0016,  0.0031]],\n","\n","        [[ 0.0014, -0.0010,  0.0018],\n","         [-0.0010,  0.0008, -0.0016],\n","         [ 0.0018, -0.0016,  0.0031]],\n","\n","        [[ 0.0014, -0.0010,  0.0018],\n","         [-0.0010,  0.0008, -0.0016],\n","         [ 0.0018, -0.0016,  0.0031]],\n","\n","        [[ 0.0014, -0.0010,  0.0019],\n","         [-0.0010,  0.0008, -0.0016],\n","         [ 0.0019, -0.0016,  0.0031]]], device='cuda:0')\n","phi tensor([0.3132, 0.3213, 0.1703, 0.1951], device='cuda:0') mu tensor([[0.3259, 1.0446, 0.1032],\n","        [0.3265, 1.0441, 0.1042],\n","        [0.3264, 1.0441, 0.1041],\n","        [0.3261, 1.0442, 0.1038]], device='cuda:0') cov tensor([[[ 0.0015, -0.0010,  0.0020],\n","         [-0.0010,  0.0008, -0.0016],\n","         [ 0.0020, -0.0016,  0.0032]],\n","\n","        [[ 0.0014, -0.0010,  0.0020],\n","         [-0.0010,  0.0008, -0.0016],\n","         [ 0.0020, -0.0016,  0.0032]],\n","\n","        [[ 0.0014, -0.0010,  0.0020],\n","         [-0.0010,  0.0008, -0.0016],\n","         [ 0.0020, -0.0016,  0.0032]],\n","\n","        [[ 0.0014, -0.0010,  0.0020],\n","         [-0.0010,  0.0008, -0.0016],\n","         [ 0.0020, -0.0016,  0.0032]]], device='cuda:0')\n"]},{"output_type":"stream","name":"stderr","text":["\r  4%|▍         | 8/194 [00:00<00:05, 35.63it/s]"]},{"output_type":"stream","name":"stdout","text":["phi tensor([0.3142, 0.3203, 0.1717, 0.1938], device='cuda:0') mu tensor([[0.3277, 1.0453, 0.1036],\n","        [0.3282, 1.0448, 0.1045],\n","        [0.3281, 1.0451, 0.1042],\n","        [0.3281, 1.0451, 0.1042]], device='cuda:0') cov tensor([[[ 0.0016, -0.0011,  0.0021],\n","         [-0.0011,  0.0010, -0.0018],\n","         [ 0.0021, -0.0018,  0.0036]],\n","\n","        [[ 0.0015, -0.0011,  0.0021],\n","         [-0.0011,  0.0009, -0.0018],\n","         [ 0.0021, -0.0018,  0.0036]],\n","\n","        [[ 0.0015, -0.0011,  0.0021],\n","         [-0.0011,  0.0009, -0.0018],\n","         [ 0.0021, -0.0018,  0.0036]],\n","\n","        [[ 0.0015, -0.0011,  0.0021],\n","         [-0.0011,  0.0009, -0.0018],\n","         [ 0.0021, -0.0018,  0.0036]]], device='cuda:0')\n","phi tensor([0.3127, 0.3201, 0.1705, 0.1967], device='cuda:0') mu tensor([[0.3295, 1.0448, 0.1059],\n","        [0.3300, 1.0444, 0.1067],\n","        [0.3299, 1.0446, 0.1064],\n","        [0.3290, 1.0453, 0.1049]], device='cuda:0') cov tensor([[[ 0.0017, -0.0012,  0.0023],\n","         [-0.0012,  0.0010, -0.0019],\n","         [ 0.0023, -0.0019,  0.0039]],\n","\n","        [[ 0.0017, -0.0012,  0.0023],\n","         [-0.0012,  0.0010, -0.0019],\n","         [ 0.0023, -0.0019,  0.0038]],\n","\n","        [[ 0.0017, -0.0012,  0.0023],\n","         [-0.0012,  0.0010, -0.0019],\n","         [ 0.0023, -0.0019,  0.0038]],\n","\n","        [[ 0.0017, -0.0012,  0.0024],\n","         [-0.0012,  0.0010, -0.0020],\n","         [ 0.0024, -0.0020,  0.0039]]], device='cuda:0')\n"]},{"output_type":"stream","name":"stderr","text":["\r  6%|▌         | 12/194 [00:00<00:04, 37.22it/s]"]},{"output_type":"stream","name":"stdout","text":["phi tensor([0.3121, 0.3195, 0.1712, 0.1972], device='cuda:0') mu tensor([[0.3307, 1.0451, 0.1067],\n","        [0.3313, 1.0445, 0.1079],\n","        [0.3312, 1.0447, 0.1075],\n","        [0.3306, 1.0452, 0.1065]], device='cuda:0') cov tensor([[[ 0.0018, -0.0013,  0.0026],\n","         [-0.0013,  0.0011, -0.0021],\n","         [ 0.0026, -0.0021,  0.0042]],\n","\n","        [[ 0.0018, -0.0013,  0.0025],\n","         [-0.0013,  0.0011, -0.0021],\n","         [ 0.0025, -0.0021,  0.0042]],\n","\n","        [[ 0.0018, -0.0013,  0.0026],\n","         [-0.0013,  0.0011, -0.0021],\n","         [ 0.0026, -0.0021,  0.0042]],\n","\n","        [[ 0.0018, -0.0013,  0.0026],\n","         [-0.0013,  0.0011, -0.0021],\n","         [ 0.0026, -0.0021,  0.0042]]], device='cuda:0')\n","phi tensor([0.3114, 0.3203, 0.1713, 0.1970], device='cuda:0') mu tensor([[0.3327, 1.0450, 0.1081],\n","        [0.3331, 1.0447, 0.1087],\n","        [0.3333, 1.0446, 0.1089],\n","        [0.3332, 1.0448, 0.1085]], device='cuda:0') cov tensor([[[ 0.0020, -0.0014,  0.0028],\n","         [-0.0014,  0.0012, -0.0023],\n","         [ 0.0028, -0.0023,  0.0045]],\n","\n","        [[ 0.0019, -0.0014,  0.0027],\n","         [-0.0014,  0.0011, -0.0022],\n","         [ 0.0027, -0.0022,  0.0045]],\n","\n","        [[ 0.0019, -0.0014,  0.0027],\n","         [-0.0014,  0.0011, -0.0022],\n","         [ 0.0027, -0.0022,  0.0044]],\n","\n","        [[ 0.0019, -0.0014,  0.0027],\n","         [-0.0014,  0.0011, -0.0022],\n","         [ 0.0027, -0.0022,  0.0045]]], device='cuda:0')\n","phi tensor([0.3119, 0.3205, 0.1718, 0.1958], device='cuda:0') mu tensor([[0.3335, 1.0454, 0.1083],\n","        [0.3343, 1.0447, 0.1097],\n","        [0.3342, 1.0448, 0.1094],\n","        [0.3335, 1.0454, 0.1082]], device='cuda:0') cov tensor([[[ 0.0021, -0.0015,  0.0031],\n","         [-0.0015,  0.0013, -0.0025],\n","         [ 0.0031, -0.0025,  0.0050]],\n","\n","        [[ 0.0021, -0.0015,  0.0030],\n","         [-0.0015,  0.0012, -0.0024],\n","         [ 0.0030, -0.0024,  0.0049]],\n","\n","        [[ 0.0021, -0.0015,  0.0030],\n","         [-0.0015,  0.0012, -0.0024],\n","         [ 0.0030, -0.0024,  0.0049]],\n","\n","        [[ 0.0021, -0.0015,  0.0031],\n","         [-0.0015,  0.0013, -0.0025],\n","         [ 0.0031, -0.0025,  0.0050]]], device='cuda:0')\n","phi tensor([0.3118, 0.3199, 0.1717, 0.1966], device='cuda:0') mu tensor([[0.3379, 1.0435, 0.1136],\n","        [0.3384, 1.0430, 0.1146],\n","        [0.3377, 1.0436, 0.1134],\n","        [0.3374, 1.0438, 0.1129]], device='cuda:0') cov tensor([[[ 0.0022, -0.0016,  0.0031],\n","         [-0.0016,  0.0013, -0.0025],\n","         [ 0.0031, -0.0025,  0.0050]],\n","\n","        [[ 0.0021, -0.0015,  0.0030],\n","         [-0.0015,  0.0012, -0.0024],\n","         [ 0.0030, -0.0024,  0.0049]],\n","\n","        [[ 0.0022, -0.0016,  0.0031],\n","         [-0.0016,  0.0013, -0.0025],\n","         [ 0.0031, -0.0025,  0.0050]],\n","\n","        [[ 0.0022, -0.0016,  0.0031],\n","         [-0.0016,  0.0013, -0.0025],\n","         [ 0.0031, -0.0025,  0.0050]]], device='cuda:0')\n","phi tensor([0.3116, 0.3189, 0.1710, 0.1984], device='cuda:0') mu tensor([[0.3383, 1.0462, 0.1093],\n","        [0.3391, 1.0455, 0.1107],\n","        [0.3400, 1.0450, 0.1117],\n","        [0.3396, 1.0453, 0.1112]], device='cuda:0') cov tensor([[[ 0.0024, -0.0018,  0.0036],\n","         [-0.0018,  0.0016, -0.0030],\n","         [ 0.0036, -0.0030,  0.0060]],\n","\n","        [[ 0.0024, -0.0018,  0.0035],\n","         [-0.0018,  0.0015, -0.0030],\n","         [ 0.0035, -0.0030,  0.0059]],\n","\n","        [[ 0.0023, -0.0017,  0.0034],\n","         [-0.0017,  0.0015, -0.0029],\n","         [ 0.0034, -0.0029,  0.0058]],\n","\n","        [[ 0.0023, -0.0017,  0.0035],\n","         [-0.0017,  0.0015, -0.0029],\n","         [ 0.0035, -0.0029,  0.0058]]], device='cuda:0')\n","phi tensor([0.3115, 0.3209, 0.1704, 0.1972], device='cuda:0') mu tensor([[0.3412, 1.0438, 0.1145],\n","        [0.3420, 1.0432, 0.1158],\n","        [0.3422, 1.0432, 0.1158],\n","        [0.3421, 1.0433, 0.1157]], device='cuda:0') cov tensor([[[ 0.0025, -0.0019,  0.0037],\n","         [-0.0019,  0.0015, -0.0030],\n","         [ 0.0037, -0.0030,  0.0059]],\n","\n","        [[ 0.0025, -0.0018,  0.0036],\n","         [-0.0018,  0.0015, -0.0029],\n","         [ 0.0036, -0.0029,  0.0058]],\n","\n","        [[ 0.0025, -0.0018,  0.0036],\n","         [-0.0018,  0.0015, -0.0029],\n","         [ 0.0036, -0.0029,  0.0058]],\n","\n","        [[ 0.0025, -0.0018,  0.0036],\n","         [-0.0018,  0.0015, -0.0029],\n","         [ 0.0036, -0.0029,  0.0058]]], device='cuda:0')\n"]},{"output_type":"stream","name":"stderr","text":["\r  8%|▊         | 16/194 [00:00<00:04, 36.91it/s]"]},{"output_type":"stream","name":"stdout","text":["phi tensor([0.3106, 0.3193, 0.1716, 0.1985], device='cuda:0') mu tensor([[0.3441, 1.0430, 0.1180],\n","        [0.3451, 1.0422, 0.1197],\n","        [0.3449, 1.0426, 0.1189],\n","        [0.3446, 1.0429, 0.1182]], device='cuda:0') cov tensor([[[ 0.0025, -0.0019,  0.0037],\n","         [-0.0019,  0.0016, -0.0031],\n","         [ 0.0037, -0.0031,  0.0061]],\n","\n","        [[ 0.0025, -0.0018,  0.0036],\n","         [-0.0018,  0.0015, -0.0030],\n","         [ 0.0036, -0.0030,  0.0059]],\n","\n","        [[ 0.0025, -0.0018,  0.0036],\n","         [-0.0018,  0.0015, -0.0030],\n","         [ 0.0036, -0.0030,  0.0060]],\n","\n","        [[ 0.0025, -0.0018,  0.0036],\n","         [-0.0018,  0.0016, -0.0031],\n","         [ 0.0036, -0.0031,  0.0061]]], device='cuda:0')\n","phi tensor([0.3107, 0.3209, 0.1717, 0.1967], device='cuda:0') mu tensor([[0.3427, 1.0449, 0.1146],\n","        [0.3435, 1.0443, 0.1159],\n","        [0.3439, 1.0440, 0.1164],\n","        [0.3435, 1.0444, 0.1156]], device='cuda:0') cov tensor([[[ 0.0030, -0.0022,  0.0043],\n","         [-0.0022,  0.0017, -0.0035],\n","         [ 0.0043, -0.0035,  0.0070]],\n","\n","        [[ 0.0029, -0.0021,  0.0043],\n","         [-0.0021,  0.0017, -0.0034],\n","         [ 0.0043, -0.0034,  0.0069]],\n","\n","        [[ 0.0029, -0.0021,  0.0042],\n","         [-0.0021,  0.0017, -0.0034],\n","         [ 0.0042, -0.0034,  0.0068]],\n","\n","        [[ 0.0029, -0.0021,  0.0043],\n","         [-0.0021,  0.0017, -0.0034],\n","         [ 0.0043, -0.0034,  0.0069]]], device='cuda:0')\n"]},{"output_type":"stream","name":"stderr","text":["\r 10%|█         | 20/194 [00:00<00:04, 37.37it/s]"]},{"output_type":"stream","name":"stdout","text":["phi tensor([0.3106, 0.3197, 0.1727, 0.1971], device='cuda:0') mu tensor([[0.3449, 1.0451, 0.1154],\n","        [0.3460, 1.0442, 0.1172],\n","        [0.3458, 1.0444, 0.1168],\n","        [0.3447, 1.0454, 0.1149]], device='cuda:0') cov tensor([[[ 0.0031, -0.0023,  0.0046],\n","         [-0.0023,  0.0019, -0.0038],\n","         [ 0.0046, -0.0038,  0.0076]],\n","\n","        [[ 0.0030, -0.0022,  0.0045],\n","         [-0.0022,  0.0019, -0.0037],\n","         [ 0.0045, -0.0037,  0.0074]],\n","\n","        [[ 0.0030, -0.0022,  0.0045],\n","         [-0.0022,  0.0019, -0.0037],\n","         [ 0.0045, -0.0037,  0.0074]],\n","\n","        [[ 0.0031, -0.0023,  0.0046],\n","         [-0.0023,  0.0019, -0.0038],\n","         [ 0.0046, -0.0038,  0.0076]]], device='cuda:0')\n","phi tensor([0.3121, 0.3207, 0.1715, 0.1957], device='cuda:0') mu tensor([[0.3471, 1.0434, 0.1198],\n","        [0.3480, 1.0426, 0.1213],\n","        [0.3486, 1.0423, 0.1220],\n","        [0.3479, 1.0427, 0.1212]], device='cuda:0') cov tensor([[[ 0.0033, -0.0024,  0.0048],\n","         [-0.0024,  0.0019, -0.0038],\n","         [ 0.0048, -0.0038,  0.0077]],\n","\n","        [[ 0.0032, -0.0023,  0.0047],\n","         [-0.0023,  0.0019, -0.0037],\n","         [ 0.0047, -0.0037,  0.0075]],\n","\n","        [[ 0.0031, -0.0023,  0.0046],\n","         [-0.0023,  0.0018, -0.0037],\n","         [ 0.0046, -0.0037,  0.0074]],\n","\n","        [[ 0.0032, -0.0023,  0.0047],\n","         [-0.0023,  0.0019, -0.0037],\n","         [ 0.0047, -0.0037,  0.0075]]], device='cuda:0')\n","phi tensor([0.3101, 0.3204, 0.1716, 0.1979], device='cuda:0') mu tensor([[0.3470, 1.0444, 0.1188],\n","        [0.3480, 1.0434, 0.1208],\n","        [0.3480, 1.0435, 0.1205],\n","        [0.3481, 1.0435, 0.1207]], device='cuda:0') cov tensor([[[ 0.0035, -0.0026,  0.0051],\n","         [-0.0026,  0.0021, -0.0042],\n","         [ 0.0051, -0.0042,  0.0084]],\n","\n","        [[ 0.0035, -0.0025,  0.0050],\n","         [-0.0025,  0.0020, -0.0040],\n","         [ 0.0050, -0.0040,  0.0082]],\n","\n","        [[ 0.0035, -0.0025,  0.0050],\n","         [-0.0025,  0.0020, -0.0041],\n","         [ 0.0050, -0.0041,  0.0082]],\n","\n","        [[ 0.0035, -0.0025,  0.0050],\n","         [-0.0025,  0.0020, -0.0040],\n","         [ 0.0050, -0.0040,  0.0082]]], device='cuda:0')\n","phi tensor([0.3104, 0.3211, 0.1716, 0.1969], device='cuda:0') mu tensor([[0.3494, 1.0435, 0.1205],\n","        [0.3506, 1.0425, 0.1226],\n","        [0.3514, 1.0420, 0.1235],\n","        [0.3505, 1.0427, 0.1222]], device='cuda:0') cov tensor([[[ 0.0037, -0.0027,  0.0055],\n","         [-0.0027,  0.0022, -0.0044],\n","         [ 0.0055, -0.0044,  0.0089]],\n","\n","        [[ 0.0037, -0.0027,  0.0054],\n","         [-0.0027,  0.0021, -0.0043],\n","         [ 0.0054, -0.0043,  0.0087]],\n","\n","        [[ 0.0036, -0.0026,  0.0053],\n","         [-0.0026,  0.0021, -0.0042],\n","         [ 0.0053, -0.0042,  0.0086]],\n","\n","        [[ 0.0037, -0.0027,  0.0054],\n","         [-0.0027,  0.0021, -0.0043],\n","         [ 0.0054, -0.0043,  0.0087]]], device='cuda:0')\n","phi tensor([0.3094, 0.3197, 0.1725, 0.1984], device='cuda:0') mu tensor([[0.3515, 1.0435, 0.1219],\n","        [0.3529, 1.0423, 0.1243],\n","        [0.3534, 1.0421, 0.1246],\n","        [0.3529, 1.0424, 0.1242]], device='cuda:0') cov tensor([[[ 0.0039, -0.0029,  0.0058],\n","         [-0.0029,  0.0023, -0.0046],\n","         [ 0.0058, -0.0046,  0.0094]],\n","\n","        [[ 0.0038, -0.0028,  0.0057],\n","         [-0.0028,  0.0022, -0.0045],\n","         [ 0.0057, -0.0045,  0.0091]],\n","\n","        [[ 0.0038, -0.0028,  0.0057],\n","         [-0.0028,  0.0022, -0.0045],\n","         [ 0.0057, -0.0045,  0.0091]],\n","\n","        [[ 0.0038, -0.0028,  0.0057],\n","         [-0.0028,  0.0022, -0.0045],\n","         [ 0.0057, -0.0045,  0.0091]]], device='cuda:0')\n","phi tensor([0.3100, 0.3219, 0.1712, 0.1968], device='cuda:0') mu tensor([[0.3535, 1.0423, 0.1247],\n","        [0.3546, 1.0413, 0.1267],\n","        [0.3545, 1.0414, 0.1264],\n","        [0.3531, 1.0425, 0.1243]], device='cuda:0') cov tensor([[[ 0.0041, -0.0030,  0.0061],\n","         [-0.0030,  0.0024, -0.0048],\n","         [ 0.0061, -0.0048,  0.0097]],\n","\n","        [[ 0.0040, -0.0029,  0.0059],\n","         [-0.0029,  0.0023, -0.0047],\n","         [ 0.0059, -0.0047,  0.0095]],\n","\n","        [[ 0.0040, -0.0030,  0.0060],\n","         [-0.0030,  0.0023, -0.0047],\n","         [ 0.0060, -0.0047,  0.0095]],\n","\n","        [[ 0.0041, -0.0030,  0.0061],\n","         [-0.0030,  0.0024, -0.0048],\n","         [ 0.0061, -0.0048,  0.0097]]], device='cuda:0')\n"]},{"output_type":"stream","name":"stderr","text":["\r 12%|█▏        | 24/194 [00:00<00:04, 37.30it/s]"]},{"output_type":"stream","name":"stdout","text":["phi tensor([0.3106, 0.3203, 0.1718, 0.1973], device='cuda:0') mu tensor([[0.3542, 1.0429, 0.1242],\n","        [0.3557, 1.0417, 0.1267],\n","        [0.3559, 1.0417, 0.1267],\n","        [0.3553, 1.0424, 0.1254]], device='cuda:0') cov tensor([[[ 0.0044, -0.0032,  0.0065],\n","         [-0.0032,  0.0026, -0.0052],\n","         [ 0.0065, -0.0052,  0.0105]],\n","\n","        [[ 0.0043, -0.0031,  0.0063],\n","         [-0.0031,  0.0025, -0.0050],\n","         [ 0.0063, -0.0050,  0.0102]],\n","\n","        [[ 0.0043, -0.0031,  0.0063],\n","         [-0.0031,  0.0025, -0.0050],\n","         [ 0.0063, -0.0050,  0.0102]],\n","\n","        [[ 0.0043, -0.0032,  0.0064],\n","         [-0.0032,  0.0025, -0.0051],\n","         [ 0.0064, -0.0051,  0.0104]]], device='cuda:0')\n","phi tensor([0.3102, 0.3221, 0.1719, 0.1957], device='cuda:0') mu tensor([[0.3587, 1.0410, 0.1289],\n","        [0.3600, 1.0399, 0.1311],\n","        [0.3599, 1.0401, 0.1306],\n","        [0.3581, 1.0413, 0.1280]], device='cuda:0') cov tensor([[[ 0.0044, -0.0032,  0.0065],\n","         [-0.0032,  0.0026, -0.0053],\n","         [ 0.0065, -0.0053,  0.0107]],\n","\n","        [[ 0.0043, -0.0031,  0.0063],\n","         [-0.0031,  0.0025, -0.0051],\n","         [ 0.0063, -0.0051,  0.0104]],\n","\n","        [[ 0.0043, -0.0032,  0.0064],\n","         [-0.0032,  0.0026, -0.0052],\n","         [ 0.0064, -0.0052,  0.0105]],\n","\n","        [[ 0.0044, -0.0033,  0.0066],\n","         [-0.0033,  0.0026, -0.0053],\n","         [ 0.0066, -0.0053,  0.0108]]], device='cuda:0')\n"]},{"output_type":"stream","name":"stderr","text":["\r 14%|█▍        | 28/194 [00:00<00:04, 37.05it/s]"]},{"output_type":"stream","name":"stdout","text":["phi tensor([0.3104, 0.3212, 0.1713, 0.1971], device='cuda:0') mu tensor([[0.3597, 1.0403, 0.1309],\n","        [0.3610, 1.0391, 0.1332],\n","        [0.3614, 1.0389, 0.1336],\n","        [0.3603, 1.0398, 0.1315]], device='cuda:0') cov tensor([[[ 0.0047, -0.0035,  0.0070],\n","         [-0.0035,  0.0027, -0.0055],\n","         [ 0.0070, -0.0055,  0.0112]],\n","\n","        [[ 0.0046, -0.0034,  0.0068],\n","         [-0.0034,  0.0027, -0.0054],\n","         [ 0.0068, -0.0054,  0.0109]],\n","\n","        [[ 0.0046, -0.0034,  0.0068],\n","         [-0.0034,  0.0026, -0.0053],\n","         [ 0.0068, -0.0053,  0.0109]],\n","\n","        [[ 0.0047, -0.0035,  0.0070],\n","         [-0.0035,  0.0027, -0.0055],\n","         [ 0.0070, -0.0055,  0.0112]]], device='cuda:0')\n","phi tensor([0.3106, 0.3227, 0.1717, 0.1950], device='cuda:0') mu tensor([[0.3612, 1.0405, 0.1308],\n","        [0.3630, 1.0391, 0.1337],\n","        [0.3623, 1.0396, 0.1328],\n","        [0.3615, 1.0403, 0.1312]], device='cuda:0') cov tensor([[[ 0.0049, -0.0036,  0.0074],\n","         [-0.0036,  0.0029, -0.0059],\n","         [ 0.0074, -0.0059,  0.0120]],\n","\n","        [[ 0.0048, -0.0035,  0.0072],\n","         [-0.0035,  0.0028, -0.0057],\n","         [ 0.0072, -0.0057,  0.0117]],\n","\n","        [[ 0.0048, -0.0036,  0.0072],\n","         [-0.0036,  0.0029, -0.0058],\n","         [ 0.0072, -0.0058,  0.0118]],\n","\n","        [[ 0.0049, -0.0036,  0.0074],\n","         [-0.0036,  0.0029, -0.0059],\n","         [ 0.0074, -0.0059,  0.0120]]], device='cuda:0')\n","phi tensor([0.3112, 0.3232, 0.1712, 0.1944], device='cuda:0') mu tensor([[0.3597, 1.0419, 0.1278],\n","        [0.3620, 1.0401, 0.1314],\n","        [0.3622, 1.0400, 0.1317],\n","        [0.3608, 1.0412, 0.1294]], device='cuda:0') cov tensor([[[ 0.0056, -0.0041,  0.0085],\n","         [-0.0041,  0.0032, -0.0065],\n","         [ 0.0085, -0.0065,  0.0134]],\n","\n","        [[ 0.0054, -0.0040,  0.0082],\n","         [-0.0040,  0.0031, -0.0063],\n","         [ 0.0082, -0.0063,  0.0130]],\n","\n","        [[ 0.0054, -0.0040,  0.0081],\n","         [-0.0040,  0.0031, -0.0063],\n","         [ 0.0081, -0.0063,  0.0129]],\n","\n","        [[ 0.0055, -0.0041,  0.0083],\n","         [-0.0041,  0.0032, -0.0064],\n","         [ 0.0083, -0.0064,  0.0132]]], device='cuda:0')\n","phi tensor([0.3095, 0.3223, 0.1716, 0.1966], device='cuda:0') mu tensor([[0.3666, 1.0380, 0.1362],\n","        [0.3682, 1.0366, 0.1390],\n","        [0.3680, 1.0370, 0.1382],\n","        [0.3665, 1.0381, 0.1360]], device='cuda:0') cov tensor([[[ 0.0054, -0.0040,  0.0082],\n","         [-0.0040,  0.0032, -0.0065],\n","         [ 0.0082, -0.0065,  0.0133]],\n","\n","        [[ 0.0053, -0.0039,  0.0080],\n","         [-0.0039,  0.0031, -0.0063],\n","         [ 0.0080, -0.0063,  0.0129]],\n","\n","        [[ 0.0053, -0.0040,  0.0081],\n","         [-0.0040,  0.0031, -0.0064],\n","         [ 0.0081, -0.0064,  0.0130]],\n","\n","        [[ 0.0054, -0.0041,  0.0082],\n","         [-0.0041,  0.0032, -0.0065],\n","         [ 0.0082, -0.0065,  0.0133]]], device='cuda:0')\n","phi tensor([0.3106, 0.3226, 0.1727, 0.1941], device='cuda:0') mu tensor([[0.3641, 1.0400, 0.1328],\n","        [0.3663, 1.0383, 0.1363],\n","        [0.3654, 1.0389, 0.1352],\n","        [0.3628, 1.0409, 0.1311]], device='cuda:0') cov tensor([[[ 0.0060, -0.0044,  0.0090],\n","         [-0.0044,  0.0034, -0.0070],\n","         [ 0.0090, -0.0070,  0.0144]],\n","\n","        [[ 0.0058, -0.0043,  0.0087],\n","         [-0.0043,  0.0033, -0.0068],\n","         [ 0.0087, -0.0068,  0.0139]],\n","\n","        [[ 0.0059, -0.0043,  0.0088],\n","         [-0.0043,  0.0033, -0.0068],\n","         [ 0.0088, -0.0068,  0.0140]],\n","\n","        [[ 0.0061, -0.0045,  0.0091],\n","         [-0.0045,  0.0035, -0.0071],\n","         [ 0.0091, -0.0071,  0.0146]]], device='cuda:0')\n","phi tensor([0.3091, 0.3222, 0.1717, 0.1970], device='cuda:0') mu tensor([[0.3700, 1.0377, 0.1376],\n","        [0.3727, 1.0356, 0.1418],\n","        [0.3714, 1.0367, 0.1398],\n","        [0.3705, 1.0375, 0.1382]], device='cuda:0') cov tensor([[[ 0.0060, -0.0045,  0.0092],\n","         [-0.0045,  0.0036, -0.0073],\n","         [ 0.0092, -0.0073,  0.0149]],\n","\n","        [[ 0.0058, -0.0043,  0.0088],\n","         [-0.0043,  0.0034, -0.0070],\n","         [ 0.0088, -0.0070,  0.0143]],\n","\n","        [[ 0.0059, -0.0044,  0.0090],\n","         [-0.0044,  0.0035, -0.0071],\n","         [ 0.0090, -0.0071,  0.0146]],\n","\n","        [[ 0.0060, -0.0045,  0.0091],\n","         [-0.0045,  0.0035, -0.0072],\n","         [ 0.0091, -0.0072,  0.0148]]], device='cuda:0')\n"]},{"output_type":"stream","name":"stderr","text":["\r 16%|█▋        | 32/194 [00:00<00:04, 36.35it/s]"]},{"output_type":"stream","name":"stdout","text":["phi tensor([0.3078, 0.3209, 0.1732, 0.1981], device='cuda:0') mu tensor([[0.3708, 1.0363, 0.1409],\n","        [0.3727, 1.0347, 0.1441],\n","        [0.3728, 1.0348, 0.1439],\n","        [0.3711, 1.0361, 0.1412]], device='cuda:0') cov tensor([[[ 0.0063, -0.0046,  0.0095],\n","         [-0.0046,  0.0036, -0.0074],\n","         [ 0.0095, -0.0074,  0.0152]],\n","\n","        [[ 0.0061, -0.0045,  0.0092],\n","         [-0.0045,  0.0035, -0.0071],\n","         [ 0.0092, -0.0071,  0.0147]],\n","\n","        [[ 0.0061, -0.0045,  0.0092],\n","         [-0.0045,  0.0035, -0.0072],\n","         [ 0.0092, -0.0072,  0.0147]],\n","\n","        [[ 0.0063, -0.0046,  0.0095],\n","         [-0.0046,  0.0036, -0.0074],\n","         [ 0.0095, -0.0074,  0.0152]]], device='cuda:0')\n","phi tensor([0.3076, 0.3220, 0.1727, 0.1977], device='cuda:0') mu tensor([[0.3718, 1.0356, 0.1428],\n","        [0.3737, 1.0341, 0.1458],\n","        [0.3734, 1.0345, 0.1451],\n","        [0.3721, 1.0354, 0.1432]], device='cuda:0') cov tensor([[[ 0.0066, -0.0048,  0.0098],\n","         [-0.0048,  0.0037, -0.0076],\n","         [ 0.0098, -0.0076,  0.0156]],\n","\n","        [[ 0.0064, -0.0047,  0.0095],\n","         [-0.0047,  0.0036, -0.0074],\n","         [ 0.0095, -0.0074,  0.0152]],\n","\n","        [[ 0.0064, -0.0047,  0.0096],\n","         [-0.0047,  0.0036, -0.0074],\n","         [ 0.0096, -0.0074,  0.0153]],\n","\n","        [[ 0.0066, -0.0048,  0.0098],\n","         [-0.0048,  0.0037, -0.0076],\n","         [ 0.0098, -0.0076,  0.0157]]], device='cuda:0')\n"]},{"output_type":"stream","name":"stderr","text":["\r 19%|█▊        | 36/194 [00:00<00:04, 36.35it/s]"]},{"output_type":"stream","name":"stdout","text":["phi tensor([0.3070, 0.3199, 0.1741, 0.1990], device='cuda:0') mu tensor([[0.3720, 1.0366, 0.1409],\n","        [0.3742, 1.0349, 0.1446],\n","        [0.3732, 1.0358, 0.1427],\n","        [0.3728, 1.0363, 0.1416]], device='cuda:0') cov tensor([[[ 0.0070, -0.0052,  0.0106],\n","         [-0.0052,  0.0040, -0.0082],\n","         [ 0.0106, -0.0082,  0.0170]],\n","\n","        [[ 0.0068, -0.0050,  0.0102],\n","         [-0.0050,  0.0039, -0.0080],\n","         [ 0.0102, -0.0080,  0.0164]],\n","\n","        [[ 0.0069, -0.0051,  0.0104],\n","         [-0.0051,  0.0039, -0.0081],\n","         [ 0.0104, -0.0081,  0.0167]],\n","\n","        [[ 0.0070, -0.0051,  0.0105],\n","         [-0.0051,  0.0040, -0.0082],\n","         [ 0.0105, -0.0082,  0.0169]]], device='cuda:0')\n","phi tensor([0.3093, 0.3219, 0.1743, 0.1946], device='cuda:0') mu tensor([[0.3781, 1.0331, 0.1486],\n","        [0.3803, 1.0313, 0.1522],\n","        [0.3798, 1.0319, 0.1511],\n","        [0.3773, 1.0336, 0.1474]], device='cuda:0') cov tensor([[[ 0.0070, -0.0052,  0.0106],\n","         [-0.0052,  0.0040, -0.0083],\n","         [ 0.0106, -0.0083,  0.0170]],\n","\n","        [[ 0.0068, -0.0050,  0.0103],\n","         [-0.0050,  0.0039, -0.0080],\n","         [ 0.0103, -0.0080,  0.0164]],\n","\n","        [[ 0.0069, -0.0051,  0.0104],\n","         [-0.0051,  0.0040, -0.0081],\n","         [ 0.0104, -0.0081,  0.0166]],\n","\n","        [[ 0.0071, -0.0052,  0.0107],\n","         [-0.0052,  0.0041, -0.0084],\n","         [ 0.0107, -0.0084,  0.0172]]], device='cuda:0')\n","phi tensor([0.3086, 0.3219, 0.1735, 0.1961], device='cuda:0') mu tensor([[0.3766, 1.0356, 0.1434],\n","        [0.3793, 1.0334, 0.1479],\n","        [0.3795, 1.0333, 0.1480],\n","        [0.3777, 1.0347, 0.1451]], device='cuda:0') cov tensor([[[ 0.0078, -0.0058,  0.0120],\n","         [-0.0058,  0.0045, -0.0093],\n","         [ 0.0120, -0.0093,  0.0193]],\n","\n","        [[ 0.0075, -0.0056,  0.0115],\n","         [-0.0056,  0.0044, -0.0090],\n","         [ 0.0115, -0.0090,  0.0186]],\n","\n","        [[ 0.0075, -0.0056,  0.0115],\n","         [-0.0056,  0.0044, -0.0090],\n","         [ 0.0115, -0.0090,  0.0186]],\n","\n","        [[ 0.0077, -0.0057,  0.0118],\n","         [-0.0057,  0.0045, -0.0092],\n","         [ 0.0118, -0.0092,  0.0190]]], device='cuda:0')\n","phi tensor([0.3070, 0.3226, 0.1743, 0.1962], device='cuda:0') mu tensor([[0.3793, 1.0335, 0.1478],\n","        [0.3817, 1.0317, 0.1516],\n","        [0.3818, 1.0316, 0.1517],\n","        [0.3806, 1.0327, 0.1495]], device='cuda:0') cov tensor([[[ 0.0080, -0.0059,  0.0122],\n","         [-0.0059,  0.0046, -0.0095],\n","         [ 0.0122, -0.0095,  0.0195]],\n","\n","        [[ 0.0077, -0.0057,  0.0118],\n","         [-0.0057,  0.0045, -0.0091],\n","         [ 0.0118, -0.0091,  0.0189]],\n","\n","        [[ 0.0077, -0.0057,  0.0118],\n","         [-0.0057,  0.0044, -0.0092],\n","         [ 0.0118, -0.0092,  0.0189]],\n","\n","        [[ 0.0079, -0.0058,  0.0120],\n","         [-0.0058,  0.0045, -0.0093],\n","         [ 0.0120, -0.0093,  0.0193]]], device='cuda:0')\n","phi tensor([0.3078, 0.3239, 0.1731, 0.1952], device='cuda:0') mu tensor([[0.3798, 1.0337, 0.1471],\n","        [0.3826, 1.0314, 0.1518],\n","        [0.3839, 1.0306, 0.1534],\n","        [0.3823, 1.0319, 0.1508]], device='cuda:0') cov tensor([[[ 0.0086, -0.0064,  0.0133],\n","         [-0.0064,  0.0049, -0.0102],\n","         [ 0.0133, -0.0102,  0.0212]],\n","\n","        [[ 0.0083, -0.0062,  0.0128],\n","         [-0.0062,  0.0047, -0.0098],\n","         [ 0.0128, -0.0098,  0.0203]],\n","\n","        [[ 0.0082, -0.0061,  0.0126],\n","         [-0.0061,  0.0047, -0.0097],\n","         [ 0.0126, -0.0097,  0.0201]],\n","\n","        [[ 0.0084, -0.0062,  0.0129],\n","         [-0.0062,  0.0048, -0.0099],\n","         [ 0.0129, -0.0099,  0.0206]]], device='cuda:0')\n","phi tensor([0.3068, 0.3222, 0.1750, 0.1960], device='cuda:0') mu tensor([[0.3879, 1.0277, 0.1600],\n","        [0.3907, 1.0255, 0.1646],\n","        [0.3908, 1.0256, 0.1644],\n","        [0.3894, 1.0265, 0.1625]], device='cuda:0') cov tensor([[[ 0.0082, -0.0060,  0.0124],\n","         [-0.0060,  0.0046, -0.0095],\n","         [ 0.0124, -0.0095,  0.0197]],\n","\n","        [[ 0.0078, -0.0057,  0.0119],\n","         [-0.0057,  0.0044, -0.0091],\n","         [ 0.0119, -0.0091,  0.0189]],\n","\n","        [[ 0.0078, -0.0057,  0.0119],\n","         [-0.0057,  0.0044, -0.0091],\n","         [ 0.0119, -0.0091,  0.0189]],\n","\n","        [[ 0.0080, -0.0058,  0.0121],\n","         [-0.0058,  0.0045, -0.0093],\n","         [ 0.0121, -0.0093,  0.0192]]], device='cuda:0')\n"]},{"output_type":"stream","name":"stderr","text":["\r 21%|██        | 40/194 [00:01<00:04, 36.84it/s]"]},{"output_type":"stream","name":"stdout","text":["phi tensor([0.3087, 0.3235, 0.1732, 0.1945], device='cuda:0') mu tensor([[0.3845, 1.0309, 0.1535],\n","        [0.3877, 1.0285, 0.1585],\n","        [0.3879, 1.0282, 0.1591],\n","        [0.3864, 1.0295, 0.1564]], device='cuda:0') cov tensor([[[ 0.0091, -0.0067,  0.0139],\n","         [-0.0067,  0.0052, -0.0107],\n","         [ 0.0139, -0.0107,  0.0222]],\n","\n","        [[ 0.0088, -0.0065,  0.0134],\n","         [-0.0065,  0.0050, -0.0103],\n","         [ 0.0134, -0.0103,  0.0214]],\n","\n","        [[ 0.0087, -0.0064,  0.0133],\n","         [-0.0064,  0.0049, -0.0102],\n","         [ 0.0133, -0.0102,  0.0213]],\n","\n","        [[ 0.0089, -0.0065,  0.0135],\n","         [-0.0065,  0.0050, -0.0104],\n","         [ 0.0135, -0.0104,  0.0217]]], device='cuda:0')\n","phi tensor([0.3071, 0.3218, 0.1736, 0.1974], device='cuda:0') mu tensor([[0.3871, 1.0296, 0.1561],\n","        [0.3898, 1.0274, 0.1607],\n","        [0.3894, 1.0277, 0.1600],\n","        [0.3885, 1.0285, 0.1585]], device='cuda:0') cov tensor([[[ 0.0094, -0.0070,  0.0145],\n","         [-0.0070,  0.0053, -0.0111],\n","         [ 0.0145, -0.0111,  0.0230]],\n","\n","        [[ 0.0091, -0.0067,  0.0139],\n","         [-0.0067,  0.0051, -0.0106],\n","         [ 0.0139, -0.0106,  0.0222]],\n","\n","        [[ 0.0092, -0.0068,  0.0140],\n","         [-0.0068,  0.0052, -0.0107],\n","         [ 0.0140, -0.0107,  0.0223]],\n","\n","        [[ 0.0093, -0.0069,  0.0142],\n","         [-0.0069,  0.0053, -0.0109],\n","         [ 0.0142, -0.0109,  0.0227]]], device='cuda:0')\n"]},{"output_type":"stream","name":"stderr","text":["\r 23%|██▎       | 44/194 [00:01<00:04, 37.45it/s]"]},{"output_type":"stream","name":"stdout","text":["phi tensor([0.3062, 0.3226, 0.1732, 0.1981], device='cuda:0') mu tensor([[0.3877, 1.0293, 0.1569],\n","        [0.3913, 1.0266, 0.1626],\n","        [0.3916, 1.0264, 0.1629],\n","        [0.3900, 1.0277, 0.1602]], device='cuda:0') cov tensor([[[ 0.0100, -0.0074,  0.0153],\n","         [-0.0074,  0.0056, -0.0117],\n","         [ 0.0153, -0.0117,  0.0243]],\n","\n","        [[ 0.0096, -0.0071,  0.0147],\n","         [-0.0071,  0.0054, -0.0112],\n","         [ 0.0147, -0.0112,  0.0233]],\n","\n","        [[ 0.0096, -0.0070,  0.0146],\n","         [-0.0070,  0.0053, -0.0111],\n","         [ 0.0146, -0.0111,  0.0232]],\n","\n","        [[ 0.0098, -0.0072,  0.0150],\n","         [-0.0072,  0.0055, -0.0114],\n","         [ 0.0150, -0.0114,  0.0238]]], device='cuda:0')\n","phi tensor([0.3077, 0.3236, 0.1716, 0.1971], device='cuda:0') mu tensor([[0.3871, 1.0310, 0.1540],\n","        [0.3904, 1.0284, 0.1595],\n","        [0.3903, 1.0285, 0.1591],\n","        [0.3880, 1.0304, 0.1552]], device='cuda:0') cov tensor([[[ 0.0107, -0.0079,  0.0165],\n","         [-0.0079,  0.0061, -0.0126],\n","         [ 0.0165, -0.0126,  0.0263]],\n","\n","        [[ 0.0104, -0.0076,  0.0159],\n","         [-0.0076,  0.0059, -0.0122],\n","         [ 0.0159, -0.0122,  0.0253]],\n","\n","        [[ 0.0104, -0.0077,  0.0160],\n","         [-0.0077,  0.0059, -0.0122],\n","         [ 0.0160, -0.0122,  0.0255]],\n","\n","        [[ 0.0106, -0.0079,  0.0163],\n","         [-0.0079,  0.0060, -0.0125],\n","         [ 0.0163, -0.0125,  0.0261]]], device='cuda:0')\n","phi tensor([0.3071, 0.3233, 0.1740, 0.1957], device='cuda:0') mu tensor([[0.3879, 1.0308, 0.1540],\n","        [0.3915, 1.0280, 0.1599],\n","        [0.3917, 1.0281, 0.1596],\n","        [0.3880, 1.0308, 0.1537]], device='cuda:0') cov tensor([[[ 0.0113, -0.0084,  0.0175],\n","         [-0.0084,  0.0064, -0.0133],\n","         [ 0.0175, -0.0133,  0.0278]],\n","\n","        [[ 0.0109, -0.0081,  0.0168],\n","         [-0.0081,  0.0062, -0.0128],\n","         [ 0.0168, -0.0128,  0.0268]],\n","\n","        [[ 0.0109, -0.0081,  0.0169],\n","         [-0.0081,  0.0062, -0.0129],\n","         [ 0.0169, -0.0129,  0.0269]],\n","\n","        [[ 0.0113, -0.0084,  0.0176],\n","         [-0.0084,  0.0064, -0.0134],\n","         [ 0.0176, -0.0134,  0.0280]]], device='cuda:0')\n","phi tensor([0.3062, 0.3246, 0.1740, 0.1952], device='cuda:0') mu tensor([[0.3942, 1.0261, 0.1641],\n","        [0.3979, 1.0233, 0.1700],\n","        [0.3979, 1.0233, 0.1700],\n","        [0.3965, 1.0244, 0.1677]], device='cuda:0') cov tensor([[[ 0.0111, -0.0081,  0.0169],\n","         [-0.0081,  0.0062, -0.0129],\n","         [ 0.0169, -0.0129,  0.0269]],\n","\n","        [[ 0.0106, -0.0078,  0.0162],\n","         [-0.0078,  0.0059, -0.0124],\n","         [ 0.0162, -0.0124,  0.0258]],\n","\n","        [[ 0.0106, -0.0078,  0.0162],\n","         [-0.0078,  0.0059, -0.0124],\n","         [ 0.0162, -0.0124,  0.0258]],\n","\n","        [[ 0.0108, -0.0079,  0.0164],\n","         [-0.0079,  0.0060, -0.0126],\n","         [ 0.0164, -0.0126,  0.0262]]], device='cuda:0')\n","phi tensor([0.3076, 0.3243, 0.1729, 0.1952], device='cuda:0') mu tensor([[0.3961, 1.0254, 0.1654],\n","        [0.3997, 1.0226, 0.1713],\n","        [0.3996, 1.0227, 0.1710],\n","        [0.3985, 1.0236, 0.1692]], device='cuda:0') cov tensor([[[ 0.0117, -0.0086,  0.0180],\n","         [-0.0086,  0.0066, -0.0137],\n","         [ 0.0180, -0.0137,  0.0286]],\n","\n","        [[ 0.0113, -0.0083,  0.0173],\n","         [-0.0083,  0.0063, -0.0131],\n","         [ 0.0173, -0.0131,  0.0275]],\n","\n","        [[ 0.0113, -0.0083,  0.0174],\n","         [-0.0083,  0.0063, -0.0132],\n","         [ 0.0174, -0.0132,  0.0276]],\n","\n","        [[ 0.0114, -0.0084,  0.0176],\n","         [-0.0084,  0.0064, -0.0134],\n","         [ 0.0176, -0.0134,  0.0280]]], device='cuda:0')\n","phi tensor([0.3058, 0.3227, 0.1737, 0.1978], device='cuda:0') mu tensor([[0.3961, 1.0260, 0.1641],\n","        [0.4002, 1.0228, 0.1707],\n","        [0.3990, 1.0236, 0.1690],\n","        [0.3975, 1.0248, 0.1664]], device='cuda:0') cov tensor([[[ 0.0124, -0.0091,  0.0191],\n","         [-0.0091,  0.0069, -0.0144],\n","         [ 0.0191, -0.0144,  0.0303]],\n","\n","        [[ 0.0119, -0.0087,  0.0183],\n","         [-0.0087,  0.0066, -0.0138],\n","         [ 0.0183, -0.0138,  0.0290]],\n","\n","        [[ 0.0120, -0.0088,  0.0185],\n","         [-0.0088,  0.0067, -0.0140],\n","         [ 0.0185, -0.0140,  0.0293]],\n","\n","        [[ 0.0122, -0.0090,  0.0188],\n","         [-0.0090,  0.0068, -0.0143],\n","         [ 0.0188, -0.0143,  0.0299]]], device='cuda:0')\n"]},{"output_type":"stream","name":"stderr","text":["\r 25%|██▍       | 48/194 [00:01<00:03, 37.25it/s]"]},{"output_type":"stream","name":"stdout","text":["phi tensor([0.3065, 0.3231, 0.1736, 0.1968], device='cuda:0') mu tensor([[0.3927, 1.0286, 0.1586],\n","        [0.3971, 1.0253, 0.1657],\n","        [0.3971, 1.0253, 0.1655],\n","        [0.3956, 1.0263, 0.1634]], device='cuda:0') cov tensor([[[ 0.0134, -0.0098,  0.0205],\n","         [-0.0098,  0.0074, -0.0155],\n","         [ 0.0205, -0.0155,  0.0325]],\n","\n","        [[ 0.0129, -0.0094,  0.0198],\n","         [-0.0094,  0.0071, -0.0149],\n","         [ 0.0198, -0.0149,  0.0312]],\n","\n","        [[ 0.0129, -0.0094,  0.0198],\n","         [-0.0094,  0.0071, -0.0149],\n","         [ 0.0198, -0.0149,  0.0312]],\n","\n","        [[ 0.0130, -0.0095,  0.0200],\n","         [-0.0095,  0.0072, -0.0150],\n","         [ 0.0200, -0.0150,  0.0316]]], device='cuda:0')\n","phi tensor([0.3052, 0.3236, 0.1741, 0.1970], device='cuda:0') mu tensor([[0.3969, 1.0262, 0.1640],\n","        [0.4013, 1.0228, 0.1711],\n","        [0.4015, 1.0226, 0.1714],\n","        [0.3991, 1.0245, 0.1675]], device='cuda:0') cov tensor([[[ 0.0137, -0.0101,  0.0212],\n","         [-0.0101,  0.0076, -0.0160],\n","         [ 0.0212, -0.0160,  0.0335]],\n","\n","        [[ 0.0132, -0.0097,  0.0204],\n","         [-0.0097,  0.0073, -0.0153],\n","         [ 0.0204, -0.0153,  0.0322]],\n","\n","        [[ 0.0132, -0.0097,  0.0204],\n","         [-0.0097,  0.0073, -0.0153],\n","         [ 0.0204, -0.0153,  0.0322]],\n","\n","        [[ 0.0135, -0.0099,  0.0208],\n","         [-0.0099,  0.0075, -0.0157],\n","         [ 0.0208, -0.0157,  0.0329]]], device='cuda:0')\n"]},{"output_type":"stream","name":"stderr","text":["\r 27%|██▋       | 52/194 [00:01<00:03, 37.29it/s]"]},{"output_type":"stream","name":"stdout","text":["phi tensor([0.3057, 0.3253, 0.1739, 0.1950], device='cuda:0') mu tensor([[0.4044, 1.0210, 0.1748],\n","        [0.4090, 1.0175, 0.1821],\n","        [0.4094, 1.0174, 0.1823],\n","        [0.4069, 1.0193, 0.1783]], device='cuda:0') cov tensor([[[ 0.0136, -0.0099,  0.0209],\n","         [-0.0099,  0.0075, -0.0157],\n","         [ 0.0209, -0.0157,  0.0330]],\n","\n","        [[ 0.0130, -0.0095,  0.0200],\n","         [-0.0095,  0.0071, -0.0150],\n","         [ 0.0200, -0.0150,  0.0315]],\n","\n","        [[ 0.0130, -0.0095,  0.0200],\n","         [-0.0095,  0.0072, -0.0150],\n","         [ 0.0200, -0.0150,  0.0316]],\n","\n","        [[ 0.0133, -0.0098,  0.0205],\n","         [-0.0098,  0.0073, -0.0154],\n","         [ 0.0205, -0.0154,  0.0324]]], device='cuda:0')\n","phi tensor([0.3065, 0.3266, 0.1748, 0.1921], device='cuda:0') mu tensor([[0.4083, 1.0186, 0.1798],\n","        [0.4126, 1.0154, 0.1866],\n","        [0.4130, 1.0151, 0.1871],\n","        [0.4108, 1.0169, 0.1833]], device='cuda:0') cov tensor([[[ 0.0142, -0.0104,  0.0220],\n","         [-0.0104,  0.0078, -0.0164],\n","         [ 0.0220, -0.0164,  0.0346]],\n","\n","        [[ 0.0137, -0.0100,  0.0211],\n","         [-0.0100,  0.0075, -0.0157],\n","         [ 0.0211, -0.0157,  0.0332]],\n","\n","        [[ 0.0136, -0.0100,  0.0210],\n","         [-0.0100,  0.0075, -0.0157],\n","         [ 0.0210, -0.0157,  0.0331]],\n","\n","        [[ 0.0140, -0.0103,  0.0216],\n","         [-0.0103,  0.0077, -0.0162],\n","         [ 0.0216, -0.0162,  0.0341]]], device='cuda:0')\n","phi tensor([0.3050, 0.3264, 0.1733, 0.1953], device='cuda:0') mu tensor([[0.4138, 1.0159, 0.1857],\n","        [0.4188, 1.0120, 0.1938],\n","        [0.4187, 1.0121, 0.1935],\n","        [0.4148, 1.0150, 0.1875]], device='cuda:0') cov tensor([[[ 0.0143, -0.0106,  0.0223],\n","         [-0.0106,  0.0080, -0.0168],\n","         [ 0.0223, -0.0168,  0.0354]],\n","\n","        [[ 0.0136, -0.0100,  0.0212],\n","         [-0.0100,  0.0075, -0.0159],\n","         [ 0.0212, -0.0159,  0.0335]],\n","\n","        [[ 0.0137, -0.0101,  0.0213],\n","         [-0.0101,  0.0076, -0.0160],\n","         [ 0.0213, -0.0160,  0.0337]],\n","\n","        [[ 0.0142, -0.0105,  0.0221],\n","         [-0.0105,  0.0079, -0.0166],\n","         [ 0.0221, -0.0166,  0.0351]]], device='cuda:0')\n","phi tensor([0.3041, 0.3249, 0.1742, 0.1967], device='cuda:0') mu tensor([[0.4197, 1.0116, 0.1942],\n","        [0.4243, 1.0081, 0.2015],\n","        [0.4226, 1.0094, 0.1989],\n","        [0.4199, 1.0116, 0.1942]], device='cuda:0') cov tensor([[[ 0.0145, -0.0107,  0.0226],\n","         [-0.0107,  0.0080, -0.0169],\n","         [ 0.0226, -0.0169,  0.0357]],\n","\n","        [[ 0.0138, -0.0102,  0.0215],\n","         [-0.0102,  0.0076, -0.0161],\n","         [ 0.0215, -0.0161,  0.0340]],\n","\n","        [[ 0.0141, -0.0103,  0.0219],\n","         [-0.0103,  0.0077, -0.0163],\n","         [ 0.0219, -0.0163,  0.0346]],\n","\n","        [[ 0.0145, -0.0107,  0.0226],\n","         [-0.0107,  0.0080, -0.0169],\n","         [ 0.0226, -0.0169,  0.0358]]], device='cuda:0')\n","phi tensor([0.3050, 0.3252, 0.1736, 0.1962], device='cuda:0') mu tensor([[0.4083, 1.0202, 0.1769],\n","        [0.4142, 1.0157, 0.1864],\n","        [0.4144, 1.0157, 0.1865],\n","        [0.4115, 1.0179, 0.1817]], device='cuda:0') cov tensor([[[ 0.0164, -0.0120,  0.0253],\n","         [-0.0120,  0.0090, -0.0189],\n","         [ 0.0253, -0.0189,  0.0400]],\n","\n","        [[ 0.0156, -0.0114,  0.0241],\n","         [-0.0114,  0.0085, -0.0180],\n","         [ 0.0241, -0.0180,  0.0380]],\n","\n","        [[ 0.0156, -0.0114,  0.0241],\n","         [-0.0114,  0.0085, -0.0180],\n","         [ 0.0241, -0.0180,  0.0380]],\n","\n","        [[ 0.0160, -0.0117,  0.0248],\n","         [-0.0117,  0.0088, -0.0185],\n","         [ 0.0248, -0.0185,  0.0392]]], device='cuda:0')\n","phi tensor([0.3044, 0.3271, 0.1748, 0.1937], device='cuda:0') mu tensor([[0.4155, 1.0152, 0.1871],\n","        [0.4213, 1.0109, 0.1963],\n","        [0.4199, 1.0121, 0.1936],\n","        [0.4154, 1.0153, 0.1867]], device='cuda:0') cov tensor([[[ 0.0167, -0.0122,  0.0257],\n","         [-0.0122,  0.0090, -0.0191],\n","         [ 0.0257, -0.0191,  0.0405]],\n","\n","        [[ 0.0159, -0.0116,  0.0245],\n","         [-0.0116,  0.0086, -0.0182],\n","         [ 0.0245, -0.0182,  0.0385]],\n","\n","        [[ 0.0161, -0.0117,  0.0249],\n","         [-0.0117,  0.0087, -0.0185],\n","         [ 0.0249, -0.0185,  0.0392]],\n","\n","        [[ 0.0167, -0.0122,  0.0258],\n","         [-0.0122,  0.0091, -0.0192],\n","         [ 0.0258, -0.0192,  0.0407]]], device='cuda:0')\n"]},{"output_type":"stream","name":"stderr","text":["\r 29%|██▉       | 56/194 [00:01<00:03, 37.94it/s]"]},{"output_type":"stream","name":"stdout","text":["phi tensor([0.3052, 0.3292, 0.1734, 0.1922], device='cuda:0') mu tensor([[0.4150, 1.0167, 0.1841],\n","        [0.4221, 1.0114, 0.1954],\n","        [0.4213, 1.0119, 0.1942],\n","        [0.4173, 1.0149, 0.1880]], device='cuda:0') cov tensor([[[ 0.0175, -0.0129,  0.0272],\n","         [-0.0129,  0.0096, -0.0204],\n","         [ 0.0272, -0.0204,  0.0431]],\n","\n","        [[ 0.0166, -0.0122,  0.0257],\n","         [-0.0122,  0.0091, -0.0192],\n","         [ 0.0257, -0.0192,  0.0406]],\n","\n","        [[ 0.0166, -0.0122,  0.0258],\n","         [-0.0122,  0.0091, -0.0192],\n","         [ 0.0258, -0.0192,  0.0407]],\n","\n","        [[ 0.0171, -0.0126,  0.0266],\n","         [-0.0126,  0.0094, -0.0199],\n","         [ 0.0266, -0.0199,  0.0420]]], device='cuda:0')\n","phi tensor([0.3043, 0.3277, 0.1736, 0.1944], device='cuda:0') mu tensor([[0.4195, 1.0130, 0.1921],\n","        [0.4257, 1.0084, 0.2019],\n","        [0.4246, 1.0093, 0.2000],\n","        [0.4219, 1.0114, 0.1955]], device='cuda:0') cov tensor([[[ 0.0177, -0.0129,  0.0273],\n","         [-0.0129,  0.0096, -0.0202],\n","         [ 0.0273, -0.0202,  0.0429]],\n","\n","        [[ 0.0169, -0.0123,  0.0259],\n","         [-0.0123,  0.0091, -0.0192],\n","         [ 0.0259, -0.0192,  0.0407]],\n","\n","        [[ 0.0170, -0.0124,  0.0262],\n","         [-0.0124,  0.0092, -0.0194],\n","         [ 0.0262, -0.0194,  0.0411]],\n","\n","        [[ 0.0174, -0.0127,  0.0269],\n","         [-0.0127,  0.0094, -0.0199],\n","         [ 0.0269, -0.0199,  0.0423]]], device='cuda:0')\n"]},{"output_type":"stream","name":"stderr","text":["\r 31%|███       | 60/194 [00:01<00:03, 37.62it/s]"]},{"output_type":"stream","name":"stdout","text":["phi tensor([0.3049, 0.3292, 0.1734, 0.1925], device='cuda:0') mu tensor([[0.4216, 1.0121, 0.1939],\n","        [0.4283, 1.0072, 0.2044],\n","        [0.4281, 1.0074, 0.2040],\n","        [0.4241, 1.0105, 0.1976]], device='cuda:0') cov tensor([[[ 0.0184, -0.0135,  0.0285],\n","         [-0.0135,  0.0100, -0.0212],\n","         [ 0.0285, -0.0212,  0.0449]],\n","\n","        [[ 0.0175, -0.0128,  0.0271],\n","         [-0.0128,  0.0095, -0.0200],\n","         [ 0.0271, -0.0200,  0.0425]],\n","\n","        [[ 0.0175, -0.0128,  0.0270],\n","         [-0.0128,  0.0095, -0.0200],\n","         [ 0.0270, -0.0200,  0.0425]],\n","\n","        [[ 0.0180, -0.0131,  0.0278],\n","         [-0.0131,  0.0098, -0.0207],\n","         [ 0.0278, -0.0207,  0.0438]]], device='cuda:0')\n","phi tensor([0.3048, 0.3292, 0.1743, 0.1916], device='cuda:0') mu tensor([[0.4208, 1.0129, 0.1925],\n","        [0.4275, 1.0079, 0.2030],\n","        [0.4259, 1.0091, 0.2005],\n","        [0.4225, 1.0115, 0.1953]], device='cuda:0') cov tensor([[[ 0.0197, -0.0143,  0.0303],\n","         [-0.0143,  0.0105, -0.0224],\n","         [ 0.0303, -0.0224,  0.0475]],\n","\n","        [[ 0.0188, -0.0136,  0.0288],\n","         [-0.0136,  0.0100, -0.0212],\n","         [ 0.0288, -0.0212,  0.0450]],\n","\n","        [[ 0.0190, -0.0138,  0.0292],\n","         [-0.0138,  0.0101, -0.0215],\n","         [ 0.0292, -0.0215,  0.0457]],\n","\n","        [[ 0.0194, -0.0141,  0.0299],\n","         [-0.0141,  0.0104, -0.0220],\n","         [ 0.0299, -0.0220,  0.0467]]], device='cuda:0')\n","phi tensor([0.3039, 0.3282, 0.1744, 0.1936], device='cuda:0') mu tensor([[0.4254, 1.0096, 0.1995],\n","        [0.4323, 1.0044, 0.2106],\n","        [0.4311, 1.0054, 0.2084],\n","        [0.4275, 1.0080, 0.2028]], device='cuda:0') cov tensor([[[ 0.0199, -0.0144,  0.0306],\n","         [-0.0144,  0.0106, -0.0225],\n","         [ 0.0306, -0.0225,  0.0477]],\n","\n","        [[ 0.0189, -0.0137,  0.0290],\n","         [-0.0137,  0.0100, -0.0212],\n","         [ 0.0290, -0.0212,  0.0451]],\n","\n","        [[ 0.0191, -0.0138,  0.0293],\n","         [-0.0138,  0.0101, -0.0215],\n","         [ 0.0293, -0.0215,  0.0456]],\n","\n","        [[ 0.0196, -0.0142,  0.0301],\n","         [-0.0142,  0.0104, -0.0221],\n","         [ 0.0301, -0.0221,  0.0469]]], device='cuda:0')\n","phi tensor([0.3040, 0.3280, 0.1753, 0.1927], device='cuda:0') mu tensor([[0.4302, 1.0074, 0.2045],\n","        [0.4367, 1.0025, 0.2148],\n","        [0.4353, 1.0037, 0.2123],\n","        [0.4305, 1.0073, 0.2047]], device='cuda:0') cov tensor([[[ 0.0207, -0.0151,  0.0320],\n","         [-0.0151,  0.0111, -0.0236],\n","         [ 0.0320, -0.0236,  0.0501]],\n","\n","        [[ 0.0197, -0.0143,  0.0304],\n","         [-0.0143,  0.0105, -0.0224],\n","         [ 0.0304, -0.0224,  0.0475]],\n","\n","        [[ 0.0199, -0.0145,  0.0308],\n","         [-0.0145,  0.0107, -0.0228],\n","         [ 0.0308, -0.0228,  0.0483]],\n","\n","        [[ 0.0206, -0.0150,  0.0319],\n","         [-0.0150,  0.0111, -0.0236],\n","         [ 0.0319, -0.0236,  0.0500]]], device='cuda:0')\n","phi tensor([0.3034, 0.3280, 0.1740, 0.1946], device='cuda:0') mu tensor([[0.4368, 1.0026, 0.2148],\n","        [0.4435, 0.9977, 0.2252],\n","        [0.4424, 0.9985, 0.2236],\n","        [0.4385, 1.0012, 0.2177]], device='cuda:0') cov tensor([[[ 0.0203, -0.0146,  0.0312],\n","         [-0.0146,  0.0108, -0.0229],\n","         [ 0.0312, -0.0229,  0.0487]],\n","\n","        [[ 0.0192, -0.0138,  0.0295],\n","         [-0.0138,  0.0102, -0.0216],\n","         [ 0.0295, -0.0216,  0.0459]],\n","\n","        [[ 0.0194, -0.0140,  0.0297],\n","         [-0.0140,  0.0103, -0.0218],\n","         [ 0.0297, -0.0218,  0.0463]],\n","\n","        [[ 0.0200, -0.0144,  0.0307],\n","         [-0.0144,  0.0106, -0.0225],\n","         [ 0.0307, -0.0225,  0.0479]]], device='cuda:0')\n","phi tensor([0.3039, 0.3289, 0.1745, 0.1927], device='cuda:0') mu tensor([[0.4363, 1.0028, 0.2146],\n","        [0.4432, 0.9977, 0.2253],\n","        [0.4423, 0.9985, 0.2235],\n","        [0.4371, 1.0023, 0.2156]], device='cuda:0') cov tensor([[[ 0.0215, -0.0155,  0.0329],\n","         [-0.0155,  0.0113, -0.0240],\n","         [ 0.0329, -0.0240,  0.0509]],\n","\n","        [[ 0.0204, -0.0147,  0.0312],\n","         [-0.0147,  0.0107, -0.0227],\n","         [ 0.0312, -0.0227,  0.0482]],\n","\n","        [[ 0.0206, -0.0148,  0.0314],\n","         [-0.0148,  0.0108, -0.0229],\n","         [ 0.0314, -0.0229,  0.0488]],\n","\n","        [[ 0.0214, -0.0154,  0.0327],\n","         [-0.0154,  0.0112, -0.0238],\n","         [ 0.0327, -0.0238,  0.0507]]], device='cuda:0')\n"]},{"output_type":"stream","name":"stderr","text":["\r 33%|███▎      | 64/194 [00:01<00:03, 37.98it/s]"]},{"output_type":"stream","name":"stdout","text":["phi tensor([0.3019, 0.3269, 0.1742, 0.1970], device='cuda:0') mu tensor([[0.4322, 1.0066, 0.2064],\n","        [0.4394, 1.0013, 0.2177],\n","        [0.4389, 1.0017, 0.2168],\n","        [0.4368, 1.0033, 0.2134]], device='cuda:0') cov tensor([[[ 0.0233, -0.0168,  0.0358],\n","         [-0.0168,  0.0123, -0.0261],\n","         [ 0.0358, -0.0261,  0.0557]],\n","\n","        [[ 0.0222, -0.0160,  0.0340],\n","         [-0.0160,  0.0117, -0.0248],\n","         [ 0.0340, -0.0248,  0.0528]],\n","\n","        [[ 0.0223, -0.0161,  0.0342],\n","         [-0.0161,  0.0117, -0.0249],\n","         [ 0.0342, -0.0249,  0.0531]],\n","\n","        [[ 0.0226, -0.0163,  0.0347],\n","         [-0.0163,  0.0119, -0.0253],\n","         [ 0.0347, -0.0253,  0.0540]]], device='cuda:0')\n","phi tensor([0.3016, 0.3261, 0.1740, 0.1982], device='cuda:0') mu tensor([[0.4411, 1.0003, 0.2204],\n","        [0.4491, 0.9945, 0.2328],\n","        [0.4458, 0.9969, 0.2277],\n","        [0.4410, 1.0002, 0.2206]], device='cuda:0') cov tensor([[[ 0.0231, -0.0165,  0.0352],\n","         [-0.0165,  0.0120, -0.0256],\n","         [ 0.0352, -0.0256,  0.0545]],\n","\n","        [[ 0.0218, -0.0156,  0.0332],\n","         [-0.0156,  0.0113, -0.0241],\n","         [ 0.0332, -0.0241,  0.0513]],\n","\n","        [[ 0.0223, -0.0160,  0.0340],\n","         [-0.0160,  0.0116, -0.0247],\n","         [ 0.0340, -0.0247,  0.0526]],\n","\n","        [[ 0.0230, -0.0165,  0.0350],\n","         [-0.0165,  0.0120, -0.0254],\n","         [ 0.0350, -0.0254,  0.0542]]], device='cuda:0')\n"]},{"output_type":"stream","name":"stderr","text":["\r 35%|███▌      | 68/194 [00:01<00:03, 37.40it/s]"]},{"output_type":"stream","name":"stdout","text":["phi tensor([0.3028, 0.3286, 0.1751, 0.1934], device='cuda:0') mu tensor([[0.4429, 1.0003, 0.2204],\n","        [0.4505, 0.9947, 0.2322],\n","        [0.4487, 0.9961, 0.2293],\n","        [0.4456, 0.9984, 0.2244]], device='cuda:0') cov tensor([[[ 0.0245, -0.0177,  0.0378],\n","         [-0.0177,  0.0129, -0.0276],\n","         [ 0.0378, -0.0276,  0.0587]],\n","\n","        [[ 0.0232, -0.0168,  0.0358],\n","         [-0.0168,  0.0123, -0.0261],\n","         [ 0.0358, -0.0261,  0.0556]],\n","\n","        [[ 0.0235, -0.0170,  0.0362],\n","         [-0.0170,  0.0124, -0.0264],\n","         [ 0.0362, -0.0264,  0.0563]],\n","\n","        [[ 0.0241, -0.0174,  0.0371],\n","         [-0.0174,  0.0127, -0.0271],\n","         [ 0.0371, -0.0271,  0.0577]]], device='cuda:0')\n","phi tensor([0.3028, 0.3295, 0.1736, 0.1941], device='cuda:0') mu tensor([[0.4429, 1.0004, 0.2205],\n","        [0.4521, 0.9937, 0.2348],\n","        [0.4495, 0.9956, 0.2307],\n","        [0.4443, 0.9994, 0.2225]], device='cuda:0') cov tensor([[[ 0.0256, -0.0184,  0.0393],\n","         [-0.0184,  0.0134, -0.0285],\n","         [ 0.0393, -0.0285,  0.0607]],\n","\n","        [[ 0.0241, -0.0173,  0.0369],\n","         [-0.0173,  0.0125, -0.0267],\n","         [ 0.0369, -0.0267,  0.0570]],\n","\n","        [[ 0.0245, -0.0176,  0.0376],\n","         [-0.0176,  0.0128, -0.0272],\n","         [ 0.0376, -0.0272,  0.0581]],\n","\n","        [[ 0.0255, -0.0183,  0.0391],\n","         [-0.0183,  0.0133, -0.0283],\n","         [ 0.0391, -0.0283,  0.0604]]], device='cuda:0')\n","phi tensor([0.3016, 0.3287, 0.1745, 0.1952], device='cuda:0') mu tensor([[0.4423, 1.0012, 0.2191],\n","        [0.4513, 0.9947, 0.2330],\n","        [0.4490, 0.9964, 0.2293],\n","        [0.4426, 1.0010, 0.2195]], device='cuda:0') cov tensor([[[ 0.0269, -0.0194,  0.0413],\n","         [-0.0194,  0.0140, -0.0299],\n","         [ 0.0413, -0.0299,  0.0638]],\n","\n","        [[ 0.0255, -0.0183,  0.0390],\n","         [-0.0183,  0.0133, -0.0282],\n","         [ 0.0390, -0.0282,  0.0602]],\n","\n","        [[ 0.0259, -0.0186,  0.0396],\n","         [-0.0186,  0.0135, -0.0287],\n","         [ 0.0396, -0.0287,  0.0612]],\n","\n","        [[ 0.0270, -0.0194,  0.0413],\n","         [-0.0194,  0.0141, -0.0299],\n","         [ 0.0413, -0.0299,  0.0639]]], device='cuda:0')\n","phi tensor([0.3027, 0.3300, 0.1745, 0.1928], device='cuda:0') mu tensor([[0.4493, 0.9971, 0.2283],\n","        [0.4587, 0.9903, 0.2428],\n","        [0.4578, 0.9909, 0.2414],\n","        [0.4529, 0.9944, 0.2338]], device='cuda:0') cov tensor([[[ 0.0269, -0.0193,  0.0411],\n","         [-0.0193,  0.0140, -0.0298],\n","         [ 0.0411, -0.0298,  0.0634]],\n","\n","        [[ 0.0252, -0.0181,  0.0386],\n","         [-0.0181,  0.0131, -0.0279],\n","         [ 0.0386, -0.0279,  0.0595]],\n","\n","        [[ 0.0255, -0.0183,  0.0389],\n","         [-0.0183,  0.0132, -0.0282],\n","         [ 0.0389, -0.0282,  0.0600]],\n","\n","        [[ 0.0265, -0.0190,  0.0405],\n","         [-0.0190,  0.0137, -0.0293],\n","         [ 0.0405, -0.0293,  0.0625]]], device='cuda:0')\n","phi tensor([0.3012, 0.3299, 0.1744, 0.1945], device='cuda:0') mu tensor([[0.4452, 1.0001, 0.2217],\n","        [0.4542, 0.9936, 0.2355],\n","        [0.4504, 0.9965, 0.2295],\n","        [0.4458, 0.9998, 0.2224]], device='cuda:0') cov tensor([[[ 0.0290, -0.0208,  0.0443],\n","         [-0.0208,  0.0150, -0.0319],\n","         [ 0.0443, -0.0319,  0.0681]],\n","\n","        [[ 0.0275, -0.0197,  0.0419],\n","         [-0.0197,  0.0142, -0.0302],\n","         [ 0.0419, -0.0302,  0.0644]],\n","\n","        [[ 0.0282, -0.0202,  0.0430],\n","         [-0.0202,  0.0146, -0.0310],\n","         [ 0.0430, -0.0310,  0.0662]],\n","\n","        [[ 0.0289, -0.0207,  0.0441],\n","         [-0.0207,  0.0149, -0.0318],\n","         [ 0.0441, -0.0318,  0.0679]]], device='cuda:0')\n","phi tensor([0.3020, 0.3313, 0.1732, 0.1934], device='cuda:0') mu tensor([[0.4425, 1.0022, 0.2178],\n","        [0.4531, 0.9945, 0.2342],\n","        [0.4496, 0.9970, 0.2289],\n","        [0.4446, 1.0006, 0.2211]], device='cuda:0') cov tensor([[[ 0.0310, -0.0221,  0.0472],\n","         [-0.0221,  0.0159, -0.0339],\n","         [ 0.0472, -0.0339,  0.0723]],\n","\n","        [[ 0.0293, -0.0209,  0.0445],\n","         [-0.0209,  0.0150, -0.0319],\n","         [ 0.0445, -0.0319,  0.0680]],\n","\n","        [[ 0.0298, -0.0213,  0.0453],\n","         [-0.0213,  0.0153, -0.0325],\n","         [ 0.0453, -0.0325,  0.0694]],\n","\n","        [[ 0.0306, -0.0219,  0.0466],\n","         [-0.0219,  0.0157, -0.0335],\n","         [ 0.0466, -0.0335,  0.0714]]], device='cuda:0')\n"]},{"output_type":"stream","name":"stderr","text":["\r 37%|███▋      | 72/194 [00:01<00:03, 37.72it/s]"]},{"output_type":"stream","name":"stdout","text":["phi tensor([0.3015, 0.3302, 0.1745, 0.1937], device='cuda:0') mu tensor([[0.4531, 0.9952, 0.2331],\n","        [0.4625, 0.9884, 0.2476],\n","        [0.4599, 0.9903, 0.2435],\n","        [0.4531, 0.9952, 0.2331]], device='cuda:0') cov tensor([[[ 0.0302, -0.0215,  0.0459],\n","         [-0.0215,  0.0155, -0.0329],\n","         [ 0.0459, -0.0329,  0.0701]],\n","\n","        [[ 0.0286, -0.0204,  0.0434],\n","         [-0.0204,  0.0146, -0.0311],\n","         [ 0.0434, -0.0311,  0.0662]],\n","\n","        [[ 0.0291, -0.0207,  0.0441],\n","         [-0.0207,  0.0149, -0.0316],\n","         [ 0.0441, -0.0316,  0.0674]],\n","\n","        [[ 0.0302, -0.0215,  0.0458],\n","         [-0.0215,  0.0154, -0.0329],\n","         [ 0.0458, -0.0329,  0.0700]]], device='cuda:0')\n","phi tensor([0.3010, 0.3291, 0.1750, 0.1949], device='cuda:0') mu tensor([[0.4580, 0.9924, 0.2393],\n","        [0.4687, 0.9847, 0.2557],\n","        [0.4646, 0.9876, 0.2496],\n","        [0.4585, 0.9920, 0.2402]], device='cuda:0') cov tensor([[[ 0.0310, -0.0221,  0.0471],\n","         [-0.0221,  0.0158, -0.0337],\n","         [ 0.0471, -0.0337,  0.0719]],\n","\n","        [[ 0.0290, -0.0207,  0.0440],\n","         [-0.0207,  0.0148, -0.0315],\n","         [ 0.0440, -0.0315,  0.0671]],\n","\n","        [[ 0.0297, -0.0212,  0.0451],\n","         [-0.0212,  0.0152, -0.0323],\n","         [ 0.0451, -0.0323,  0.0688]],\n","\n","        [[ 0.0307, -0.0219,  0.0467],\n","         [-0.0219,  0.0157, -0.0335],\n","         [ 0.0467, -0.0335,  0.0713]]], device='cuda:0')\n"]},{"output_type":"stream","name":"stderr","text":["\r 39%|███▉      | 76/194 [00:02<00:03, 37.65it/s]"]},{"output_type":"stream","name":"stdout","text":["phi tensor([0.2995, 0.3312, 0.1755, 0.1939], device='cuda:0') mu tensor([[0.4662, 0.9870, 0.2514],\n","        [0.4766, 0.9795, 0.2673],\n","        [0.4704, 0.9840, 0.2578],\n","        [0.4617, 0.9901, 0.2448]], device='cuda:0') cov tensor([[[ 0.0317, -0.0225,  0.0480],\n","         [-0.0225,  0.0161, -0.0343],\n","         [ 0.0480, -0.0343,  0.0730]],\n","\n","        [[ 0.0296, -0.0210,  0.0448],\n","         [-0.0210,  0.0150, -0.0320],\n","         [ 0.0448, -0.0320,  0.0681]],\n","\n","        [[ 0.0309, -0.0220,  0.0468],\n","         [-0.0220,  0.0157, -0.0334],\n","         [ 0.0468, -0.0334,  0.0712]],\n","\n","        [[ 0.0324, -0.0231,  0.0491],\n","         [-0.0231,  0.0165, -0.0351],\n","         [ 0.0491, -0.0351,  0.0747]]], device='cuda:0')\n","phi tensor([0.3007, 0.3305, 0.1745, 0.1943], device='cuda:0') mu tensor([[0.4553, 0.9953, 0.2344],\n","        [0.4663, 0.9874, 0.2511],\n","        [0.4625, 0.9902, 0.2452],\n","        [0.4536, 0.9965, 0.2318]], device='cuda:0') cov tensor([[[ 0.0343, -0.0244,  0.0518],\n","         [-0.0244,  0.0174, -0.0370],\n","         [ 0.0518, -0.0370,  0.0786]],\n","\n","        [[ 0.0325, -0.0230,  0.0489],\n","         [-0.0230,  0.0164, -0.0349],\n","         [ 0.0489, -0.0349,  0.0742]],\n","\n","        [[ 0.0331, -0.0235,  0.0500],\n","         [-0.0235,  0.0168, -0.0357],\n","         [ 0.0500, -0.0357,  0.0758]],\n","\n","        [[ 0.0347, -0.0246,  0.0523],\n","         [-0.0246,  0.0176, -0.0373],\n","         [ 0.0523, -0.0373,  0.0794]]], device='cuda:0')\n","phi tensor([0.3001, 0.3305, 0.1759, 0.1935], device='cuda:0') mu tensor([[0.4644, 0.9895, 0.2476],\n","        [0.4759, 0.9812, 0.2651],\n","        [0.4719, 0.9840, 0.2592],\n","        [0.4665, 0.9879, 0.2510]], device='cuda:0') cov tensor([[[ 0.0341, -0.0241,  0.0511],\n","         [-0.0241,  0.0172, -0.0364],\n","         [ 0.0511, -0.0364,  0.0773]],\n","\n","        [[ 0.0319, -0.0226,  0.0478],\n","         [-0.0226,  0.0161, -0.0341],\n","         [ 0.0478, -0.0341,  0.0722]],\n","\n","        [[ 0.0326, -0.0231,  0.0489],\n","         [-0.0231,  0.0164, -0.0348],\n","         [ 0.0489, -0.0348,  0.0739]],\n","\n","        [[ 0.0336, -0.0237,  0.0503],\n","         [-0.0237,  0.0169, -0.0358],\n","         [ 0.0503, -0.0358,  0.0760]]], device='cuda:0')\n","phi tensor([0.3005, 0.3316, 0.1753, 0.1926], device='cuda:0') mu tensor([[0.4671, 0.9872, 0.2525],\n","        [0.4781, 0.9794, 0.2691],\n","        [0.4730, 0.9830, 0.2614],\n","        [0.4678, 0.9869, 0.2532]], device='cuda:0') cov tensor([[[ 0.0356, -0.0252,  0.0534],\n","         [-0.0252,  0.0178, -0.0379],\n","         [ 0.0534, -0.0379,  0.0804]],\n","\n","        [[ 0.0335, -0.0236,  0.0501],\n","         [-0.0236,  0.0167, -0.0355],\n","         [ 0.0501, -0.0355,  0.0754]],\n","\n","        [[ 0.0345, -0.0244,  0.0517],\n","         [-0.0244,  0.0173, -0.0366],\n","         [ 0.0517, -0.0366,  0.0777]],\n","\n","        [[ 0.0355, -0.0251,  0.0533],\n","         [-0.0251,  0.0178, -0.0378],\n","         [ 0.0533, -0.0378,  0.0803]]], device='cuda:0')\n","phi tensor([0.2996, 0.3309, 0.1745, 0.1950], device='cuda:0') mu tensor([[0.4629, 0.9915, 0.2437],\n","        [0.4753, 0.9826, 0.2624],\n","        [0.4708, 0.9859, 0.2555],\n","        [0.4655, 0.9897, 0.2475]], device='cuda:0') cov tensor([[[ 0.0379, -0.0268,  0.0569],\n","         [-0.0268,  0.0191, -0.0405],\n","         [ 0.0569, -0.0405,  0.0859]],\n","\n","        [[ 0.0356, -0.0252,  0.0535],\n","         [-0.0252,  0.0179, -0.0380],\n","         [ 0.0535, -0.0380,  0.0807]],\n","\n","        [[ 0.0365, -0.0259,  0.0549],\n","         [-0.0259,  0.0184, -0.0390],\n","         [ 0.0549, -0.0390,  0.0828]],\n","\n","        [[ 0.0375, -0.0266,  0.0564],\n","         [-0.0266,  0.0189, -0.0401],\n","         [ 0.0564, -0.0401,  0.0851]]], device='cuda:0')\n","phi tensor([0.2999, 0.3313, 0.1755, 0.1933], device='cuda:0') mu tensor([[0.4688, 0.9877, 0.2521],\n","        [0.4822, 0.9782, 0.2724],\n","        [0.4776, 0.9816, 0.2651],\n","        [0.4700, 0.9870, 0.2536]], device='cuda:0') cov tensor([[[ 0.0383, -0.0270,  0.0573],\n","         [-0.0270,  0.0191, -0.0405],\n","         [ 0.0573, -0.0405,  0.0860]],\n","\n","        [[ 0.0357, -0.0251,  0.0533],\n","         [-0.0251,  0.0178, -0.0377],\n","         [ 0.0533, -0.0377,  0.0800]],\n","\n","        [[ 0.0366, -0.0258,  0.0547],\n","         [-0.0258,  0.0183, -0.0387],\n","         [ 0.0547, -0.0387,  0.0822]],\n","\n","        [[ 0.0379, -0.0268,  0.0568],\n","         [-0.0268,  0.0190, -0.0402],\n","         [ 0.0568, -0.0402,  0.0853]]], device='cuda:0')\n"]},{"output_type":"stream","name":"stderr","text":["\r 41%|████      | 80/194 [00:02<00:02, 38.19it/s]"]},{"output_type":"stream","name":"stdout","text":["phi tensor([0.3003, 0.3337, 0.1749, 0.1911], device='cuda:0') mu tensor([[0.4716, 0.9866, 0.2555],\n","        [0.4854, 0.9768, 0.2761],\n","        [0.4810, 0.9798, 0.2698],\n","        [0.4743, 0.9845, 0.2598]], device='cuda:0') cov tensor([[[ 0.0393, -0.0277,  0.0586],\n","         [-0.0277,  0.0196, -0.0415],\n","         [ 0.0586, -0.0415,  0.0878]],\n","\n","        [[ 0.0365, -0.0258,  0.0545],\n","         [-0.0258,  0.0183, -0.0386],\n","         [ 0.0545, -0.0386,  0.0816]],\n","\n","        [[ 0.0374, -0.0264,  0.0559],\n","         [-0.0264,  0.0187, -0.0395],\n","         [ 0.0559, -0.0395,  0.0836]],\n","\n","        [[ 0.0387, -0.0273,  0.0577],\n","         [-0.0273,  0.0193, -0.0409],\n","         [ 0.0577, -0.0409,  0.0864]]], device='cuda:0')\n","phi tensor([0.2991, 0.3329, 0.1756, 0.1924], device='cuda:0') mu tensor([[0.4744, 0.9847, 0.2604],\n","        [0.4880, 0.9751, 0.2806],\n","        [0.4817, 0.9796, 0.2712],\n","        [0.4739, 0.9849, 0.2598]], device='cuda:0') cov tensor([[[ 0.0409, -0.0288,  0.0608],\n","         [-0.0288,  0.0203, -0.0429],\n","         [ 0.0608, -0.0429,  0.0905]],\n","\n","        [[ 0.0382, -0.0268,  0.0567],\n","         [-0.0268,  0.0189, -0.0399],\n","         [ 0.0567, -0.0399,  0.0843]],\n","\n","        [[ 0.0397, -0.0279,  0.0589],\n","         [-0.0279,  0.0197, -0.0415],\n","         [ 0.0589, -0.0415,  0.0876]],\n","\n","        [[ 0.0412, -0.0290,  0.0612],\n","         [-0.0290,  0.0204, -0.0431],\n","         [ 0.0612, -0.0431,  0.0910]]], device='cuda:0')\n"]},{"output_type":"stream","name":"stderr","text":["\r 43%|████▎     | 84/194 [00:02<00:02, 38.60it/s]"]},{"output_type":"stream","name":"stdout","text":["phi tensor([0.2991, 0.3319, 0.1754, 0.1937], device='cuda:0') mu tensor([[0.4799, 0.9820, 0.2666],\n","        [0.4927, 0.9729, 0.2857],\n","        [0.4896, 0.9752, 0.2810],\n","        [0.4797, 0.9821, 0.2663]], device='cuda:0') cov tensor([[[ 0.0417, -0.0294,  0.0619],\n","         [-0.0294,  0.0208, -0.0437],\n","         [ 0.0619, -0.0437,  0.0921]],\n","\n","        [[ 0.0390, -0.0275,  0.0580],\n","         [-0.0275,  0.0194, -0.0409],\n","         [ 0.0580, -0.0409,  0.0863]],\n","\n","        [[ 0.0395, -0.0278,  0.0587],\n","         [-0.0278,  0.0197, -0.0415],\n","         [ 0.0587, -0.0415,  0.0874]],\n","\n","        [[ 0.0416, -0.0293,  0.0617],\n","         [-0.0293,  0.0207, -0.0436],\n","         [ 0.0617, -0.0436,  0.0919]]], device='cuda:0')\n","phi tensor([0.2982, 0.3336, 0.1759, 0.1923], device='cuda:0') mu tensor([[0.4851, 0.9783, 0.2750],\n","        [0.4979, 0.9694, 0.2938],\n","        [0.4924, 0.9733, 0.2856],\n","        [0.4823, 0.9803, 0.2708]], device='cuda:0') cov tensor([[[ 0.0416, -0.0292,  0.0614],\n","         [-0.0292,  0.0205, -0.0432],\n","         [ 0.0614, -0.0432,  0.0909]],\n","\n","        [[ 0.0389, -0.0273,  0.0574],\n","         [-0.0273,  0.0192, -0.0403],\n","         [ 0.0574, -0.0403,  0.0849]],\n","\n","        [[ 0.0402, -0.0282,  0.0593],\n","         [-0.0282,  0.0198, -0.0417],\n","         [ 0.0593, -0.0417,  0.0876]],\n","\n","        [[ 0.0424, -0.0297,  0.0625],\n","         [-0.0297,  0.0209, -0.0439],\n","         [ 0.0625, -0.0439,  0.0924]]], device='cuda:0')\n","phi tensor([0.3004, 0.3354, 0.1737, 0.1906], device='cuda:0') mu tensor([[0.4818, 0.9813, 0.2695],\n","        [0.4960, 0.9713, 0.2904],\n","        [0.4941, 0.9728, 0.2874],\n","        [0.4854, 0.9789, 0.2744]], device='cuda:0') cov tensor([[[ 0.0447, -0.0313,  0.0659],\n","         [-0.0313,  0.0220, -0.0463],\n","         [ 0.0659, -0.0463,  0.0974]],\n","\n","        [[ 0.0417, -0.0293,  0.0615],\n","         [-0.0293,  0.0206, -0.0432],\n","         [ 0.0615, -0.0432,  0.0909]],\n","\n","        [[ 0.0423, -0.0296,  0.0623],\n","         [-0.0296,  0.0209, -0.0438],\n","         [ 0.0623, -0.0438,  0.0922]],\n","\n","        [[ 0.0441, -0.0310,  0.0651],\n","         [-0.0310,  0.0218, -0.0458],\n","         [ 0.0651, -0.0458,  0.0963]]], device='cuda:0')\n","phi tensor([0.2992, 0.3336, 0.1747, 0.1925], device='cuda:0') mu tensor([[0.4887, 0.9770, 0.2789],\n","        [0.5021, 0.9676, 0.2987],\n","        [0.5001, 0.9690, 0.2957],\n","        [0.4917, 0.9749, 0.2833]], device='cuda:0') cov tensor([[[ 0.0454, -0.0318,  0.0668],\n","         [-0.0318,  0.0224, -0.0470],\n","         [ 0.0668, -0.0470,  0.0985]],\n","\n","        [[ 0.0424, -0.0298,  0.0625],\n","         [-0.0298,  0.0209, -0.0439],\n","         [ 0.0625, -0.0439,  0.0921]],\n","\n","        [[ 0.0430, -0.0301,  0.0633],\n","         [-0.0301,  0.0212, -0.0444],\n","         [ 0.0633, -0.0444,  0.0933]],\n","\n","        [[ 0.0448, -0.0314,  0.0660],\n","         [-0.0314,  0.0221, -0.0464],\n","         [ 0.0660, -0.0464,  0.0973]]], device='cuda:0')\n","phi tensor([0.2997, 0.3361, 0.1734, 0.1908], device='cuda:0') mu tensor([[0.4850, 0.9807, 0.2722],\n","        [0.5001, 0.9700, 0.2946],\n","        [0.4953, 0.9734, 0.2875],\n","        [0.4873, 0.9791, 0.2756]], device='cuda:0') cov tensor([[[ 0.0476, -0.0333,  0.0698],\n","         [-0.0333,  0.0234, -0.0490],\n","         [ 0.0698, -0.0490,  0.1025]],\n","\n","        [[ 0.0444, -0.0311,  0.0651],\n","         [-0.0311,  0.0218, -0.0457],\n","         [ 0.0651, -0.0457,  0.0956]],\n","\n","        [[ 0.0456, -0.0319,  0.0668],\n","         [-0.0319,  0.0224, -0.0469],\n","         [ 0.0668, -0.0469,  0.0981]],\n","\n","        [[ 0.0472, -0.0330,  0.0692],\n","         [-0.0330,  0.0232, -0.0485],\n","         [ 0.0692, -0.0485,  0.1016]]], device='cuda:0')\n","phi tensor([0.2983, 0.3340, 0.1749, 0.1928], device='cuda:0') mu tensor([[0.4983, 0.9719, 0.2915],\n","        [0.5119, 0.9623, 0.3115],\n","        [0.5073, 0.9655, 0.3047],\n","        [0.5007, 0.9701, 0.2951]], device='cuda:0') cov tensor([[[ 0.0464, -0.0324,  0.0677],\n","         [-0.0324,  0.0228, -0.0475],\n","         [ 0.0677, -0.0475,  0.0992]],\n","\n","        [[ 0.0432, -0.0302,  0.0631],\n","         [-0.0302,  0.0212, -0.0443],\n","         [ 0.0631, -0.0443,  0.0925]],\n","\n","        [[ 0.0442, -0.0310,  0.0647],\n","         [-0.0310,  0.0217, -0.0453],\n","         [ 0.0647, -0.0453,  0.0947]],\n","\n","        [[ 0.0457, -0.0320,  0.0668],\n","         [-0.0320,  0.0224, -0.0468],\n","         [ 0.0668, -0.0468,  0.0977]]], device='cuda:0')\n","phi "]},{"output_type":"stream","name":"stderr","text":["\r 45%|████▌     | 88/194 [00:02<00:02, 38.59it/s]"]},{"output_type":"stream","name":"stdout","text":["tensor([0.2983, 0.3370, 0.1749, 0.1899], device='cuda:0') mu tensor([[0.4968, 0.9740, 0.2881],\n","        [0.5123, 0.9631, 0.3108],\n","        [0.5031, 0.9696, 0.2972],\n","        [0.4907, 0.9782, 0.2793]], device='cuda:0') cov tensor([[[ 0.0493, -0.0344,  0.0717],\n","         [-0.0344,  0.0241, -0.0501],\n","         [ 0.0717, -0.0501,  0.1045]],\n","\n","        [[ 0.0457, -0.0319,  0.0666],\n","         [-0.0319,  0.0224, -0.0466],\n","         [ 0.0666, -0.0466,  0.0971]],\n","\n","        [[ 0.0481, -0.0336,  0.0699],\n","         [-0.0336,  0.0235, -0.0490],\n","         [ 0.0699, -0.0490,  0.1020]],\n","\n","        [[ 0.0508, -0.0354,  0.0739],\n","         [-0.0354,  0.0248, -0.0517],\n","         [ 0.0739, -0.0517,  0.1077]]], device='cuda:0')\n","phi tensor([0.2965, 0.3363, 0.1757, 0.1915], device='cuda:0') mu tensor([[0.5075, 0.9667, 0.3034],\n","        [0.5226, 0.9561, 0.3255],\n","        [0.5163, 0.9606, 0.3162],\n","        [0.5087, 0.9659, 0.3052]], device='cuda:0') cov tensor([[[ 0.0490, -0.0342,  0.0711],\n","         [-0.0342,  0.0238, -0.0496],\n","         [ 0.0711, -0.0496,  0.1034]],\n","\n","        [[ 0.0452, -0.0315,  0.0656],\n","         [-0.0315,  0.0220, -0.0458],\n","         [ 0.0656, -0.0458,  0.0954]],\n","\n","        [[ 0.0469, -0.0327,  0.0680],\n","         [-0.0327,  0.0228, -0.0475],\n","         [ 0.0680, -0.0475,  0.0989]],\n","\n","        [[ 0.0488, -0.0340,  0.0708],\n","         [-0.0340,  0.0238, -0.0495],\n","         [ 0.0708, -0.0495,  0.1029]]], device='cuda:0')\n"]},{"output_type":"stream","name":"stderr","text":["\r 47%|████▋     | 92/194 [00:02<00:02, 38.13it/s]"]},{"output_type":"stream","name":"stdout","text":["phi tensor([0.2969, 0.3343, 0.1753, 0.1936], device='cuda:0') mu tensor([[0.5014, 0.9714, 0.2949],\n","        [0.5161, 0.9611, 0.3161],\n","        [0.5098, 0.9655, 0.3071],\n","        [0.5017, 0.9711, 0.2953]], device='cuda:0') cov tensor([[[ 0.0530, -0.0368,  0.0764],\n","         [-0.0368,  0.0256, -0.0532],\n","         [ 0.0764, -0.0532,  0.1103]],\n","\n","        [[ 0.0496, -0.0345,  0.0715],\n","         [-0.0345,  0.0240, -0.0498],\n","         [ 0.0715, -0.0498,  0.1033]],\n","\n","        [[ 0.0511, -0.0355,  0.0736],\n","         [-0.0355,  0.0247, -0.0512],\n","         [ 0.0736, -0.0512,  0.1062]],\n","\n","        [[ 0.0528, -0.0367,  0.0761],\n","         [-0.0367,  0.0255, -0.0529],\n","         [ 0.0761, -0.0529,  0.1098]]], device='cuda:0')\n","phi tensor([0.2979, 0.3379, 0.1750, 0.1892], device='cuda:0') mu tensor([[0.5133, 0.9640, 0.3110],\n","        [0.5287, 0.9533, 0.3332],\n","        [0.5237, 0.9568, 0.3259],\n","        [0.5147, 0.9630, 0.3131]], device='cuda:0') cov tensor([[[ 0.0514, -0.0357,  0.0739],\n","         [-0.0357,  0.0249, -0.0515],\n","         [ 0.0739, -0.0515,  0.1065]],\n","\n","        [[ 0.0475, -0.0330,  0.0683],\n","         [-0.0330,  0.0230, -0.0476],\n","         [ 0.0683, -0.0476,  0.0985]],\n","\n","        [[ 0.0487, -0.0339,  0.0700],\n","         [-0.0339,  0.0236, -0.0488],\n","         [ 0.0700, -0.0488,  0.1010]],\n","\n","        [[ 0.0508, -0.0353,  0.0731],\n","         [-0.0353,  0.0246, -0.0509],\n","         [ 0.0731, -0.0509,  0.1054]]], device='cuda:0')\n","phi tensor([0.2974, 0.3367, 0.1747, 0.1911], device='cuda:0') mu tensor([[0.5046, 0.9710, 0.2975],\n","        [0.5206, 0.9599, 0.3205],\n","        [0.5163, 0.9629, 0.3143],\n","        [0.5071, 0.9693, 0.3009]], device='cuda:0') cov tensor([[[ 0.0570, -0.0395,  0.0815],\n","         [-0.0395,  0.0275, -0.0566],\n","         [ 0.0815, -0.0566,  0.1168]],\n","\n","        [[ 0.0532, -0.0369,  0.0762],\n","         [-0.0369,  0.0257, -0.0529],\n","         [ 0.0762, -0.0529,  0.1091]],\n","\n","        [[ 0.0541, -0.0376,  0.0775],\n","         [-0.0376,  0.0261, -0.0538],\n","         [ 0.0775, -0.0538,  0.1110]],\n","\n","        [[ 0.0564, -0.0391,  0.0806],\n","         [-0.0391,  0.0272, -0.0560],\n","         [ 0.0806, -0.0560,  0.1156]]], device='cuda:0')\n","phi tensor([0.2967, 0.3353, 0.1755, 0.1925], device='cuda:0') mu tensor([[0.5001, 0.9745, 0.2910],\n","        [0.5166, 0.9631, 0.3146],\n","        [0.5077, 0.9693, 0.3019],\n","        [0.4969, 0.9767, 0.2865]], device='cuda:0') cov tensor([[[ 0.0601, -0.0416,  0.0855],\n","         [-0.0416,  0.0288, -0.0592],\n","         [ 0.0855, -0.0592,  0.1218]],\n","\n","        [[ 0.0564, -0.0390,  0.0803],\n","         [-0.0390,  0.0270, -0.0556],\n","         [ 0.0803, -0.0556,  0.1143]],\n","\n","        [[ 0.0586, -0.0405,  0.0834],\n","         [-0.0405,  0.0281, -0.0577],\n","         [ 0.0834, -0.0577,  0.1187]],\n","\n","        [[ 0.0612, -0.0423,  0.0870],\n","         [-0.0423,  0.0293, -0.0602],\n","         [ 0.0870, -0.0602,  0.1238]]], device='cuda:0')\n","phi tensor([0.2969, 0.3412, 0.1742, 0.1877], device='cuda:0') mu tensor([[0.5305, 0.9544, 0.3334],\n","        [0.5472, 0.9428, 0.3571],\n","        [0.5397, 0.9482, 0.3463],\n","        [0.5284, 0.9560, 0.3303]], device='cuda:0') cov tensor([[[ 0.0560, -0.0387,  0.0792],\n","         [-0.0387,  0.0267, -0.0548],\n","         [ 0.0792, -0.0548,  0.1123]],\n","\n","        [[ 0.0512, -0.0354,  0.0725],\n","         [-0.0354,  0.0245, -0.0501],\n","         [ 0.0725, -0.0501,  0.1028]],\n","\n","        [[ 0.0533, -0.0368,  0.0754],\n","         [-0.0368,  0.0255, -0.0522],\n","         [ 0.0754, -0.0522,  0.1070]],\n","\n","        [[ 0.0563, -0.0389,  0.0798],\n","         [-0.0389,  0.0269, -0.0552],\n","         [ 0.0798, -0.0552,  0.1131]]], device='cuda:0')\n","phi tensor([0.2975, 0.3390, 0.1743, 0.1892], device='cuda:0') mu tensor([[0.5186, 0.9637, 0.3147],\n","        [0.5361, 0.9516, 0.3395],\n","        [0.5293, 0.9563, 0.3298],\n","        [0.5205, 0.9623, 0.3175]], device='cuda:0') cov tensor([[[ 0.0591, -0.0408,  0.0836],\n","         [-0.0408,  0.0282, -0.0577],\n","         [ 0.0836, -0.0577,  0.1183]],\n","\n","        [[ 0.0547, -0.0378,  0.0774],\n","         [-0.0378,  0.0261, -0.0535],\n","         [ 0.0774, -0.0535,  0.1096]],\n","\n","        [[ 0.0565, -0.0390,  0.0799],\n","         [-0.0390,  0.0270, -0.0552],\n","         [ 0.0799, -0.0552,  0.1132]],\n","\n","        [[ 0.0586, -0.0405,  0.0829],\n","         [-0.0405,  0.0279, -0.0572],\n","         [ 0.0829, -0.0572,  0.1173]]], device='cuda:0')\n","phi "]},{"output_type":"stream","name":"stderr","text":["\r 50%|█████     | 97/194 [00:02<00:02, 39.05it/s]"]},{"output_type":"stream","name":"stdout","text":["tensor([0.2979, 0.3372, 0.1731, 0.1918], device='cuda:0') mu tensor([[0.4998, 0.9776, 0.2878],\n","        [0.5182, 0.9649, 0.3137],\n","        [0.5123, 0.9689, 0.3054],\n","        [0.5029, 0.9753, 0.2923]], device='cuda:0') cov tensor([[[ 0.0657, -0.0453,  0.0923],\n","         [-0.0453,  0.0313, -0.0637],\n","         [ 0.0923, -0.0637,  0.1299]],\n","\n","        [[ 0.0616, -0.0425,  0.0865],\n","         [-0.0425,  0.0293, -0.0598],\n","         [ 0.0865, -0.0598,  0.1219]],\n","\n","        [[ 0.0633, -0.0436,  0.0889],\n","         [-0.0436,  0.0301, -0.0614],\n","         [ 0.0889, -0.0614,  0.1251]],\n","\n","        [[ 0.0654, -0.0451,  0.0919],\n","         [-0.0451,  0.0312, -0.0635],\n","         [ 0.0919, -0.0635,  0.1294]]], device='cuda:0')\n","phi tensor([0.2980, 0.3394, 0.1740, 0.1886], device='cuda:0') mu tensor([[0.5115, 0.9700, 0.3042],\n","        [0.5317, 0.9561, 0.3325],\n","        [0.5235, 0.9617, 0.3210],\n","        [0.5141, 0.9681, 0.3080]], device='cuda:0') cov tensor([[[ 0.0657, -0.0452,  0.0919],\n","         [-0.0452,  0.0311, -0.0633],\n","         [ 0.0919, -0.0633,  0.1286]],\n","\n","        [[ 0.0608, -0.0418,  0.0850],\n","         [-0.0418,  0.0288, -0.0586],\n","         [ 0.0850, -0.0586,  0.1191]],\n","\n","        [[ 0.0630, -0.0434,  0.0881],\n","         [-0.0434,  0.0298, -0.0607],\n","         [ 0.0881, -0.0607,  0.1233]],\n","\n","        [[ 0.0653, -0.0449,  0.0913],\n","         [-0.0449,  0.0309, -0.0628],\n","         [ 0.0913, -0.0628,  0.1277]]], device='cuda:0')\n","phi tensor([0.2965, 0.3378, 0.1758, 0.1899], device='cuda:0') mu tensor([[0.5284, 0.9596, 0.3265],\n","        [0.5463, 0.9472, 0.3515],\n","        [0.5346, 0.9552, 0.3353],\n","        [0.5215, 0.9641, 0.3172]], device='cuda:0') cov tensor([[[ 0.0644, -0.0442,  0.0895],\n","         [-0.0442,  0.0304, -0.0616],\n","         [ 0.0895, -0.0616,  0.1247]],\n","\n","        [[ 0.0596, -0.0410,  0.0829],\n","         [-0.0410,  0.0282, -0.0571],\n","         [ 0.0829, -0.0571,  0.1156]],\n","\n","        [[ 0.0630, -0.0433,  0.0877],\n","         [-0.0433,  0.0298, -0.0603],\n","         [ 0.0877, -0.0603,  0.1221]],\n","\n","        [[ 0.0663, -0.0455,  0.0922],\n","         [-0.0455,  0.0313, -0.0634],\n","         [ 0.0922, -0.0634,  0.1283]]], device='cuda:0')\n"]},{"output_type":"stream","name":"stderr","text":["\r 53%|█████▎    | 102/194 [00:02<00:02, 39.57it/s]"]},{"output_type":"stream","name":"stdout","text":["phi tensor([0.2961, 0.3381, 0.1750, 0.1907], device='cuda:0') mu tensor([[0.5287, 0.9594, 0.3276],\n","        [0.5472, 0.9466, 0.3533],\n","        [0.5416, 0.9505, 0.3456],\n","        [0.5319, 0.9571, 0.3322]], device='cuda:0') cov tensor([[[ 0.0681, -0.0466,  0.0941],\n","         [-0.0466,  0.0320, -0.0645],\n","         [ 0.0941, -0.0645,  0.1302]],\n","\n","        [[ 0.0631, -0.0432,  0.0872],\n","         [-0.0432,  0.0296, -0.0598],\n","         [ 0.0872, -0.0598,  0.1207]],\n","\n","        [[ 0.0646, -0.0443,  0.0893],\n","         [-0.0443,  0.0303, -0.0612],\n","         [ 0.0893, -0.0612,  0.1236]],\n","\n","        [[ 0.0671, -0.0459,  0.0927],\n","         [-0.0459,  0.0315, -0.0635],\n","         [ 0.0927, -0.0635,  0.1283]]], device='cuda:0')\n","phi tensor([0.2955, 0.3397, 0.1750, 0.1898], device='cuda:0') mu tensor([[0.5374, 0.9545, 0.3381],\n","        [0.5572, 0.9410, 0.3654],\n","        [0.5468, 0.9480, 0.3512],\n","        [0.5395, 0.9529, 0.3412]], device='cuda:0') cov tensor([[[ 0.0675, -0.0462,  0.0929],\n","         [-0.0462,  0.0316, -0.0636],\n","         [ 0.0929, -0.0636,  0.1281]],\n","\n","        [[ 0.0618, -0.0423,  0.0852],\n","         [-0.0423,  0.0290, -0.0584],\n","         [ 0.0852, -0.0584,  0.1175]],\n","\n","        [[ 0.0650, -0.0444,  0.0894],\n","         [-0.0444,  0.0304, -0.0613],\n","         [ 0.0894, -0.0613,  0.1233]],\n","\n","        [[ 0.0669, -0.0458,  0.0921],\n","         [-0.0458,  0.0313, -0.0630],\n","         [ 0.0921, -0.0630,  0.1269]]], device='cuda:0')\n","phi tensor([0.2961, 0.3372, 0.1745, 0.1922], device='cuda:0') mu tensor([[0.5457, 0.9497, 0.3487],\n","        [0.5625, 0.9382, 0.3717],\n","        [0.5561, 0.9425, 0.3631],\n","        [0.5475, 0.9484, 0.3514]], device='cuda:0') cov tensor([[[ 0.0680, -0.0464,  0.0932],\n","         [-0.0464,  0.0318, -0.0637],\n","         [ 0.0932, -0.0637,  0.1278]],\n","\n","        [[ 0.0631, -0.0431,  0.0864],\n","         [-0.0431,  0.0295, -0.0591],\n","         [ 0.0864, -0.0591,  0.1186]],\n","\n","        [[ 0.0652, -0.0445,  0.0893],\n","         [-0.0445,  0.0304, -0.0610],\n","         [ 0.0893, -0.0610,  0.1225]],\n","\n","        [[ 0.0681, -0.0465,  0.0932],\n","         [-0.0465,  0.0318, -0.0637],\n","         [ 0.0932, -0.0637,  0.1278]]], device='cuda:0')\n","phi tensor([0.2948, 0.3407, 0.1750, 0.1896], device='cuda:0') mu tensor([[0.5475, 0.9492, 0.3510],\n","        [0.5669, 0.9360, 0.3775],\n","        [0.5553, 0.9438, 0.3618],\n","        [0.5428, 0.9524, 0.3448]], device='cuda:0') cov tensor([[[ 0.0702, -0.0479,  0.0955],\n","         [-0.0479,  0.0327, -0.0651],\n","         [ 0.0955, -0.0651,  0.1299]],\n","\n","        [[ 0.0644, -0.0440,  0.0877],\n","         [-0.0440,  0.0300, -0.0598],\n","         [ 0.0877, -0.0598,  0.1193]],\n","\n","        [[ 0.0680, -0.0463,  0.0925],\n","         [-0.0463,  0.0316, -0.0631],\n","         [ 0.0925, -0.0631,  0.1258]],\n","\n","        [[ 0.0715, -0.0487,  0.0972],\n","         [-0.0487,  0.0333, -0.0663],\n","         [ 0.0972, -0.0663,  0.1323]]], device='cuda:0')\n","phi tensor([0.2964, 0.3389, 0.1746, 0.1902], device='cuda:0') mu tensor([[0.5373, 0.9572, 0.3362],\n","        [0.5579, 0.9432, 0.3641],\n","        [0.5486, 0.9495, 0.3515],\n","        [0.5399, 0.9555, 0.3396]], device='cuda:0') cov tensor([[[ 0.0767, -0.0522,  0.1038],\n","         [-0.0522,  0.0356, -0.0707],\n","         [ 0.1038, -0.0707,  0.1405]],\n","\n","        [[ 0.0707, -0.0482,  0.0957],\n","         [-0.0482,  0.0329, -0.0653],\n","         [ 0.0957, -0.0653,  0.1297]],\n","\n","        [[ 0.0736, -0.0501,  0.0996],\n","         [-0.0501,  0.0342, -0.0679],\n","         [ 0.0996, -0.0679,  0.1349]],\n","\n","        [[ 0.0762, -0.0519,  0.1031],\n","         [-0.0519,  0.0354, -0.0703],\n","         [ 0.1031, -0.0703,  0.1397]]], device='cuda:0')\n","phi tensor([0.2945, 0.3402, 0.1754, 0.1899], device='cuda:0') mu tensor([[0.5439, 0.9532, 0.3448],\n","        [0.5630, 0.9402, 0.3705],\n","        [0.5569, 0.9444, 0.3623],\n","        [0.5460, 0.9518, 0.3476]], device='cuda:0') cov tensor([[[ 0.0769, -0.0522,  0.1034],\n","         [-0.0522,  0.0355, -0.0703],\n","         [ 0.1034, -0.0703,  0.1392]],\n","\n","        [[ 0.0713, -0.0484,  0.0959],\n","         [-0.0484,  0.0329, -0.0651],\n","         [ 0.0959, -0.0651,  0.1291]],\n","\n","        [[ 0.0731, -0.0496,  0.0983],\n","         [-0.0496,  0.0337, -0.0668],\n","         [ 0.0983, -0.0668,  0.1324]],\n","\n","        [[ 0.0763, -0.0518,  0.1026],\n","         [-0.0518,  0.0352, -0.0697],\n","         [ 0.1026, -0.0697,  0.1381]]], device='cuda:0')\n","phi tensor([0.2951, 0.3404, 0.1746, 0.1899], device='cuda:0') mu tensor([[0.5331, 0.9615, 0.3292],\n","        [0.5543, 0.9471, 0.3577],\n","        [0.5436, 0.9544, 0.3433],\n","        [0.5309, 0.9630, 0.3263]], device='cuda:0') cov tensor([[[ 0.0827, -0.0562,  0.1107],\n","         [-0.0562,  0.0382, -0.0752],\n","         [ 0.1107, -0.0752,  0.1483]],\n","\n","        [[ 0.0769, -0.0522,  0.1030],\n","         [-0.0522,  0.0355, -0.0700],\n","         [ 0.1030, -0.0700,  0.1380]],\n","\n","        [[ 0.0799, -0.0543,  0.1070],\n","         [-0.0543,  0.0369, -0.0728],\n","         [ 0.1070, -0.0728,  0.1435]],\n","\n","        [[ 0.0832, -0.0565,  0.1114],\n","         [-0.0565,  0.0384, -0.0757],\n","         [ 0.1114, -0.0757,  0.1493]]], device='cuda:0')\n","phi tensor([0.2964, 0.3413, 0.1740, 0.1883], device='cuda:0') mu tensor([[0.5338, 0.9618, 0.3297],\n","        [0.5555, 0.9471, 0.3586],\n","        [0.5470, 0.9528, 0.3472],\n","        [0.5359, 0.9603, 0.3325]], device='cuda:0') cov tensor([[[ 0.0839, -0.0570,  0.1118],\n","         [-0.0570,  0.0387, -0.0760],\n","         [ 0.1118, -0.0760,  0.1493]],\n","\n","        [[ 0.0782, -0.0531,  0.1042],\n","         [-0.0531,  0.0361, -0.0709],\n","         [ 0.1042, -0.0709,  0.1391]],\n","\n","        [[ 0.0805, -0.0546,  0.1073],\n","         [-0.0546,  0.0371, -0.0729],\n","         [ 0.1073, -0.0729,  0.1433]],\n","\n","        [[ 0.0836, -0.0568,  0.1115],\n","         [-0.0568,  0.0386, -0.0758],\n","         [ 0.1115, -0.0758,  0.1489]]], device='cuda:0')\n"]},{"output_type":"stream","name":"stderr","text":[" 57%|█████▋    | 111/194 [00:02<00:02, 38.73it/s]"]},{"output_type":"stream","name":"stdout","text":["phi tensor([0.2963, 0.3417, 0.1758, 0.1861], device='cuda:0') mu tensor([[0.5423, 0.9566, 0.3407],\n","        [0.5638, 0.9420, 0.3693],\n","        [0.5583, 0.9458, 0.3620],\n","        [0.5468, 0.9536, 0.3466]], device='cuda:0') cov tensor([[[ 0.0851, -0.0577,  0.1128],\n","         [-0.0577,  0.0391, -0.0765],\n","         [ 0.1128, -0.0765,  0.1496]],\n","\n","        [[ 0.0791, -0.0536,  0.1048],\n","         [-0.0536,  0.0363, -0.0710],\n","         [ 0.1048, -0.0710,  0.1389]],\n","\n","        [[ 0.0808, -0.0548,  0.1071],\n","         [-0.0548,  0.0372, -0.0726],\n","         [ 0.1071, -0.0726,  0.1420]],\n","\n","        [[ 0.0840, -0.0569,  0.1113],\n","         [-0.0569,  0.0386, -0.0754],\n","         [ 0.1113, -0.0754,  0.1475]]], device='cuda:0')\n","phi tensor([0.2955, 0.3424, 0.1748, 0.1873], device='cuda:0') mu tensor([[0.5453, 0.9556, 0.3439],\n","        [0.5665, 0.9413, 0.3718],\n","        [0.5587, 0.9466, 0.3615],\n","        [0.5431, 0.9572, 0.3409]], device='cuda:0') cov tensor([[[ 0.0865, -0.0586,  0.1140],\n","         [-0.0586,  0.0398, -0.0773],\n","         [ 0.1140, -0.0773,  0.1504]],\n","\n","        [[ 0.0805, -0.0545,  0.1061],\n","         [-0.0545,  0.0370, -0.0719],\n","         [ 0.1061, -0.0719,  0.1399]],\n","\n","        [[ 0.0830, -0.0562,  0.1093],\n","         [-0.0562,  0.0381, -0.0741],\n","         [ 0.1093, -0.0741,  0.1442]],\n","\n","        [[ 0.0872, -0.0591,  0.1150],\n","         [-0.0591,  0.0401, -0.0779],\n","         [ 0.1150, -0.0779,  0.1516]]], device='cuda:0')\n","phi tensor([0.2947, 0.3435, 0.1744, 0.1873], device='cuda:0') mu tensor([[0.5513, 0.9522, 0.3512],\n","        [0.5733, 0.9373, 0.3802],\n","        [0.5610, 0.9456, 0.3639],\n","        [0.5492, 0.9537, 0.3483]], device='cuda:0') cov tensor([[[ 0.0880, -0.0596,  0.1154],\n","         [-0.0596,  0.0404, -0.0782],\n","         [ 0.1154, -0.0782,  0.1515]],\n","\n","        [[ 0.0814, -0.0551,  0.1068],\n","         [-0.0551,  0.0373, -0.0724],\n","         [ 0.1068, -0.0724,  0.1402]],\n","\n","        [[ 0.0852, -0.0577,  0.1118],\n","         [-0.0577,  0.0391, -0.0757],\n","         [ 0.1118, -0.0757,  0.1467]],\n","\n","        [[ 0.0886, -0.0600,  0.1162],\n","         [-0.0600,  0.0407, -0.0788],\n","         [ 0.1162, -0.0788,  0.1526]]], device='cuda:0')\n","phi tensor([0.2946, 0.3403, 0.1754, 0.1898], device='cuda:0') mu tensor([[0.5568, 0.9494, 0.3579],\n","        [0.5802, 0.9336, 0.3884],\n","        [0.5725, 0.9388, 0.3784],\n","        [0.5607, 0.9468, 0.3631]], device='cuda:0') cov tensor([[[ 0.0884, -0.0598,  0.1152],\n","         [-0.0598,  0.0406, -0.0781],\n","         [ 0.1152, -0.0781,  0.1504]],\n","\n","        [[ 0.0812, -0.0550,  0.1059],\n","         [-0.0550,  0.0373, -0.0717],\n","         [ 0.1059, -0.0717,  0.1381]],\n","\n","        [[ 0.0839, -0.0568,  0.1094],\n","         [-0.0568,  0.0385, -0.0741],\n","         [ 0.1094, -0.0741,  0.1428]],\n","\n","        [[ 0.0877, -0.0594,  0.1144],\n","         [-0.0594,  0.0402, -0.0775],\n","         [ 0.1144, -0.0775,  0.1492]]], device='cuda:0')\n","phi tensor([0.2956, 0.3419, 0.1729, 0.1897], device='cuda:0') mu tensor([[0.5518, 0.9531, 0.3509],\n","        [0.5759, 0.9369, 0.3822],\n","        [0.5687, 0.9417, 0.3729],\n","        [0.5575, 0.9493, 0.3583]], device='cuda:0') cov tensor([[[ 0.0928, -0.0628,  0.1205],\n","         [-0.0628,  0.0425, -0.0815],\n","         [ 0.1205, -0.0815,  0.1566]],\n","\n","        [[ 0.0855, -0.0578,  0.1110],\n","         [-0.0578,  0.0391, -0.0751],\n","         [ 0.1110, -0.0751,  0.1442]],\n","\n","        [[ 0.0878, -0.0594,  0.1140],\n","         [-0.0594,  0.0402, -0.0771],\n","         [ 0.1140, -0.0771,  0.1481]],\n","\n","        [[ 0.0913, -0.0617,  0.1185],\n","         [-0.0617,  0.0418, -0.0802],\n","         [ 0.1185, -0.0802,  0.1540]]], device='cuda:0')\n","phi tensor([0.2954, 0.3426, 0.1737, 0.1883], device='cuda:0') mu tensor([[0.5601, 0.9486, 0.3611],\n","        [0.5841, 0.9324, 0.3921],\n","        [0.5752, 0.9384, 0.3806],\n","        [0.5652, 0.9451, 0.3677]], device='cuda:0') cov tensor([[[ 0.0933, -0.0632,  0.1205],\n","         [-0.0632,  0.0428, -0.0816],\n","         [ 0.1205, -0.0816,  0.1557]],\n","\n","        [[ 0.0857, -0.0580,  0.1107],\n","         [-0.0580,  0.0393, -0.0750],\n","         [ 0.1107, -0.0750,  0.1430]],\n","\n","        [[ 0.0886, -0.0600,  0.1144],\n","         [-0.0600,  0.0406, -0.0775],\n","         [ 0.1144, -0.0775,  0.1478]],\n","\n","        [[ 0.0916, -0.0620,  0.1182],\n","         [-0.0620,  0.0420, -0.0801],\n","         [ 0.1182, -0.0801,  0.1527]]], device='cuda:0')\n","phi tensor([0.2942, 0.3433, 0.1748, 0.1877], device='cuda:0') mu tensor([[0.5655, 0.9460, 0.3668],\n","        [0.5888, 0.9302, 0.3968],\n","        [0.5779, 0.9376, 0.3828],\n","        [0.5665, 0.9452, 0.3683]], device='cuda:0') cov tensor([[[ 0.0934, -0.0632,  0.1201],\n","         [-0.0632,  0.0428, -0.0813],\n","         [ 0.1201, -0.0813,  0.1545]],\n","\n","        [[ 0.0858, -0.0581,  0.1103],\n","         [-0.0581,  0.0393, -0.0747],\n","         [ 0.1103, -0.0747,  0.1420]],\n","\n","        [[ 0.0893, -0.0604,  0.1148],\n","         [-0.0604,  0.0409, -0.0777],\n","         [ 0.1148, -0.0777,  0.1476]],\n","\n","        [[ 0.0928, -0.0628,  0.1193],\n","         [-0.0628,  0.0426, -0.0808],\n","         [ 0.1193, -0.0808,  0.1535]]], device='cuda:0')\n","phi tensor([0.2940, 0.3434, 0.1747, 0.1879], device='cuda:0') mu tensor([[0.5719, 0.9415, 0.3757],\n","        [0.5932, 0.9271, 0.4030],\n","        [0.5839, 0.9334, 0.3910],\n","        [0.5716, 0.9416, 0.3755]], device='cuda:0') cov tensor([[[ 0.0951, -0.0642,  0.1214],\n","         [-0.0642,  0.0434, -0.0820],\n","         [ 0.1214, -0.0820,  0.1551]],\n","\n","        [[ 0.0879, -0.0593,  0.1122],\n","         [-0.0593,  0.0401, -0.0758],\n","         [ 0.1122, -0.0758,  0.1434]],\n","\n","        [[ 0.0912, -0.0615,  0.1164],\n","         [-0.0615,  0.0415, -0.0786],\n","         [ 0.1164, -0.0786,  0.1487]],\n","\n","        [[ 0.0951, -0.0642,  0.1214],\n","         [-0.0642,  0.0433, -0.0820],\n","         [ 0.1214, -0.0820,  0.1551]]], device='cuda:0')\n"]},{"output_type":"stream","name":"stderr","text":[" 61%|██████▏   | 119/194 [00:03<00:01, 38.50it/s]"]},{"output_type":"stream","name":"stdout","text":["phi tensor([0.2936, 0.3431, 0.1735, 0.1898], device='cuda:0') mu tensor([[0.5730, 0.9416, 0.3762],\n","        [0.5978, 0.9249, 0.4077],\n","        [0.5838, 0.9343, 0.3899],\n","        [0.5717, 0.9425, 0.3745]], device='cuda:0') cov tensor([[[ 0.0961, -0.0649,  0.1222],\n","         [-0.0649,  0.0438, -0.0825],\n","         [ 0.1222, -0.0825,  0.1554]],\n","\n","        [[ 0.0877, -0.0592,  0.1115],\n","         [-0.0592,  0.0400, -0.0753],\n","         [ 0.1115, -0.0753,  0.1419]],\n","\n","        [[ 0.0927, -0.0626,  0.1178],\n","         [-0.0626,  0.0423, -0.0796],\n","         [ 0.1178, -0.0796,  0.1498]],\n","\n","        [[ 0.0966, -0.0652,  0.1228],\n","         [-0.0652,  0.0441, -0.0830],\n","         [ 0.1228, -0.0830,  0.1563]]], device='cuda:0')\n","phi tensor([0.2927, 0.3410, 0.1742, 0.1921], device='cuda:0') mu tensor([[0.5547, 0.9549, 0.3521],\n","        [0.5790, 0.9384, 0.3829],\n","        [0.5606, 0.9509, 0.3596],\n","        [0.5474, 0.9598, 0.3430]], device='cuda:0') cov tensor([[[ 0.1043, -0.0704,  0.1320],\n","         [-0.0704,  0.0476, -0.0892],\n","         [ 0.1320, -0.0892,  0.1672]],\n","\n","        [[ 0.0970, -0.0655,  0.1228],\n","         [-0.0655,  0.0442, -0.0829],\n","         [ 0.1228, -0.0829,  0.1554]],\n","\n","        [[ 0.1029, -0.0695,  0.1302],\n","         [-0.0695,  0.0469, -0.0879],\n","         [ 0.1302, -0.0879,  0.1648]],\n","\n","        [[ 0.1065, -0.0719,  0.1348],\n","         [-0.0719,  0.0486, -0.0910],\n","         [ 0.1348, -0.0910,  0.1706]]], device='cuda:0')\n","phi tensor([0.2923, 0.3436, 0.1750, 0.1892], device='cuda:0') mu tensor([[0.5783, 0.9397, 0.3815],\n","        [0.6004, 0.9248, 0.4094],\n","        [0.5872, 0.9337, 0.3927],\n","        [0.5732, 0.9432, 0.3751]], device='cuda:0') cov tensor([[[ 0.0993, -0.0671,  0.1252],\n","         [-0.0671,  0.0454, -0.0846],\n","         [ 0.1252, -0.0846,  0.1578]],\n","\n","        [[ 0.0918, -0.0620,  0.1156],\n","         [-0.0620,  0.0419, -0.0782],\n","         [ 0.1156, -0.0782,  0.1458]],\n","\n","        [[ 0.0964, -0.0651,  0.1215],\n","         [-0.0651,  0.0441, -0.0821],\n","         [ 0.1215, -0.0821,  0.1532]],\n","\n","        [[ 0.1011, -0.0683,  0.1274],\n","         [-0.0683,  0.0462, -0.0861],\n","         [ 0.1274, -0.0861,  0.1606]]], device='cuda:0')\n","phi tensor([0.2949, 0.3472, 0.1743, 0.1836], device='cuda:0') mu tensor([[0.5884, 0.9335, 0.3938],\n","        [0.6114, 0.9180, 0.4227],\n","        [0.6048, 0.9224, 0.4144],\n","        [0.5890, 0.9330, 0.3947]], device='cuda:0') cov tensor([[[ 0.0975, -0.0658,  0.1221],\n","         [-0.0658,  0.0444, -0.0825],\n","         [ 0.1221, -0.0825,  0.1532]],\n","\n","        [[ 0.0893, -0.0603,  0.1119],\n","         [-0.0603,  0.0407, -0.0756],\n","         [ 0.1119, -0.0756,  0.1403]],\n","\n","        [[ 0.0916, -0.0619,  0.1149],\n","         [-0.0619,  0.0418, -0.0776],\n","         [ 0.1149, -0.0776,  0.1441]],\n","\n","        [[ 0.0967, -0.0653,  0.1212],\n","         [-0.0653,  0.0441, -0.0819],\n","         [ 0.1212, -0.0819,  0.1521]]], device='cuda:0')\n","phi tensor([0.2938, 0.3425, 0.1743, 0.1893], device='cuda:0') mu tensor([[0.5694, 0.9465, 0.3701],\n","        [0.5944, 0.9296, 0.4012],\n","        [0.5816, 0.9382, 0.3853],\n","        [0.5716, 0.9450, 0.3728]], device='cuda:0') cov tensor([[[ 0.1073, -0.0723,  0.1338],\n","         [-0.0723,  0.0488, -0.0902],\n","         [ 0.1338, -0.0902,  0.1669]],\n","\n","        [[ 0.0990, -0.0667,  0.1235],\n","         [-0.0667,  0.0450, -0.0832],\n","         [ 0.1235, -0.0832,  0.1540]],\n","\n","        [[ 0.1035, -0.0698,  0.1291],\n","         [-0.0698,  0.0470, -0.0870],\n","         [ 0.1291, -0.0870,  0.1610]],\n","\n","        [[ 0.1066, -0.0718,  0.1329],\n","         [-0.0718,  0.0484, -0.0896],\n","         [ 0.1329, -0.0896,  0.1657]]], device='cuda:0')\n","phi tensor([0.2942, 0.3440, 0.1747, 0.1872], device='cuda:0') mu tensor([[0.5866, 0.9359, 0.3907],\n","        [0.6092, 0.9206, 0.4189],\n","        [0.5956, 0.9298, 0.4020],\n","        [0.5803, 0.9401, 0.3829]], device='cuda:0') cov tensor([[[ 0.1026, -0.0692,  0.1273],\n","         [-0.0692,  0.0468, -0.0860],\n","         [ 0.1273, -0.0860,  0.1582]],\n","\n","        [[ 0.0946, -0.0638,  0.1174],\n","         [-0.0638,  0.0431, -0.0793],\n","         [ 0.1174, -0.0793,  0.1459]],\n","\n","        [[ 0.0996, -0.0672,  0.1236],\n","         [-0.0672,  0.0454, -0.0835],\n","         [ 0.1236, -0.0835,  0.1536]],\n","\n","        [[ 0.1049, -0.0708,  0.1302],\n","         [-0.0708,  0.0478, -0.0880],\n","         [ 0.1302, -0.0880,  0.1618]]], device='cuda:0')\n"]},{"output_type":"stream","name":"stderr","text":["\r 63%|██████▎   | 123/194 [00:03<00:02, 31.40it/s]"]},{"output_type":"stream","name":"stdout","text":["phi tensor([0.2939, 0.3439, 0.1738, 0.1884], device='cuda:0') mu tensor([[0.5718, 0.9462, 0.3717],\n","        [0.5956, 0.9302, 0.4011],\n","        [0.5792, 0.9412, 0.3809],\n","        [0.5666, 0.9496, 0.3655]], device='cuda:0') cov tensor([[[ 0.1099, -0.0740,  0.1359],\n","         [-0.0740,  0.0499, -0.0916],\n","         [ 0.1359, -0.0916,  0.1682]],\n","\n","        [[ 0.1023, -0.0690,  0.1266],\n","         [-0.0690,  0.0465, -0.0853],\n","         [ 0.1266, -0.0853,  0.1567]],\n","\n","        [[ 0.1078, -0.0726,  0.1334],\n","         [-0.0726,  0.0489, -0.0898],\n","         [ 0.1334, -0.0898,  0.1650]],\n","\n","        [[ 0.1123, -0.0756,  0.1388],\n","         [-0.0756,  0.0509, -0.0935],\n","         [ 0.1388, -0.0935,  0.1716]]], device='cuda:0')\n","phi tensor([0.2927, 0.3450, 0.1764, 0.1860], device='cuda:0') mu tensor([[0.5887, 0.9356, 0.3924],\n","        [0.6137, 0.9187, 0.4232],\n","        [0.5985, 0.9290, 0.4044],\n","        [0.5842, 0.9386, 0.3869]], device='cuda:0') cov tensor([[[ 0.1086, -0.0732,  0.1337],\n","         [-0.0732,  0.0494, -0.0901],\n","         [ 0.1337, -0.0901,  0.1645]],\n","\n","        [[ 0.0994, -0.0670,  0.1224],\n","         [-0.0670,  0.0452, -0.0825],\n","         [ 0.1224, -0.0825,  0.1507]],\n","\n","        [[ 0.1049, -0.0707,  0.1291],\n","         [-0.0707,  0.0477, -0.0870],\n","         [ 0.1291, -0.0870,  0.1589]],\n","\n","        [[ 0.1098, -0.0740,  0.1351],\n","         [-0.0740,  0.0499, -0.0910],\n","         [ 0.1351, -0.0910,  0.1662]]], device='cuda:0')\n","phi tensor([0.2938, 0.3468, 0.1738, 0.1857], device='cuda:0') mu tensor([[0.5809, 0.9412, 0.3827],\n","        [0.6080, 0.9229, 0.4159],\n","        [0.5966, 0.9306, 0.4020],\n","        [0.5851, 0.9383, 0.3879]], device='cuda:0') cov tensor([[[ 0.1133, -0.0763,  0.1388],\n","         [-0.0763,  0.0514, -0.0935],\n","         [ 0.1388, -0.0935,  0.1702]],\n","\n","        [[ 0.1037, -0.0699,  0.1271],\n","         [-0.0699,  0.0471, -0.0856],\n","         [ 0.1271, -0.0856,  0.1558]],\n","\n","        [[ 0.1080, -0.0727,  0.1323],\n","         [-0.0727,  0.0490, -0.0891],\n","         [ 0.1323, -0.0891,  0.1621]],\n","\n","        [[ 0.1120, -0.0755,  0.1373],\n","         [-0.0755,  0.0509, -0.0925],\n","         [ 0.1373, -0.0925,  0.1682]]], device='cuda:0')\n","phi tensor([0.2934, 0.3482, 0.1737, 0.1846], device='cuda:0') mu tensor([[0.5709, 0.9480, 0.3706],\n","        [0.5965, 0.9308, 0.4018],\n","        [0.5838, 0.9394, 0.3864],\n","        [0.5667, 0.9509, 0.3655]], device='cuda:0') cov tensor([[[ 0.1176, -0.0792,  0.1436],\n","         [-0.0792,  0.0533, -0.0967],\n","         [ 0.1436, -0.0967,  0.1753]],\n","\n","        [[ 0.1094, -0.0736,  0.1335],\n","         [-0.0736,  0.0496, -0.0899],\n","         [ 0.1335, -0.0899,  0.1630]],\n","\n","        [[ 0.1136, -0.0764,  0.1386],\n","         [-0.0764,  0.0515, -0.0933],\n","         [ 0.1386, -0.0933,  0.1693]],\n","\n","        [[ 0.1185, -0.0798,  0.1446],\n","         [-0.0798,  0.0537, -0.0974],\n","         [ 0.1446, -0.0974,  0.1766]]], device='cuda:0')\n","phi tensor([0.2936, 0.3444, 0.1749, 0.1872], device='cuda:0') mu tensor([[0.5658, 0.9524, 0.3641],\n","        [0.5931, 0.9341, 0.3972],\n","        [0.5803, 0.9427, 0.3817],\n","        [0.5608, 0.9558, 0.3579]], device='cuda:0') cov tensor([[[ 0.1210, -0.0815,  0.1471],\n","         [-0.0815,  0.0550, -0.0991],\n","         [ 0.1471, -0.0991,  0.1788]],\n","\n","        [[ 0.1124, -0.0757,  0.1366],\n","         [-0.0757,  0.0511, -0.0921],\n","         [ 0.1366, -0.0921,  0.1661]],\n","\n","        [[ 0.1166, -0.0786,  0.1417],\n","         [-0.0786,  0.0530, -0.0955],\n","         [ 0.1417, -0.0955,  0.1723]],\n","\n","        [[ 0.1222, -0.0823,  0.1485],\n","         [-0.0823,  0.0555, -0.1001],\n","         [ 0.1485, -0.1001,  0.1805]]], device='cuda:0')\n","phi tensor([0.2952, 0.3469, 0.1736, 0.1843], device='cuda:0') mu tensor([[0.5786, 0.9440, 0.3793],\n","        [0.6068, 0.9250, 0.4135],\n","        [0.5918, 0.9351, 0.3953],\n","        [0.5745, 0.9467, 0.3744]], device='cuda:0') cov tensor([[[ 0.1197, -0.0806,  0.1450],\n","         [-0.0806,  0.0542, -0.0976],\n","         [ 0.1450, -0.0976,  0.1757]],\n","\n","        [[ 0.1100, -0.0740,  0.1333],\n","         [-0.0740,  0.0498, -0.0897],\n","         [ 0.1333, -0.0897,  0.1615]],\n","\n","        [[ 0.1150, -0.0774,  0.1394],\n","         [-0.0774,  0.0521, -0.0938],\n","         [ 0.1394, -0.0938,  0.1689]],\n","\n","        [[ 0.1202, -0.0809,  0.1456],\n","         [-0.0809,  0.0544, -0.0980],\n","         [ 0.1456, -0.0980,  0.1764]]], device='cuda:0')\n","phi tensor([0.2940, 0.3474, 0.1737, 0.1849], device='cuda:0') mu tensor([[0.5981, 0.9313, 0.4031],\n","        [0.6230, 0.9146, 0.4331],\n","        [0.6102, 0.9232, 0.4177],\n","        [0.5960, 0.9327, 0.4006]], device='cuda:0') cov tensor([[[ 0.1152, -0.0776,  0.1389],\n","         [-0.0776,  0.0522, -0.0935],\n","         [ 0.1389, -0.0935,  0.1676]],\n","\n","        [[ 0.1059, -0.0713,  0.1277],\n","         [-0.0713,  0.0480, -0.0860],\n","         [ 0.1277, -0.0860,  0.1540]],\n","\n","        [[ 0.1112, -0.0748,  0.1341],\n","         [-0.0748,  0.0504, -0.0903],\n","         [ 0.1341, -0.0903,  0.1617]],\n","\n","        [[ 0.1165, -0.0785,  0.1405],\n","         [-0.0785,  0.0528, -0.0946],\n","         [ 0.1405, -0.0946,  0.1695]]], device='cuda:0')\n","phi tensor([0.2939, 0.3454, 0.1745, 0.1862], device='cuda:0') mu tensor([[0.5831, 0.9415, 0.3847],\n","        [0.6090, 0.9241, 0.4159],\n","        [0.5965, 0.9326, 0.4007],\n","        [0.5789, 0.9444, 0.3795]], device='cuda:0') cov tensor([[[ 0.1212, -0.0815,  0.1456],\n","         [-0.0815,  0.0549, -0.0980],\n","         [ 0.1456, -0.0980,  0.1751]],\n","\n","        [[ 0.1124, -0.0756,  0.1350],\n","         [-0.0756,  0.0509, -0.0909],\n","         [ 0.1350, -0.0909,  0.1624]],\n","\n","        [[ 0.1169, -0.0786,  0.1405],\n","         [-0.0786,  0.0529, -0.0945],\n","         [ 0.1405, -0.0945,  0.1690]],\n","\n","        [[ 0.1227, -0.0826,  0.1476],\n","         [-0.0826,  0.0556, -0.0993],\n","         [ 0.1476, -0.0993,  0.1775]]], device='cuda:0')\n","phi tensor([0.2948, 0.3480, 0.1739, 0.1833], device='cuda:0') mu tensor([[0.5869, 0.9393, 0.3889],\n","        [0.6143, 0.9209, 0.4217],\n","        [0.5997, 0.9306, 0.4044],\n","        [0.5833, 0.9417, 0.3847]], device='cuda:0') cov "]},{"output_type":"stream","name":"stderr","text":[" 68%|██████▊   | 132/194 [00:03<00:01, 34.71it/s]"]},{"output_type":"stream","name":"stdout","text":["tensor([[[ 0.1213, -0.0815,  0.1452],\n","         [-0.0815,  0.0548, -0.0976],\n","         [ 0.1452, -0.0976,  0.1740]],\n","\n","        [[ 0.1118, -0.0751,  0.1339],\n","         [-0.0751,  0.0505, -0.0900],\n","         [ 0.1339, -0.0900,  0.1604]],\n","\n","        [[ 0.1175, -0.0789,  0.1406],\n","         [-0.0789,  0.0530, -0.0945],\n","         [ 0.1406, -0.0945,  0.1684]],\n","\n","        [[ 0.1226, -0.0823,  0.1467],\n","         [-0.0823,  0.0553, -0.0986],\n","         [ 0.1467, -0.0986,  0.1757]]], device='cuda:0')\n","phi tensor([0.2947, 0.3458, 0.1729, 0.1866], device='cuda:0') mu tensor([[0.5764, 0.9467, 0.3768],\n","        [0.6023, 0.9292, 0.4078],\n","        [0.5859, 0.9403, 0.3882],\n","        [0.5691, 0.9515, 0.3683]], device='cuda:0') cov tensor([[[ 0.1294, -0.0870,  0.1543],\n","         [-0.0870,  0.0585, -0.1037],\n","         [ 0.1543, -0.1037,  0.1840]],\n","\n","        [[ 0.1209, -0.0813,  0.1442],\n","         [-0.0813,  0.0546, -0.0969],\n","         [ 0.1442, -0.0969,  0.1719]],\n","\n","        [[ 0.1268, -0.0853,  0.1512],\n","         [-0.0853,  0.0573, -0.1017],\n","         [ 0.1512, -0.1017,  0.1803]],\n","\n","        [[ 0.1320, -0.0888,  0.1574],\n","         [-0.0888,  0.0597, -0.1058],\n","         [ 0.1574, -0.1058,  0.1877]]], device='cuda:0')\n","phi tensor([0.2938, 0.3460, 0.1744, 0.1859], device='cuda:0') mu tensor([[0.5969, 0.9332, 0.4016],\n","        [0.6258, 0.9138, 0.4359],\n","        [0.6137, 0.9220, 0.4214],\n","        [0.5965, 0.9336, 0.4009]], device='cuda:0') cov tensor([[[ 0.1243, -0.0835,  0.1475],\n","         [-0.0835,  0.0562, -0.0992],\n","         [ 0.1475, -0.0992,  0.1752]],\n","\n","        [[ 0.1134, -0.0763,  0.1347],\n","         [-0.0763,  0.0513, -0.0906],\n","         [ 0.1347, -0.0906,  0.1600]],\n","\n","        [[ 0.1177, -0.0791,  0.1397],\n","         [-0.0791,  0.0532, -0.0940],\n","         [ 0.1397, -0.0940,  0.1660]],\n","\n","        [[ 0.1241, -0.0835,  0.1474],\n","         [-0.0835,  0.0562, -0.0991],\n","         [ 0.1474, -0.0991,  0.1751]]], device='cuda:0')\n","phi tensor([0.2935, 0.3497, 0.1730, 0.1838], device='cuda:0') mu tensor([[0.5841, 0.9415, 0.3863],\n","        [0.6113, 0.9232, 0.4186],\n","        [0.5935, 0.9352, 0.3975],\n","        [0.5768, 0.9465, 0.3776]], device='cuda:0') cov tensor([[[ 0.1288, -0.0865,  0.1527],\n","         [-0.0865,  0.0581, -0.1025],\n","         [ 0.1527, -0.1025,  0.1810]],\n","\n","        [[ 0.1195, -0.0802,  0.1416],\n","         [-0.0802,  0.0539, -0.0951],\n","         [ 0.1416, -0.0951,  0.1679]],\n","\n","        [[ 0.1258, -0.0844,  0.1491],\n","         [-0.0844,  0.0567, -0.1001],\n","         [ 0.1491, -0.1001,  0.1767]],\n","\n","        [[ 0.1312, -0.0881,  0.1554],\n","         [-0.0881,  0.0591, -0.1043],\n","         [ 0.1554, -0.1043,  0.1842]]], device='cuda:0')\n","phi tensor([0.2937, 0.3496, 0.1738, 0.1830], device='cuda:0') mu tensor([[0.5949, 0.9347, 0.3990],\n","        [0.6227, 0.9160, 0.4319],\n","        [0.6096, 0.9249, 0.4164],\n","        [0.5926, 0.9363, 0.3963]], device='cuda:0') cov tensor([[[ 0.1281, -0.0860,  0.1512],\n","         [-0.0860,  0.0577, -0.1015],\n","         [ 0.1512, -0.1015,  0.1785]],\n","\n","        [[ 0.1177, -0.0790,  0.1390],\n","         [-0.0790,  0.0531, -0.0933],\n","         [ 0.1390, -0.0933,  0.1641]],\n","\n","        [[ 0.1228, -0.0824,  0.1449],\n","         [-0.0824,  0.0553, -0.0973],\n","         [ 0.1449, -0.0973,  0.1711]],\n","\n","        [[ 0.1284, -0.0862,  0.1516],\n","         [-0.0862,  0.0579, -0.1018],\n","         [ 0.1516, -0.1018,  0.1790]]], device='cuda:0')\n","phi tensor([0.2947, 0.3513, 0.1729, 0.1812], device='cuda:0') mu tensor([[0.5912, 0.9374, 0.3947],\n","        [0.6200, 0.9180, 0.4286],\n","        [0.6068, 0.9270, 0.4130],\n","        [0.5887, 0.9391, 0.3917]], device='cuda:0') cov tensor([[[ 0.1318, -0.0885,  0.1551],\n","         [-0.0885,  0.0594, -0.1041],\n","         [ 0.1551, -0.1041,  0.1826]],\n","\n","        [[ 0.1212, -0.0814,  0.1427],\n","         [-0.0814,  0.0546, -0.0958],\n","         [ 0.1427, -0.0958,  0.1680]],\n","\n","        [[ 0.1266, -0.0850,  0.1490],\n","         [-0.0850,  0.0571, -0.1001],\n","         [ 0.1490, -0.1001,  0.1755]],\n","\n","        [[ 0.1334, -0.0896,  0.1570],\n","         [-0.0896,  0.0602, -0.1054],\n","         [ 0.1570, -0.1054,  0.1848]]], device='cuda:0')\n","phi tensor([0.2917, 0.3483, 0.1750, 0.1850], device='cuda:0') mu tensor([[0.5809, 0.9444, 0.3830],\n","        [0.6067, 0.9270, 0.4134],\n","        [0.5911, 0.9376, 0.3950],\n","        [0.5708, 0.9511, 0.3714]], device='cuda:0') cov tensor([[[ 0.1353, -0.0907,  0.1586],\n","         [-0.0907,  0.0609, -0.1064],\n","         [ 0.1586, -0.1064,  0.1860]],\n","\n","        [[ 0.1265, -0.0848,  0.1483],\n","         [-0.0848,  0.0569, -0.0994],\n","         [ 0.1483, -0.0994,  0.1739]],\n","\n","        [[ 0.1325, -0.0889,  0.1553],\n","         [-0.0889,  0.0596, -0.1042],\n","         [ 0.1553, -0.1042,  0.1822]],\n","\n","        [[ 0.1390, -0.0933,  0.1630],\n","         [-0.0933,  0.0626, -0.1094],\n","         [ 0.1630, -0.1094,  0.1911]]], device='cuda:0')\n","phi tensor([0.2931, 0.3457, 0.1746, 0.1866], device='cuda:0') mu tensor([[0.5981, 0.9330, 0.4032],\n","        [0.6247, 0.9151, 0.4344],\n","        [0.6101, 0.9250, 0.4172],\n","        [0.5921, 0.9371, 0.3962]], device='cuda:0') cov tensor([[[ 0.1335, -0.0895,  0.1561],\n","         [-0.0895,  0.0601, -0.1047],\n","         [ 0.1561, -0.1047,  0.1826]],\n","\n","        [[ 0.1231, -0.0826,  0.1440],\n","         [-0.0826,  0.0554, -0.0966],\n","         [ 0.1440, -0.0966,  0.1685]],\n","\n","        [[ 0.1292, -0.0866,  0.1511],\n","         [-0.0866,  0.0582, -0.1013],\n","         [ 0.1511, -0.1013,  0.1767]],\n","\n","        [[ 0.1357, -0.0910,  0.1587],\n","         [-0.0910,  0.0611, -0.1065],\n","         [ 0.1587, -0.1065,  0.1857]]], device='cuda:0')\n","phi tensor([0.2927, 0.3496, 0.1736, 0.1841], device='cuda:0') mu "]},{"output_type":"stream","name":"stderr","text":[" 72%|███████▏  | 140/194 [00:03<00:01, 36.60it/s]"]},{"output_type":"stream","name":"stdout","text":["tensor([[0.5883, 0.9393, 0.3920],\n","        [0.6159, 0.9209, 0.4242],\n","        [0.5953, 0.9347, 0.4001],\n","        [0.5767, 0.9471, 0.3785]], device='cuda:0') cov tensor([[[ 0.1387, -0.0929,  0.1618],\n","         [-0.0929,  0.0623, -0.1084],\n","         [ 0.1618, -0.1084,  0.1887]],\n","\n","        [[ 0.1288, -0.0863,  0.1502],\n","         [-0.0863,  0.0578, -0.1006],\n","         [ 0.1502, -0.1006,  0.1752]],\n","\n","        [[ 0.1362, -0.0912,  0.1588],\n","         [-0.0912,  0.0612, -0.1064],\n","         [ 0.1588, -0.1064,  0.1853]],\n","\n","        [[ 0.1420, -0.0952,  0.1656],\n","         [-0.0952,  0.0638, -0.1110],\n","         [ 0.1656, -0.1110,  0.1933]]], device='cuda:0')\n","phi tensor([0.2916, 0.3479, 0.1749, 0.1857], device='cuda:0') mu tensor([[0.5948, 0.9353, 0.3999],\n","        [0.6247, 0.9151, 0.4348],\n","        [0.6095, 0.9254, 0.4169],\n","        [0.5963, 0.9343, 0.4016]], device='cuda:0') cov tensor([[[ 0.1380, -0.0926,  0.1606],\n","         [-0.0926,  0.0621, -0.1078],\n","         [ 0.1606, -0.1078,  0.1870]],\n","\n","        [[ 0.1267, -0.0850,  0.1475],\n","         [-0.0850,  0.0570, -0.0989],\n","         [ 0.1475, -0.0989,  0.1718]],\n","\n","        [[ 0.1329, -0.0892,  0.1548],\n","         [-0.0892,  0.0598, -0.1038],\n","         [ 0.1548, -0.1038,  0.1802]],\n","\n","        [[ 0.1379, -0.0925,  0.1605],\n","         [-0.0925,  0.0620, -0.1077],\n","         [ 0.1605, -0.1077,  0.1869]]], device='cuda:0')\n","phi tensor([0.2932, 0.3467, 0.1732, 0.1869], device='cuda:0') mu tensor([[0.5849, 0.9417, 0.3889],\n","        [0.6149, 0.9216, 0.4236],\n","        [0.6014, 0.9307, 0.4080],\n","        [0.5853, 0.9414, 0.3894]], device='cuda:0') cov tensor([[[ 0.1442, -0.0966,  0.1673],\n","         [-0.0966,  0.0648, -0.1121],\n","         [ 0.1673, -0.1121,  0.1941]],\n","\n","        [[ 0.1336, -0.0895,  0.1550],\n","         [-0.0895,  0.0599, -0.1038],\n","         [ 0.1550, -0.1038,  0.1798]],\n","\n","        [[ 0.1390, -0.0931,  0.1612],\n","         [-0.0931,  0.0624, -0.1080],\n","         [ 0.1612, -0.1080,  0.1870]],\n","\n","        [[ 0.1445, -0.0968,  0.1677],\n","         [-0.0968,  0.0649, -0.1123],\n","         [ 0.1677, -0.1123,  0.1945]]], device='cuda:0')\n","phi tensor([0.2929, 0.3497, 0.1736, 0.1837], device='cuda:0') mu tensor([[0.6012, 0.9305, 0.4080],\n","        [0.6329, 0.9093, 0.4448],\n","        [0.6118, 0.9234, 0.4202],\n","        [0.5943, 0.9352, 0.3999]], device='cuda:0') cov tensor([[[ 0.1380, -0.0923,  0.1597],\n","         [-0.0923,  0.0617, -0.1068],\n","         [ 0.1597, -0.1068,  0.1850]],\n","\n","        [[ 0.1259, -0.0841,  0.1457],\n","         [-0.0841,  0.0563, -0.0974],\n","         [ 0.1457, -0.0974,  0.1687]],\n","\n","        [[ 0.1339, -0.0895,  0.1551],\n","         [-0.0895,  0.0599, -0.1037],\n","         [ 0.1551, -0.1037,  0.1797]],\n","\n","        [[ 0.1398, -0.0935,  0.1619],\n","         [-0.0935,  0.0626, -0.1083],\n","         [ 0.1619, -0.1083,  0.1876]]], device='cuda:0')\n","phi tensor([0.2932, 0.3504, 0.1727, 0.1837], device='cuda:0') mu tensor([[0.6010, 0.9305, 0.4083],\n","        [0.6295, 0.9115, 0.4412],\n","        [0.6152, 0.9210, 0.4247],\n","        [0.6016, 0.9301, 0.4089]], device='cuda:0') cov tensor([[[ 0.1419, -0.0948,  0.1638],\n","         [-0.0948,  0.0634, -0.1095],\n","         [ 0.1638, -0.1095,  0.1892]],\n","\n","        [[ 0.1310, -0.0875,  0.1513],\n","         [-0.0875,  0.0585, -0.1011],\n","         [ 0.1513, -0.1011,  0.1748]],\n","\n","        [[ 0.1365, -0.0912,  0.1576],\n","         [-0.0912,  0.0610, -0.1053],\n","         [ 0.1576, -0.1053,  0.1821]],\n","\n","        [[ 0.1420, -0.0949,  0.1639],\n","         [-0.0949,  0.0634, -0.1096],\n","         [ 0.1639, -0.1096,  0.1894]]], device='cuda:0')\n","phi tensor([0.2919, 0.3475, 0.1737, 0.1869], device='cuda:0') mu tensor([[0.5931, 0.9361, 0.3990],\n","        [0.6219, 0.9168, 0.4322],\n","        [0.6028, 0.9295, 0.4102],\n","        [0.5852, 0.9413, 0.3898]], device='cuda:0') cov tensor([[[ 0.1461, -0.0978,  0.1685],\n","         [-0.0978,  0.0654, -0.1127],\n","         [ 0.1685, -0.1127,  0.1943]],\n","\n","        [[ 0.1357, -0.0908,  0.1564],\n","         [-0.0908,  0.0607, -0.1047],\n","         [ 0.1564, -0.1047,  0.1804]],\n","\n","        [[ 0.1422, -0.0951,  0.1639],\n","         [-0.0951,  0.0636, -0.1096],\n","         [ 0.1639, -0.1096,  0.1890]],\n","\n","        [[ 0.1483, -0.0992,  0.1710],\n","         [-0.0992,  0.0664, -0.1144],\n","         [ 0.1710, -0.1144,  0.1972]]], device='cuda:0')\n","phi tensor([0.2935, 0.3508, 0.1726, 0.1831], device='cuda:0') mu tensor([[0.6060, 0.9273, 0.4146],\n","        [0.6365, 0.9070, 0.4496],\n","        [0.6179, 0.9194, 0.4283],\n","        [0.6042, 0.9285, 0.4126]], device='cuda:0') cov tensor([[[ 0.1437, -0.0961,  0.1651],\n","         [-0.0961,  0.0643, -0.1105],\n","         [ 0.1651, -0.1105,  0.1898]],\n","\n","        [[ 0.1315, -0.0880,  0.1511],\n","         [-0.0880,  0.0589, -0.1011],\n","         [ 0.1511, -0.1011,  0.1737]],\n","\n","        [[ 0.1392, -0.0931,  0.1599],\n","         [-0.0931,  0.0623, -0.1070],\n","         [ 0.1599, -0.1070,  0.1838]],\n","\n","        [[ 0.1443, -0.0966,  0.1659],\n","         [-0.0966,  0.0646, -0.1110],\n","         [ 0.1659, -0.1110,  0.1907]]], device='cuda:0')\n","phi tensor([0.2934, 0.3485, 0.1736, 0.1846], device='cuda:0') mu tensor([[0.5974, 0.9333, 0.4047],\n","        [0.6264, 0.9139, 0.4380],\n","        [0.6107, 0.9244, 0.4200],\n","        [0.5946, 0.9352, 0.4016]], device='cuda:0') cov tensor([[[ 0.1497, -0.1001,  0.1716],\n","         [-0.1001,  0.0670, -0.1148],\n","         [ 0.1716, -0.1148,  0.1968]],\n","\n","        [[ 0.1386, -0.0927,  0.1588],\n","         [-0.0927,  0.0620, -0.1063],\n","         [ 0.1588, -0.1063,  0.1821]],\n","\n","        [[ 0.1452, -0.0972,  0.1665],\n","         [-0.0972,  0.0650, -0.1114],\n","         [ 0.1665, -0.1114,  0.1909]],\n","\n","        [[ 0.1513, -0.1012,  0.1734],\n","         [-0.1012,  0.0677, -0.1160],\n","         [ 0.1734, -0.1160,  0.1988]]], device='cuda:0')\n"]},{"output_type":"stream","name":"stderr","text":[" 76%|███████▋  | 148/194 [00:03<00:01, 37.16it/s]"]},{"output_type":"stream","name":"stdout","text":["phi tensor([0.2909, 0.3499, 0.1735, 0.1857], device='cuda:0') mu tensor([[0.6189, 0.9187, 0.4298],\n","        [0.6468, 0.9000, 0.4618],\n","        [0.6316, 0.9101, 0.4444],\n","        [0.6168, 0.9200, 0.4274]], device='cuda:0') cov tensor([[[ 0.1430, -0.0956,  0.1635],\n","         [-0.0956,  0.0639, -0.1093],\n","         [ 0.1635, -0.1093,  0.1871]],\n","\n","        [[ 0.1310, -0.0876,  0.1498],\n","         [-0.0876,  0.0586, -0.1002],\n","         [ 0.1498, -0.1002,  0.1714]],\n","\n","        [[ 0.1377, -0.0920,  0.1575],\n","         [-0.0920,  0.0616, -0.1053],\n","         [ 0.1575, -0.1053,  0.1802]],\n","\n","        [[ 0.1439, -0.0962,  0.1645],\n","         [-0.0962,  0.0643, -0.1100],\n","         [ 0.1645, -0.1100,  0.1882]]], device='cuda:0')\n","phi tensor([0.2919, 0.3500, 0.1734, 0.1847], device='cuda:0') mu tensor([[0.6144, 0.9212, 0.4253],\n","        [0.6391, 0.9047, 0.4536],\n","        [0.6218, 0.9162, 0.4339],\n","        [0.6042, 0.9280, 0.4138]], device='cuda:0') cov tensor([[[ 0.1453, -0.0970,  0.1657],\n","         [-0.0970,  0.0648, -0.1106],\n","         [ 0.1657, -0.1106,  0.1890]],\n","\n","        [[ 0.1354, -0.0903,  0.1544],\n","         [-0.0903,  0.0603, -0.1030],\n","         [ 0.1544, -0.1030,  0.1760]],\n","\n","        [[ 0.1427, -0.0953,  0.1627],\n","         [-0.0953,  0.0636, -0.1086],\n","         [ 0.1627, -0.1086,  0.1855]],\n","\n","        [[ 0.1496, -0.0999,  0.1705],\n","         [-0.0999,  0.0667, -0.1138],\n","         [ 0.1705, -0.1138,  0.1944]]], device='cuda:0')\n","phi tensor([0.2914, 0.3490, 0.1728, 0.1868], device='cuda:0') mu tensor([[0.5990, 0.9314, 0.4081],\n","        [0.6322, 0.9093, 0.4459],\n","        [0.6135, 0.9218, 0.4246],\n","        [0.5995, 0.9311, 0.4088]], device='cuda:0') cov tensor([[[ 0.1548, -0.1034,  0.1761],\n","         [-0.1034,  0.0691, -0.1176],\n","         [ 0.1761, -0.1176,  0.2005]],\n","\n","        [[ 0.1420, -0.0948,  0.1616],\n","         [-0.0948,  0.0633, -0.1079],\n","         [ 0.1616, -0.1079,  0.1839]],\n","\n","        [[ 0.1496, -0.0999,  0.1702],\n","         [-0.0999,  0.0667, -0.1137],\n","         [ 0.1702, -0.1137,  0.1936]],\n","\n","        [[ 0.1548, -0.1034,  0.1761],\n","         [-0.1034,  0.0691, -0.1176],\n","         [ 0.1761, -0.1176,  0.2004]]], device='cuda:0')\n","phi tensor([0.2915, 0.3499, 0.1736, 0.1850], device='cuda:0') mu tensor([[0.6037, 0.9286, 0.4135],\n","        [0.6370, 0.9064, 0.4513],\n","        [0.6095, 0.9247, 0.4201],\n","        [0.5912, 0.9369, 0.3994]], device='cuda:0') cov tensor([[[ 0.1526, -0.1018,  0.1730],\n","         [-0.1018,  0.0679, -0.1154],\n","         [ 0.1730, -0.1154,  0.1962]],\n","\n","        [[ 0.1394, -0.0930,  0.1581],\n","         [-0.0930,  0.0621, -0.1054],\n","         [ 0.1581, -0.1054,  0.1793]],\n","\n","        [[ 0.1508, -0.1006,  0.1710],\n","         [-0.1006,  0.0672, -0.1141],\n","         [ 0.1710, -0.1141,  0.1939]],\n","\n","        [[ 0.1574, -0.1050,  0.1784],\n","         [-0.1050,  0.0701, -0.1191],\n","         [ 0.1784, -0.1191,  0.2023]]], device='cuda:0')\n","phi tensor([0.2930, 0.3510, 0.1729, 0.1832], device='cuda:0') mu tensor([[0.6285, 0.9118, 0.4423],\n","        [0.6588, 0.8916, 0.4766],\n","        [0.6392, 0.9046, 0.4544],\n","        [0.6221, 0.9160, 0.4351]], device='cuda:0') cov tensor([[[ 0.1478, -0.0986,  0.1672],\n","         [-0.0986,  0.0659, -0.1116],\n","         [ 0.1672, -0.1116,  0.1891]],\n","\n","        [[ 0.1344, -0.0897,  0.1520],\n","         [-0.0897,  0.0599, -0.1014],\n","         [ 0.1520, -0.1014,  0.1720]],\n","\n","        [[ 0.1432, -0.0956,  0.1621],\n","         [-0.0956,  0.0638, -0.1082],\n","         [ 0.1621, -0.1082,  0.1834]],\n","\n","        [[ 0.1504, -0.1004,  0.1702],\n","         [-0.1004,  0.0671, -0.1136],\n","         [ 0.1702, -0.1136,  0.1926]]], device='cuda:0')\n","phi tensor([0.2926, 0.3496, 0.1729, 0.1849], device='cuda:0') mu tensor([[0.6166, 0.9194, 0.4290],\n","        [0.6461, 0.8997, 0.4624],\n","        [0.6322, 0.9090, 0.4467],\n","        [0.6181, 0.9183, 0.4309]], device='cuda:0') cov tensor([[[ 0.1520, -0.1014,  0.1717],\n","         [-0.1014,  0.0677, -0.1146],\n","         [ 0.1717, -0.1146,  0.1940]],\n","\n","        [[ 0.1396, -0.0931,  0.1577],\n","         [-0.0931,  0.0622, -0.1052],\n","         [ 0.1577, -0.1052,  0.1782]],\n","\n","        [[ 0.1456, -0.0971,  0.1644],\n","         [-0.0971,  0.0648, -0.1097],\n","         [ 0.1644, -0.1097,  0.1857]],\n","\n","        [[ 0.1516, -0.1011,  0.1712],\n","         [-0.1011,  0.0675, -0.1142],\n","         [ 0.1712, -0.1142,  0.1933]]], device='cuda:0')\n","phi tensor([0.2928, 0.3521, 0.1719, 0.1832], device='cuda:0') mu tensor([[0.6019, 0.9290, 0.4132],\n","        [0.6325, 0.9086, 0.4475],\n","        [0.6112, 0.9228, 0.4237],\n","        [0.5931, 0.9350, 0.4032]], device='cuda:0') cov tensor([[[ 0.1600, -0.1068,  0.1803],\n","         [-0.1068,  0.0713, -0.1203],\n","         [ 0.1803, -0.1203,  0.2032]],\n","\n","        [[ 0.1481, -0.0988,  0.1669],\n","         [-0.0988,  0.0660, -0.1114],\n","         [ 0.1669, -0.1114,  0.1881]],\n","\n","        [[ 0.1567, -0.1046,  0.1765],\n","         [-0.1046,  0.0698, -0.1178],\n","         [ 0.1765, -0.1178,  0.1989]],\n","\n","        [[ 0.1635, -0.1092,  0.1842],\n","         [-0.1092,  0.0729, -0.1230],\n","         [ 0.1842, -0.1230,  0.2076]]], device='cuda:0')\n","phi tensor([0.2915, 0.3508, 0.1736, 0.1841], device='cuda:0') mu tensor([[0.6111, 0.9230, 0.4239],\n","        [0.6428, 0.9018, 0.4595],\n","        [0.6187, 0.9179, 0.4324],\n","        [0.6029, 0.9284, 0.4147]], device='cuda:0') cov tensor([[[ 0.1584, -0.1058,  0.1780],\n","         [-0.1058,  0.0707, -0.1189],\n","         [ 0.1780, -0.1189,  0.2001]],\n","\n","        [[ 0.1454, -0.0971,  0.1634],\n","         [-0.0971,  0.0648, -0.1091],\n","         [ 0.1634, -0.1091,  0.1836]],\n","\n","        [[ 0.1556, -0.1039,  0.1749],\n","         [-0.1039,  0.0694, -0.1168],\n","         [ 0.1749, -0.1168,  0.1965]],\n","\n","        [[ 0.1616, -0.1079,  0.1816],\n","         [-0.1079,  0.0721, -0.1213],\n","         [ 0.1816, -0.1213,  0.2041]]], device='cuda:0')\n"]},{"output_type":"stream","name":"stderr","text":[" 81%|████████  | 157/194 [00:04<00:00, 38.36it/s]"]},{"output_type":"stream","name":"stdout","text":["phi tensor([0.2917, 0.3528, 0.1732, 0.1823], device='cuda:0') mu tensor([[0.6035, 0.9282, 0.4154],\n","        [0.6353, 0.9069, 0.4511],\n","        [0.6124, 0.9223, 0.4253],\n","        [0.5881, 0.9385, 0.3982]], device='cuda:0') cov tensor([[[ 0.1595, -0.1066,  0.1790],\n","         [-0.1066,  0.0712, -0.1196],\n","         [ 0.1790, -0.1196,  0.2009]],\n","\n","        [[ 0.1470, -0.0982,  0.1650],\n","         [-0.0982,  0.0656, -0.1102],\n","         [ 0.1650, -0.1102,  0.1851]],\n","\n","        [[ 0.1563, -0.1044,  0.1754],\n","         [-0.1044,  0.0698, -0.1172],\n","         [ 0.1754, -0.1172,  0.1968]],\n","\n","        [[ 0.1651, -0.1103,  0.1852],\n","         [-0.1103,  0.0738, -0.1238],\n","         [ 0.1852, -0.1238,  0.2079]]], device='cuda:0')\n","phi tensor([0.2924, 0.3512, 0.1734, 0.1830], device='cuda:0') mu tensor([[0.5986, 0.9307, 0.4110],\n","        [0.6298, 0.9098, 0.4459],\n","        [0.6074, 0.9249, 0.4208],\n","        [0.5921, 0.9351, 0.4037]], device='cuda:0') cov tensor([[[ 0.1641, -0.1094,  0.1836],\n","         [-0.1094,  0.0730, -0.1224],\n","         [ 0.1836, -0.1224,  0.2054]],\n","\n","        [[ 0.1520, -0.1013,  0.1701],\n","         [-0.1013,  0.0676, -0.1134],\n","         [ 0.1701, -0.1134,  0.1903]],\n","\n","        [[ 0.1612, -0.1075,  0.1803],\n","         [-0.1075,  0.0718, -0.1203],\n","         [ 0.1803, -0.1203,  0.2018]],\n","\n","        [[ 0.1674, -0.1116,  0.1872],\n","         [-0.1116,  0.0745, -0.1249],\n","         [ 0.1872, -0.1249,  0.2095]]], device='cuda:0')\n","phi tensor([0.2919, 0.3535, 0.1722, 0.1825], device='cuda:0') mu tensor([[0.6106, 0.9226, 0.4249],\n","        [0.6425, 0.9013, 0.4605],\n","        [0.6213, 0.9155, 0.4368],\n","        [0.5988, 0.9305, 0.4117]], device='cuda:0') cov tensor([[[ 0.1645, -0.1097,  0.1835],\n","         [-0.1097,  0.0732, -0.1224],\n","         [ 0.1835, -0.1224,  0.2048]],\n","\n","        [[ 0.1510, -0.1007,  0.1685],\n","         [-0.1007,  0.0672, -0.1124],\n","         [ 0.1685, -0.1124,  0.1881]],\n","\n","        [[ 0.1609, -0.1073,  0.1795],\n","         [-0.1073,  0.0716, -0.1197],\n","         [ 0.1795, -0.1197,  0.2003]],\n","\n","        [[ 0.1696, -0.1131,  0.1893],\n","         [-0.1131,  0.0755, -0.1262],\n","         [ 0.1893, -0.1262,  0.2112]]], device='cuda:0')\n","phi tensor([0.2907, 0.3516, 0.1740, 0.1836], device='cuda:0') mu tensor([[0.6088, 0.9234, 0.4232],\n","        [0.6397, 0.9029, 0.4576],\n","        [0.6155, 0.9190, 0.4307],\n","        [0.5962, 0.9319, 0.4092]], device='cuda:0') cov tensor([[[ 0.1632, -0.1088,  0.1817],\n","         [-0.1088,  0.0725, -0.1211],\n","         [ 0.1817, -0.1211,  0.2024]],\n","\n","        [[ 0.1504, -0.1002,  0.1675],\n","         [-0.1002,  0.0668, -0.1116],\n","         [ 0.1675, -0.1116,  0.1866]],\n","\n","        [[ 0.1606, -0.1070,  0.1788],\n","         [-0.1070,  0.0714, -0.1192],\n","         [ 0.1788, -0.1192,  0.1993]],\n","\n","        [[ 0.1678, -0.1118,  0.1869],\n","         [-0.1118,  0.0746, -0.1246],\n","         [ 0.1869, -0.1246,  0.2082]]], device='cuda:0')\n","phi tensor([0.2921, 0.3535, 0.1719, 0.1824], device='cuda:0') mu tensor([[0.6049, 0.9261, 0.4192],\n","        [0.6373, 0.9045, 0.4552],\n","        [0.6119, 0.9214, 0.4269],\n","        [0.5967, 0.9316, 0.4100]], device='cuda:0') cov tensor([[[ 0.1682, -0.1121,  0.1870],\n","         [-0.1121,  0.0748, -0.1246],\n","         [ 0.1870, -0.1246,  0.2078]],\n","\n","        [[ 0.1552, -0.1035,  0.1726],\n","         [-0.1035,  0.0690, -0.1150],\n","         [ 0.1726, -0.1150,  0.1919]],\n","\n","        [[ 0.1657, -0.1104,  0.1841],\n","         [-0.1104,  0.0736, -0.1227],\n","         [ 0.1841, -0.1227,  0.2047]],\n","\n","        [[ 0.1718, -0.1145,  0.1909],\n","         [-0.1145,  0.0764, -0.1273],\n","         [ 0.1909, -0.1273,  0.2122]]], device='cuda:0')\n","phi tensor([0.2921, 0.3541, 0.1716, 0.1822], device='cuda:0') mu tensor([[0.6245, 0.9127, 0.4414],\n","        [0.6552, 0.8922, 0.4755],\n","        [0.6343, 0.9061, 0.4523],\n","        [0.6179, 0.9171, 0.4340]], device='cuda:0') cov tensor([[[ 0.1603, -0.1068,  0.1778],\n","         [-0.1068,  0.0712, -0.1184],\n","         [ 0.1778, -0.1184,  0.1972]],\n","\n","        [[ 0.1469, -0.0978,  0.1629],\n","         [-0.0978,  0.0652, -0.1085],\n","         [ 0.1629, -0.1085,  0.1807]],\n","\n","        [[ 0.1563, -0.1041,  0.1734],\n","         [-0.1041,  0.0694, -0.1155],\n","         [ 0.1734, -0.1155,  0.1924]],\n","\n","        [[ 0.1634, -0.1088,  0.1812],\n","         [-0.1088,  0.0725, -0.1208],\n","         [ 0.1812, -0.1208,  0.2011]]], device='cuda:0')\n","phi tensor([0.2908, 0.3510, 0.1716, 0.1866], device='cuda:0') mu tensor([[0.6089, 0.9232, 0.4246],\n","        [0.6418, 0.9013, 0.4610],\n","        [0.6156, 0.9187, 0.4320],\n","        [0.6026, 0.9275, 0.4176]], device='cuda:0') cov tensor([[[ 0.1684, -0.1123,  0.1863],\n","         [-0.1123,  0.0749, -0.1242],\n","         [ 0.1863, -0.1242,  0.2061]],\n","\n","        [[ 0.1552, -0.1034,  0.1716],\n","         [-0.1034,  0.0690, -0.1144],\n","         [ 0.1716, -0.1144,  0.1899]],\n","\n","        [[ 0.1665, -0.1110,  0.1842],\n","         [-0.1110,  0.0740, -0.1228],\n","         [ 0.1842, -0.1228,  0.2038]],\n","\n","        [[ 0.1720, -0.1147,  0.1903],\n","         [-0.1147,  0.0765, -0.1269],\n","         [ 0.1903, -0.1269,  0.2105]]], device='cuda:0')\n","phi tensor([0.2920, 0.3537, 0.1715, 0.1828], device='cuda:0') mu tensor([[0.6120, 0.9208, 0.4284],\n","        [0.6428, 0.9003, 0.4624],\n","        [0.6191, 0.9161, 0.4363],\n","        [0.6013, 0.9279, 0.4166]], device='cuda:0') cov tensor([[[ 0.1675, -0.1117,  0.1849],\n","         [-0.1117,  0.0744, -0.1232],\n","         [ 0.1849, -0.1232,  0.2040]],\n","\n","        [[ 0.1544, -0.1029,  0.1704],\n","         [-0.1029,  0.0686, -0.1136],\n","         [ 0.1704, -0.1136,  0.1881]],\n","\n","        [[ 0.1647, -0.1097,  0.1817],\n","         [-0.1097,  0.0731, -0.1211],\n","         [ 0.1817, -0.1211,  0.2004]],\n","\n","        [[ 0.1720, -0.1146,  0.1897],\n","         [-0.1146,  0.0764, -0.1265],\n","         [ 0.1897, -0.1265,  0.2094]]], device='cuda:0')\n","phi "]},{"output_type":"stream","name":"stderr","text":[" 86%|████████▌ | 166/194 [00:04<00:00, 39.01it/s]"]},{"output_type":"stream","name":"stdout","text":["tensor([0.2925, 0.3528, 0.1715, 0.1833], device='cuda:0') mu tensor([[0.6040, 0.9264, 0.4199],\n","        [0.6379, 0.9038, 0.4573],\n","        [0.6125, 0.9207, 0.4293],\n","        [0.5941, 0.9331, 0.4089]], device='cuda:0') cov tensor([[[ 0.1775, -0.1184,  0.1955],\n","         [-0.1184,  0.0790, -0.1304],\n","         [ 0.1955, -0.1304,  0.2153]],\n","\n","        [[ 0.1637, -0.1092,  0.1803],\n","         [-0.1092,  0.0728, -0.1202],\n","         [ 0.1803, -0.1202,  0.1985]],\n","\n","        [[ 0.1742, -0.1162,  0.1918],\n","         [-0.1162,  0.0775, -0.1280],\n","         [ 0.1918, -0.1280,  0.2113]],\n","\n","        [[ 0.1813, -0.1209,  0.1996],\n","         [-0.1209,  0.0807, -0.1332],\n","         [ 0.1996, -0.1332,  0.2199]]], device='cuda:0')\n","phi tensor([0.2905, 0.3528, 0.1727, 0.1840], device='cuda:0') mu tensor([[0.6094, 0.9229, 0.4257],\n","        [0.6430, 0.9005, 0.4626],\n","        [0.6253, 0.9124, 0.4431],\n","        [0.6095, 0.9229, 0.4258]], device='cuda:0') cov tensor([[[ 0.1741, -0.1161,  0.1913],\n","         [-0.1161,  0.0774, -0.1276],\n","         [ 0.1913, -0.1276,  0.2103]],\n","\n","        [[ 0.1600, -0.1067,  0.1759],\n","         [-0.1067,  0.0712, -0.1173],\n","         [ 0.1759, -0.1173,  0.1934]],\n","\n","        [[ 0.1676, -0.1117,  0.1841],\n","         [-0.1117,  0.0745, -0.1228],\n","         [ 0.1841, -0.1228,  0.2024]],\n","\n","        [[ 0.1735, -0.1157,  0.1907],\n","         [-0.1157,  0.0772, -0.1272],\n","         [ 0.1907, -0.1272,  0.2096]]], device='cuda:0')\n","phi tensor([0.2909, 0.3521, 0.1726, 0.1844], device='cuda:0') mu tensor([[0.6097, 0.9226, 0.4265],\n","        [0.6440, 0.8997, 0.4641],\n","        [0.6162, 0.9183, 0.4337],\n","        [0.5944, 0.9328, 0.4098]], device='cuda:0') cov tensor([[[ 0.1765, -0.1175,  0.1932],\n","         [-0.1175,  0.0783, -0.1287],\n","         [ 0.1932, -0.1287,  0.2115]],\n","\n","        [[ 0.1619, -0.1078,  0.1773],\n","         [-0.1078,  0.0718, -0.1181],\n","         [ 0.1773, -0.1181,  0.1941]],\n","\n","        [[ 0.1739, -0.1158,  0.1903],\n","         [-0.1158,  0.0771, -0.1268],\n","         [ 0.1903, -0.1268,  0.2084]],\n","\n","        [[ 0.1820, -0.1212,  0.1993],\n","         [-0.1212,  0.0808, -0.1327],\n","         [ 0.1993, -0.1327,  0.2182]]], device='cuda:0')\n","phi tensor([0.2906, 0.3526, 0.1710, 0.1858], device='cuda:0') mu tensor([[0.6206, 0.9153, 0.4385],\n","        [0.6488, 0.8965, 0.4694],\n","        [0.6249, 0.9124, 0.4433],\n","        [0.6084, 0.9234, 0.4252]], device='cuda:0') cov tensor([[[ 0.1727, -0.1150,  0.1886],\n","         [-0.1150,  0.0766, -0.1256],\n","         [ 0.1886, -0.1256,  0.2061]],\n","\n","        [[ 0.1605, -0.1069,  0.1753],\n","         [-0.1069,  0.0711, -0.1167],\n","         [ 0.1753, -0.1167,  0.1915]],\n","\n","        [[ 0.1717, -0.1143,  0.1876],\n","         [-0.1143,  0.0761, -0.1249],\n","         [ 0.1876, -0.1249,  0.2049]],\n","\n","        [[ 0.1781, -0.1185,  0.1945],\n","         [-0.1185,  0.0789, -0.1295],\n","         [ 0.1945, -0.1295,  0.2124]]], device='cuda:0')\n","phi tensor([0.2909, 0.3566, 0.1716, 0.1809], device='cuda:0') mu tensor([[0.6184, 0.9166, 0.4366],\n","        [0.6508, 0.8950, 0.4720],\n","        [0.6309, 0.9083, 0.4503],\n","        [0.6103, 0.9220, 0.4278]], device='cuda:0') cov tensor([[[ 0.1776, -0.1184,  0.1937],\n","         [-0.1184,  0.0789, -0.1291],\n","         [ 0.1937, -0.1291,  0.2112]],\n","\n","        [[ 0.1634, -0.1089,  0.1782],\n","         [-0.1089,  0.0726, -0.1187],\n","         [ 0.1782, -0.1187,  0.1943]],\n","\n","        [[ 0.1724, -0.1149,  0.1879],\n","         [-0.1149,  0.0766, -0.1252],\n","         [ 0.1879, -0.1252,  0.2049]],\n","\n","        [[ 0.1806, -0.1204,  0.1969],\n","         [-0.1204,  0.0802, -0.1312],\n","         [ 0.1969, -0.1312,  0.2147]]], device='cuda:0')\n","phi tensor([0.2916, 0.3510, 0.1724, 0.1849], device='cuda:0') mu tensor([[0.6048, 0.9256, 0.4218],\n","        [0.6425, 0.9005, 0.4628],\n","        [0.6199, 0.9155, 0.4381],\n","        [0.6077, 0.9237, 0.4248]], device='cuda:0') cov tensor([[[ 0.1832, -0.1221,  0.1995],\n","         [-0.1221,  0.0814, -0.1330],\n","         [ 0.1995, -0.1330,  0.2172]],\n","\n","        [[ 0.1679, -0.1119,  0.1827],\n","         [-0.1119,  0.0746, -0.1218],\n","         [ 0.1827, -0.1218,  0.1989]],\n","\n","        [[ 0.1775, -0.1183,  0.1932],\n","         [-0.1183,  0.0788, -0.1288],\n","         [ 0.1932, -0.1288,  0.2105]],\n","\n","        [[ 0.1824, -0.1215,  0.1986],\n","         [-0.1215,  0.0810, -0.1324],\n","         [ 0.1986, -0.1324,  0.2163]]], device='cuda:0')\n","phi tensor([0.2931, 0.3553, 0.1705, 0.1811], device='cuda:0') mu tensor([[0.6103, 0.9216, 0.4281],\n","        [0.6423, 0.9003, 0.4629],\n","        [0.6271, 0.9105, 0.4462],\n","        [0.6101, 0.9218, 0.4278]], device='cuda:0') cov tensor([[[ 0.1801, -0.1200,  0.1958],\n","         [-0.1200,  0.0800, -0.1305],\n","         [ 0.1958, -0.1305,  0.2130]],\n","\n","        [[ 0.1667, -0.1110,  0.1813],\n","         [-0.1110,  0.0740, -0.1208],\n","         [ 0.1813, -0.1208,  0.1972]],\n","\n","        [[ 0.1733, -0.1155,  0.1886],\n","         [-0.1155,  0.0770, -0.1257],\n","         [ 0.1886, -0.1257,  0.2052]],\n","\n","        [[ 0.1802, -0.1201,  0.1961],\n","         [-0.1201,  0.0801, -0.1307],\n","         [ 0.1961, -0.1307,  0.2133]]], device='cuda:0')\n","phi tensor([0.2899, 0.3566, 0.1720, 0.1815], device='cuda:0') mu tensor([[0.6343, 0.9053, 0.4546],\n","        [0.6671, 0.8834, 0.4902],\n","        [0.6416, 0.9004, 0.4626],\n","        [0.6186, 0.9157, 0.4377]], device='cuda:0') cov tensor([[[ 0.1711, -0.1139,  0.1857],\n","         [-0.1139,  0.0759, -0.1237],\n","         [ 0.1857, -0.1237,  0.2016]],\n","\n","        [[ 0.1560, -0.1039,  0.1693],\n","         [-0.1039,  0.0692, -0.1128],\n","         [ 0.1693, -0.1128,  0.1838]],\n","\n","        [[ 0.1682, -0.1121,  0.1826],\n","         [-0.1121,  0.0747, -0.1216],\n","         [ 0.1826, -0.1216,  0.1983]],\n","\n","        [[ 0.1780, -0.1186,  0.1932],\n","         [-0.1186,  0.0790, -0.1287],\n","         [ 0.1932, -0.1287,  0.2098]]], device='cuda:0')\n","phi tensor([0.2908, 0.3562, 0.1714, 0.1816], device='cuda:0') mu tensor([[0.6388, 0.9024, 0.4595],\n","        [0.6701, 0.8815, 0.4935],\n","        [0.6400, 0.9016, 0.4608],\n","        [0.6187, 0.9157, 0.4376]], device='cuda:0') cov tensor([[[ 0.1742, -0.1161,  0.1889],\n","         [-0.1161,  0.0774, -0.1260],\n","         [ 0.1889, -0.1260,  0.2050]],\n","\n","        [[ 0.1592, -0.1061,  0.1727],\n","         [-0.1061,  0.0707, -0.1151],\n","         [ 0.1727, -0.1151,  0.1874]],\n","\n","        [[ 0.1733, -0.1155,  0.1880],\n","         [-0.1155,  0.0770, -0.1253],\n","         [ 0.1880, -0.1253,  0.2040]],\n","\n","        [[ 0.1825, -0.1217,  0.1980],\n","         [-0.1217,  0.0811, -0.1320],\n","         [ 0.1980, -0.1320,  0.2149]]], device='cuda:0')\n"]},{"output_type":"stream","name":"stderr","text":[" 90%|████████▉ | 174/194 [00:04<00:00, 38.53it/s]"]},{"output_type":"stream","name":"stdout","text":["phi tensor([0.2912, 0.3554, 0.1713, 0.1822], device='cuda:0') mu tensor([[0.6018, 0.9273, 0.4194],\n","        [0.6369, 0.9040, 0.4574],\n","        [0.6166, 0.9174, 0.4354],\n","        [0.5979, 0.9299, 0.4151]], device='cuda:0') cov tensor([[[ 0.1892, -0.1261,  0.2048],\n","         [-0.1261,  0.0841, -0.1365],\n","         [ 0.2048, -0.1365,  0.2217]],\n","\n","        [[ 0.1746, -0.1164,  0.1890],\n","         [-0.1164,  0.0776, -0.1260],\n","         [ 0.1890, -0.1260,  0.2046]],\n","\n","        [[ 0.1841, -0.1227,  0.1993],\n","         [-0.1227,  0.0818, -0.1328],\n","         [ 0.1993, -0.1328,  0.2158]],\n","\n","        [[ 0.1912, -0.1274,  0.2070],\n","         [-0.1274,  0.0850, -0.1380],\n","         [ 0.2070, -0.1380,  0.2241]]], device='cuda:0')\n","phi tensor([0.2928, 0.3528, 0.1719, 0.1826], device='cuda:0') mu tensor([[0.6008, 0.9280, 0.4182],\n","        [0.6353, 0.9050, 0.4555],\n","        [0.6085, 0.9229, 0.4264],\n","        [0.5927, 0.9335, 0.4093]], device='cuda:0') cov tensor([[[ 0.1911, -0.1274,  0.2069],\n","         [-0.1274,  0.0850, -0.1380],\n","         [ 0.2069, -0.1380,  0.2239]],\n","\n","        [[ 0.1773, -0.1182,  0.1919],\n","         [-0.1182,  0.0788, -0.1280],\n","         [ 0.1919, -0.1280,  0.2077]],\n","\n","        [[ 0.1879, -0.1253,  0.2034],\n","         [-0.1253,  0.0836, -0.1356],\n","         [ 0.2034, -0.1356,  0.2202]],\n","\n","        [[ 0.1939, -0.1293,  0.2100],\n","         [-0.1293,  0.0863, -0.1400],\n","         [ 0.2100, -0.1400,  0.2274]]], device='cuda:0')\n","phi tensor([0.2900, 0.3567, 0.1710, 0.1824], device='cuda:0') mu tensor([[0.6272, 0.9102, 0.4474],\n","        [0.6613, 0.8875, 0.4842],\n","        [0.6269, 0.9104, 0.4471],\n","        [0.6067, 0.9240, 0.4252]], device='cuda:0') cov tensor([[[ 0.1839, -0.1227,  0.1986],\n","         [-0.1227,  0.0818, -0.1324],\n","         [ 0.1986, -0.1324,  0.2144]],\n","\n","        [[ 0.1687, -0.1125,  0.1821],\n","         [-0.1125,  0.0750, -0.1215],\n","         [ 0.1821, -0.1215,  0.1966]],\n","\n","        [[ 0.1839, -0.1226,  0.1985],\n","         [-0.1226,  0.0818, -0.1324],\n","         [ 0.1985, -0.1324,  0.2144]],\n","\n","        [[ 0.1926, -0.1285,  0.2080],\n","         [-0.1285,  0.0857, -0.1387],\n","         [ 0.2080, -0.1387,  0.2245]]], device='cuda:0')\n","phi tensor([0.2912, 0.3546, 0.1720, 0.1822], device='cuda:0') mu tensor([[0.6240, 0.9119, 0.4445],\n","        [0.6563, 0.8903, 0.4794],\n","        [0.6328, 0.9060, 0.4540],\n","        [0.6103, 0.9211, 0.4296]], device='cuda:0') cov tensor([[[ 0.1841, -0.1229,  0.1986],\n","         [-0.1229,  0.0821, -0.1326],\n","         [ 0.1986, -0.1326,  0.2143]],\n","\n","        [[ 0.1698, -0.1133,  0.1832],\n","         [-0.1133,  0.0757, -0.1223],\n","         [ 0.1832, -0.1223,  0.1976]],\n","\n","        [[ 0.1809, -0.1207,  0.1951],\n","         [-0.1207,  0.0806, -0.1303],\n","         [ 0.1951, -0.1303,  0.2105]],\n","\n","        [[ 0.1905, -0.1272,  0.2055],\n","         [-0.1272,  0.0849, -0.1372],\n","         [ 0.2055, -0.1372,  0.2217]]], device='cuda:0')\n","phi tensor([0.2915, 0.3567, 0.1690, 0.1828], device='cuda:0') mu tensor([[0.6293, 0.9087, 0.4502],\n","        [0.6634, 0.8859, 0.4870],\n","        [0.6304, 0.9080, 0.4514],\n","        [0.6142, 0.9188, 0.4340]], device='cuda:0') cov tensor([[[ 0.1849, -0.1236,  0.1993],\n","         [-0.1236,  0.0826, -0.1332],\n","         [ 0.1993, -0.1332,  0.2148]],\n","\n","        [[ 0.1692, -0.1131,  0.1824],\n","         [-0.1131,  0.0756, -0.1219],\n","         [ 0.1824, -0.1219,  0.1966]],\n","\n","        [[ 0.1853, -0.1238,  0.1997],\n","         [-0.1238,  0.0828, -0.1335],\n","         [ 0.1997, -0.1335,  0.2152]],\n","\n","        [[ 0.1925, -0.1286,  0.2074],\n","         [-0.1286,  0.0860, -0.1386],\n","         [ 0.2074, -0.1386,  0.2236]]], device='cuda:0')\n","phi tensor([0.2921, 0.3553, 0.1711, 0.1814], device='cuda:0') mu tensor([[0.6200, 0.9142, 0.4406],\n","        [0.6572, 0.8893, 0.4808],\n","        [0.6307, 0.9070, 0.4522],\n","        [0.6191, 0.9147, 0.4398]], device='cuda:0') cov tensor([[[ 0.1876, -0.1253,  0.2022],\n","         [-0.1253,  0.0837, -0.1351],\n","         [ 0.2022, -0.1351,  0.2180]],\n","\n","        [[ 0.1713, -0.1144,  0.1847],\n","         [-0.1144,  0.0765, -0.1234],\n","         [ 0.1847, -0.1234,  0.1991]],\n","\n","        [[ 0.1832, -0.1223,  0.1975],\n","         [-0.1223,  0.0817, -0.1318],\n","         [ 0.1975, -0.1318,  0.2128]],\n","\n","        [[ 0.1881, -0.1256,  0.2027],\n","         [-0.1256,  0.0839, -0.1354],\n","         [ 0.2027, -0.1354,  0.2185]]], device='cuda:0')\n","phi tensor([0.2914, 0.3557, 0.1720, 0.1810], device='cuda:0') mu tensor([[0.6197, 0.9144, 0.4404],\n","        [0.6559, 0.8902, 0.4795],\n","        [0.6295, 0.9079, 0.4509],\n","        [0.6065, 0.9233, 0.4262]], device='cuda:0') cov tensor([[[ 0.1915, -0.1280,  0.2063],\n","         [-0.1280,  0.0856, -0.1379],\n","         [ 0.2063, -0.1379,  0.2222]],\n","\n","        [[ 0.1757, -0.1175,  0.1893],\n","         [-0.1175,  0.0786, -0.1265],\n","         [ 0.1893, -0.1265,  0.2039]],\n","\n","        [[ 0.1877, -0.1255,  0.2022],\n","         [-0.1255,  0.0839, -0.1352],\n","         [ 0.2022, -0.1352,  0.2178]],\n","\n","        [[ 0.1972, -0.1318,  0.2124],\n","         [-0.1318,  0.0881, -0.1420],\n","         [ 0.2124, -0.1420,  0.2287]]], device='cuda:0')\n","phi tensor([0.2912, 0.3571, 0.1715, 0.1801], device='cuda:0') mu tensor([[0.6278, 0.9088, 0.4496],\n","        [0.6626, 0.8856, 0.4870],\n","        [0.6344, 0.9044, 0.4567],\n","        [0.6146, 0.9177, 0.4354]], device='cuda:0') cov tensor([[[ 0.1893, -0.1265,  0.2035],\n","         [-0.1265,  0.0845, -0.1359],\n","         [ 0.2035, -0.1359,  0.2188]],\n","\n","        [[ 0.1735, -0.1159,  0.1865],\n","         [-0.1159,  0.0775, -0.1246],\n","         [ 0.1865, -0.1246,  0.2005]],\n","\n","        [[ 0.1859, -0.1242,  0.1998],\n","         [-0.1242,  0.0830, -0.1335],\n","         [ 0.1998, -0.1335,  0.2148]],\n","\n","        [[ 0.1944, -0.1299,  0.2090],\n","         [-0.1299,  0.0868, -0.1396],\n","         [ 0.2090, -0.1396,  0.2246]]], device='cuda:0')\n"]},{"output_type":"stream","name":"stderr","text":[" 94%|█████████▍| 182/194 [00:04<00:00, 37.59it/s]"]},{"output_type":"stream","name":"stdout","text":["phi tensor([0.2895, 0.3602, 0.1715, 0.1788], device='cuda:0') mu tensor([[0.6406, 0.8998, 0.4639],\n","        [0.6766, 0.8758, 0.5026],\n","        [0.6478, 0.8950, 0.4717],\n","        [0.6288, 0.9077, 0.4511]], device='cuda:0') cov tensor([[[ 0.1840, -0.1230,  0.1977],\n","         [-0.1230,  0.0823, -0.1322],\n","         [ 0.1977, -0.1322,  0.2125]],\n","\n","        [[ 0.1668, -0.1116,  0.1793],\n","         [-0.1116,  0.0746, -0.1199],\n","         [ 0.1793, -0.1199,  0.1927]],\n","\n","        [[ 0.1807, -0.1208,  0.1943],\n","         [-0.1208,  0.0808, -0.1299],\n","         [ 0.1943, -0.1299,  0.2088]],\n","\n","        [[ 0.1893, -0.1265,  0.2034],\n","         [-0.1265,  0.0846, -0.1360],\n","         [ 0.2034, -0.1360,  0.2187]]], device='cuda:0')\n","phi tensor([0.2926, 0.3585, 0.1709, 0.1780], device='cuda:0') mu tensor([[0.6137, 0.9179, 0.4352],\n","        [0.6498, 0.8937, 0.4740],\n","        [0.6250, 0.9103, 0.4474],\n","        [0.6052, 0.9235, 0.4262]], device='cuda:0') cov tensor([[[ 0.1970, -0.1319,  0.2117],\n","         [-0.1319,  0.0883, -0.1417],\n","         [ 0.2117, -0.1417,  0.2275]],\n","\n","        [[ 0.1818, -0.1217,  0.1954],\n","         [-0.1217,  0.0815, -0.1308],\n","         [ 0.1954, -0.1308,  0.2100]],\n","\n","        [[ 0.1920, -0.1285,  0.2063],\n","         [-0.1285,  0.0861, -0.1381],\n","         [ 0.2063, -0.1381,  0.2217]],\n","\n","        [[ 0.1999, -0.1339,  0.2148],\n","         [-0.1339,  0.0897, -0.1439],\n","         [ 0.2148, -0.1439,  0.2309]]], device='cuda:0')\n","phi tensor([0.2926, 0.3558, 0.1710, 0.1806], device='cuda:0') mu tensor([[0.6113, 0.9188, 0.4330],\n","        [0.6479, 0.8943, 0.4724],\n","        [0.6135, 0.9174, 0.4354],\n","        [0.5940, 0.9304, 0.4144]], device='cuda:0') cov tensor([[[ 0.2022, -0.1353,  0.2173],\n","         [-0.1353,  0.0905, -0.1454],\n","         [ 0.2173, -0.1454,  0.2336]],\n","\n","        [[ 0.1865, -0.1248,  0.2005],\n","         [-0.1248,  0.0835, -0.1341],\n","         [ 0.2005, -0.1341,  0.2155]],\n","\n","        [[ 0.2018, -0.1350,  0.2169],\n","         [-0.1350,  0.0904, -0.1451],\n","         [ 0.2169, -0.1451,  0.2332]],\n","\n","        [[ 0.2093, -0.1400,  0.2250],\n","         [-0.1400,  0.0937, -0.1505],\n","         [ 0.2250, -0.1505,  0.2418]]], device='cuda:0')\n","phi tensor([0.2907, 0.3559, 0.1712, 0.1822], device='cuda:0') mu tensor([[0.6185, 0.9137, 0.4413],\n","        [0.6545, 0.8897, 0.4800],\n","        [0.6219, 0.9115, 0.4450],\n","        [0.6036, 0.9237, 0.4254]], device='cuda:0') cov tensor([[[ 0.1964, -0.1315,  0.2111],\n","         [-0.1315,  0.0881, -0.1414],\n","         [ 0.2111, -0.1414,  0.2270]],\n","\n","        [[ 0.1805, -0.1208,  0.1940],\n","         [-0.1208,  0.0809, -0.1299],\n","         [ 0.1940, -0.1299,  0.2086]],\n","\n","        [[ 0.1961, -0.1313,  0.2108],\n","         [-0.1313,  0.0879, -0.1412],\n","         [ 0.2108, -0.1412,  0.2266]],\n","\n","        [[ 0.2035, -0.1363,  0.2187],\n","         [-0.1363,  0.0913, -0.1465],\n","         [ 0.2187, -0.1465,  0.2351]]], device='cuda:0')\n","phi tensor([0.2931, 0.3576, 0.1706, 0.1787], device='cuda:0') mu tensor([[0.6222, 0.9110, 0.4453],\n","        [0.6570, 0.8877, 0.4827],\n","        [0.6339, 0.9032, 0.4578],\n","        [0.6169, 0.9146, 0.4396]], device='cuda:0') cov tensor([[[ 0.1964, -0.1315,  0.2114],\n","         [-0.1315,  0.0882, -0.1416],\n","         [ 0.2114, -0.1416,  0.2275]],\n","\n","        [[ 0.1812, -0.1213,  0.1950],\n","         [-0.1213,  0.0813, -0.1306],\n","         [ 0.1950, -0.1306,  0.2099]],\n","\n","        [[ 0.1924, -0.1289,  0.2070],\n","         [-0.1289,  0.0864, -0.1387],\n","         [ 0.2070, -0.1387,  0.2228]],\n","\n","        [[ 0.2000, -0.1340,  0.2152],\n","         [-0.1340,  0.0898, -0.1442],\n","         [ 0.2152, -0.1442,  0.2316]]], device='cuda:0')\n","phi tensor([0.2926, 0.3571, 0.1692, 0.1811], device='cuda:0') mu tensor([[0.6101, 0.9186, 0.4329],\n","        [0.6476, 0.8935, 0.4732],\n","        [0.6197, 0.9123, 0.4431],\n","        [0.6029, 0.9235, 0.4251]], device='cuda:0') cov tensor([[[ 0.2026, -0.1356,  0.2178],\n","         [-0.1356,  0.0908, -0.1459],\n","         [ 0.2178, -0.1459,  0.2342]],\n","\n","        [[ 0.1870, -0.1252,  0.2010],\n","         [-0.1252,  0.0838, -0.1346],\n","         [ 0.2010, -0.1346,  0.2162]],\n","\n","        [[ 0.1988, -0.1331,  0.2138],\n","         [-0.1331,  0.0891, -0.1431],\n","         [ 0.2138, -0.1431,  0.2299]],\n","\n","        [[ 0.2055, -0.1376,  0.2209],\n","         [-0.1376,  0.0922, -0.1479],\n","         [ 0.2209, -0.1479,  0.2376]]], device='cuda:0')\n","phi tensor([0.2903, 0.3572, 0.1694, 0.1832], device='cuda:0') mu tensor([[0.6268, 0.9069, 0.4513],\n","        [0.6619, 0.8834, 0.4890],\n","        [0.6303, 0.9045, 0.4551],\n","        [0.6133, 0.9159, 0.4368]], device='cuda:0') cov tensor([[[ 0.1971, -0.1320,  0.2122],\n","         [-0.1320,  0.0885, -0.1421],\n","         [ 0.2122, -0.1421,  0.2284]],\n","\n","        [[ 0.1813, -0.1215,  0.1952],\n","         [-0.1215,  0.0814, -0.1307],\n","         [ 0.1952, -0.1307,  0.2101]],\n","\n","        [[ 0.1957, -0.1310,  0.2106],\n","         [-0.1310,  0.0878, -0.1411],\n","         [ 0.2106, -0.1411,  0.2267]],\n","\n","        [[ 0.2032, -0.1361,  0.2187],\n","         [-0.1361,  0.0912, -0.1465],\n","         [ 0.2187, -0.1465,  0.2354]]], device='cuda:0')\n","phi tensor([0.2911, 0.3576, 0.1712, 0.1801], device='cuda:0') mu tensor([[0.6279, 0.9057, 0.4530],\n","        [0.6653, 0.8805, 0.4933],\n","        [0.6404, 0.8972, 0.4664],\n","        [0.6185, 0.9118, 0.4429]], device='cuda:0') cov tensor([[[ 0.1978, -0.1326,  0.2130],\n","         [-0.1326,  0.0889, -0.1428],\n","         [ 0.2130, -0.1428,  0.2294]],\n","\n","        [[ 0.1808, -0.1211,  0.1946],\n","         [-0.1211,  0.0812, -0.1304],\n","         [ 0.1946, -0.1304,  0.2096]],\n","\n","        [[ 0.1927, -0.1291,  0.2075],\n","         [-0.1291,  0.0865, -0.1390],\n","         [ 0.2075, -0.1390,  0.2235]],\n","\n","        [[ 0.2020, -0.1353,  0.2175],\n","         [-0.1353,  0.0907, -0.1458],\n","         [ 0.2175, -0.1458,  0.2343]]], device='cuda:0')\n"]},{"output_type":"stream","name":"stderr","text":[" 98%|█████████▊| 190/194 [00:05<00:00, 37.93it/s]"]},{"output_type":"stream","name":"stdout","text":["phi tensor([0.2918, 0.3592, 0.1699, 0.1791], device='cuda:0') mu tensor([[0.6274, 0.9055, 0.4527],\n","        [0.6663, 0.8794, 0.4946],\n","        [0.6355, 0.9001, 0.4614],\n","        [0.6146, 0.9141, 0.4389]], device='cuda:0') cov tensor([[[ 0.1979, -0.1327,  0.2134],\n","         [-0.1327,  0.0890, -0.1431],\n","         [ 0.2134, -0.1431,  0.2301]],\n","\n","        [[ 0.1796, -0.1204,  0.1936],\n","         [-0.1204,  0.0807, -0.1298],\n","         [ 0.1936, -0.1298,  0.2088]],\n","\n","        [[ 0.1946, -0.1305,  0.2098],\n","         [-0.1305,  0.0875, -0.1407],\n","         [ 0.2098, -0.1407,  0.2262]],\n","\n","        [[ 0.2035, -0.1364,  0.2193],\n","         [-0.1364,  0.0915, -0.1471],\n","         [ 0.2193, -0.1471,  0.2365]]], device='cuda:0')\n","phi tensor([0.2899, 0.3564, 0.1709, 0.1828], device='cuda:0') mu tensor([[0.6246, 0.9068, 0.4503],\n","        [0.6611, 0.8824, 0.4896],\n","        [0.6295, 0.9036, 0.4555],\n","        [0.6117, 0.9155, 0.4364]], device='cuda:0') cov tensor([[[ 0.2003, -0.1345,  0.2162],\n","         [-0.1345,  0.0904, -0.1452],\n","         [ 0.2162, -0.1452,  0.2334]],\n","\n","        [[ 0.1840, -0.1236,  0.1986],\n","         [-0.1236,  0.0830, -0.1334],\n","         [ 0.1986, -0.1334,  0.2144]],\n","\n","        [[ 0.1984, -0.1332,  0.2141],\n","         [-0.1332,  0.0895, -0.1438],\n","         [ 0.2141, -0.1438,  0.2311]],\n","\n","        [[ 0.2056, -0.1381,  0.2219],\n","         [-0.1381,  0.0928, -0.1491],\n","         [ 0.2219, -0.1491,  0.2395]]], device='cuda:0')\n","phi tensor([0.2925, 0.3612, 0.1699, 0.1764], device='cuda:0') mu tensor([[0.6400, 0.8958, 0.4676],\n","        [0.6758, 0.8718, 0.5061],\n","        [0.6496, 0.8893, 0.4779],\n","        [0.6286, 0.9033, 0.4553]], device='cuda:0') cov tensor([[[ 0.1949, -0.1309,  0.2103],\n","         [-0.1309,  0.0880, -0.1413],\n","         [ 0.2103, -0.1413,  0.2270]],\n","\n","        [[ 0.1777, -0.1193,  0.1918],\n","         [-0.1193,  0.0802, -0.1288],\n","         [ 0.1918, -0.1288,  0.2070]],\n","\n","        [[ 0.1907, -0.1281,  0.2059],\n","         [-0.1281,  0.0861, -0.1383],\n","         [ 0.2059, -0.1383,  0.2222]],\n","\n","        [[ 0.2001, -0.1344,  0.2160],\n","         [-0.1344,  0.0903, -0.1451],\n","         [ 0.2160, -0.1451,  0.2332]]], device='cuda:0')\n","phi tensor([0.2909, 0.3588, 0.1702, 0.1801], device='cuda:0') mu tensor([[0.6311, 0.9015, 0.4581],\n","        [0.6687, 0.8763, 0.4986],\n","        [0.6402, 0.8954, 0.4678],\n","        [0.6203, 0.9088, 0.4462]], device='cuda:0') cov tensor([[[ 0.2031, -0.1365,  0.2194],\n","         [-0.1365,  0.0918, -0.1475],\n","         [ 0.2194, -0.1475,  0.2371]],\n","\n","        [[ 0.1855, -0.1246,  0.2003],\n","         [-0.1246,  0.0838, -0.1346],\n","         [ 0.2003, -0.1346,  0.2165]],\n","\n","        [[ 0.1991, -0.1338,  0.2151],\n","         [-0.1338,  0.0900, -0.1446],\n","         [ 0.2151, -0.1446,  0.2325]],\n","\n","        [[ 0.2070, -0.1391,  0.2237],\n","         [-0.1391,  0.0936, -0.1504],\n","         [ 0.2237, -0.1504,  0.2418]]], device='cuda:0')\n","phi tensor([0.2922, 0.3601, 0.1696, 0.1782], device='cuda:0') mu tensor([[0.6119, 0.9142, 0.4375],\n","        [0.6492, 0.8892, 0.4778],\n","        [0.6202, 0.9086, 0.4466],\n","        [0.5986, 0.9231, 0.4232]], device='cuda:0') cov tensor([[[ 0.2078, -0.1397,  0.2244],\n","         [-0.1397,  0.0939, -0.1509],\n","         [ 0.2244, -0.1509,  0.2425]],\n","\n","        [[ 0.1922, -0.1292,  0.2076],\n","         [-0.1292,  0.0869, -0.1396],\n","         [ 0.2076, -0.1396,  0.2243]],\n","\n","        [[ 0.2052, -0.1379,  0.2216],\n","         [-0.1379,  0.0928, -0.1490],\n","         [ 0.2216, -0.1490,  0.2394]],\n","\n","        [[ 0.2139, -0.1438,  0.2311],\n","         [-0.1438,  0.0967, -0.1554],\n","         [ 0.2311, -0.1554,  0.2496]]], device='cuda:0')\n","phi tensor([0.2915, 0.3581, 0.1704, 0.1800], device='cuda:0') mu tensor([[0.6326, 0.9002, 0.4601],\n","        [0.6683, 0.8762, 0.4987],\n","        [0.6363, 0.8977, 0.4642],\n","        [0.6140, 0.9127, 0.4401]], device='cuda:0') cov tensor([[[ 0.2022, -0.1361,  0.2182],\n","         [-0.1361,  0.0916, -0.1469],\n","         [ 0.2182, -0.1469,  0.2356]],\n","\n","        [[ 0.1855, -0.1248,  0.2002],\n","         [-0.1248,  0.0840, -0.1347],\n","         [ 0.2002, -0.1347,  0.2160]],\n","\n","        [[ 0.2006, -0.1349,  0.2164],\n","         [-0.1349,  0.0908, -0.1457],\n","         [ 0.2164, -0.1457,  0.2336]],\n","\n","        [[ 0.2094, -0.1409,  0.2260],\n","         [-0.1409,  0.0948, -0.1520],\n","         [ 0.2260, -0.1520,  0.2439]]], device='cuda:0')\n","phi tensor([0.2929, 0.3620, 0.1695, 0.1756], device='cuda:0') mu tensor([[0.6313, 0.9009, 0.4591],\n","        [0.6685, 0.8759, 0.4992],\n","        [0.6458, 0.8911, 0.4748],\n","        [0.6225, 0.9068, 0.4496]], device='cuda:0') cov tensor([[[ 0.2009, -0.1352,  0.2165],\n","         [-0.1352,  0.0910, -0.1457],\n","         [ 0.2165, -0.1457,  0.2334]],\n","\n","        [[ 0.1840, -0.1238,  0.1983],\n","         [-0.1238,  0.0834, -0.1335],\n","         [ 0.1983, -0.1335,  0.2137]],\n","\n","        [[ 0.1947, -0.1310,  0.2098],\n","         [-0.1310,  0.0882, -0.1412],\n","         [ 0.2098, -0.1412,  0.2261]],\n","\n","        [[ 0.2042, -0.1374,  0.2200],\n","         [-0.1374,  0.0925, -0.1481],\n","         [ 0.2200, -0.1481,  0.2371]]], device='cuda:0')\n","phi tensor([0.2902, 0.3576, 0.1714, 0.1809], device='cuda:0') mu tensor([[0.6302, 0.9009, 0.4586],\n","        [0.6673, 0.8760, 0.4985],\n","        [0.6285, 0.9022, 0.4567],\n","        [0.6031, 0.9193, 0.4293]], device='cuda:0') cov tensor([[[ 0.2031, -0.1367,  0.2188],\n","         [-0.1367,  0.0920, -0.1472],\n","         [ 0.2188, -0.1472,  0.2357]],\n","\n","        [[ 0.1866, -0.1255,  0.2009],\n","         [-0.1255,  0.0845, -0.1352],\n","         [ 0.2009, -0.1352,  0.2164]],\n","\n","        [[ 0.2042, -0.1374,  0.2199],\n","         [-0.1374,  0.0925, -0.1480],\n","         [ 0.2199, -0.1480,  0.2369]],\n","\n","        [[ 0.2147, -0.1444,  0.2312],\n","         [-0.1444,  0.0972, -0.1555],\n","         [ 0.2312, -0.1555,  0.2489]]], device='cuda:0')\n"]},{"output_type":"stream","name":"stderr","text":["100%|██████████| 194/194 [00:05<00:00, 37.17it/s]\n"]},{"output_type":"stream","name":"stdout","text":["phi tensor([0.2929, 0.3618, 0.1697, 0.1755], device='cuda:0') mu tensor([[0.6418, 0.8933, 0.4711],\n","        [0.6793, 0.8680, 0.5115],\n","        [0.6472, 0.8896, 0.4769],\n","        [0.6242, 0.9051, 0.4520]], device='cuda:0') cov tensor([[[ 0.1997, -0.1345,  0.2149],\n","         [-0.1345,  0.0906, -0.1448],\n","         [ 0.2149, -0.1448,  0.2314]],\n","\n","        [[ 0.1816, -0.1223,  0.1955],\n","         [-0.1223,  0.0824, -0.1316],\n","         [ 0.1955, -0.1316,  0.2104]],\n","\n","        [[ 0.1972, -0.1328,  0.2123],\n","         [-0.1328,  0.0895, -0.1430],\n","         [ 0.2123, -0.1430,  0.2285]],\n","\n","        [[ 0.2074, -0.1396,  0.2232],\n","         [-0.1396,  0.0941, -0.1503],\n","         [ 0.2232, -0.1503,  0.2403]]], device='cuda:0')\n","phi tensor([0.2932, 0.3592, 0.1696, 0.1780], device='cuda:0') mu tensor([[0.6465, 0.8900, 0.4767],\n","        [0.6853, 0.8638, 0.5184],\n","        [0.6533, 0.8853, 0.4840],\n","        [0.6395, 0.8945, 0.4692]], device='cuda:0') cov tensor([[[ 0.1997, -0.1345,  0.2144],\n","         [-0.1345,  0.0907, -0.1445],\n","         [ 0.2144, -0.1445,  0.2303]],\n","\n","        [[ 0.1803, -0.1215,  0.1936],\n","         [-0.1215,  0.0819, -0.1305],\n","         [ 0.1936, -0.1305,  0.2079]],\n","\n","        [[ 0.1962, -0.1322,  0.2107],\n","         [-0.1322,  0.0891, -0.1419],\n","         [ 0.2107, -0.1419,  0.2262]],\n","\n","        [[ 0.2024, -0.1363,  0.2173],\n","         [-0.1363,  0.0919, -0.1464],\n","         [ 0.2173, -0.1464,  0.2334]]], device='cuda:0')\n","======================TEST MODE======================\n","N: 198371\n","phi :\n"," tensor([0.2944, 0.3627, 0.1702, 0.1727], device='cuda:0',\n","       grad_fn=<DivBackward0>)\n","mu :\n"," tensor([[0.6351, 0.8980, 0.4642],\n","        [0.6712, 0.8737, 0.5029],\n","        [0.6388, 0.8955, 0.4682],\n","        [0.6134, 0.9126, 0.4410]], device='cuda:0', grad_fn=<DivBackward0>)\n","cov :\n"," tensor([[[ 0.2066, -0.1390,  0.2208],\n","         [-0.1390,  0.0936, -0.1486],\n","         [ 0.2208, -0.1486,  0.2361]],\n","\n","        [[ 0.1898, -0.1277,  0.2028],\n","         [-0.1277,  0.0859, -0.1365],\n","         [ 0.2028, -0.1365,  0.2169]],\n","\n","        [[ 0.2051, -0.1380,  0.2192],\n","         [-0.1380,  0.0929, -0.1475],\n","         [ 0.2192, -0.1475,  0.2344]],\n","\n","        [[ 0.2157, -0.1451,  0.2305],\n","         [-0.1451,  0.0977, -0.1551],\n","         [ 0.2305, -0.1551,  0.2465]]], device='cuda:0',\n","       grad_fn=<DivBackward0>)\n","Threshold : -1.324581265449524\n","Accuracy : 0.9056, Precision : 0.8777, Recall : 0.8286, F-score : 0.8524\n"]}]},{"cell_type":"code","source":[""],"metadata":{"id":"0hz7p89R99no","executionInfo":{"status":"aborted","timestamp":1659065234831,"user_tz":-540,"elapsed":10,"user":{"displayName":"아이덴티파이ai","userId":"09195867153538576050"}}},"execution_count":null,"outputs":[]}]}